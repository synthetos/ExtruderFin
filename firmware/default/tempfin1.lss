
tempfin1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a4  00800100  0000419a  0000422e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000419a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003de  008002a4  008002a4  000043d2  2**0
                  ALLOC
  3 .debug_aranges 00000320  00000000  00000000  000043d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e36  00000000  00000000  000046f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000817a  00000000  00000000  00005528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002450  00000000  00000000  0000d6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000037da  00000000  00000000  0000faf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000980  00000000  00000000  000132cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000014dd  00000000  00000000  00013c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002747  00000000  00000000  00015129  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  00017870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__ctors_end>
       4:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
       8:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
       c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      10:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      14:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      18:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      1c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      20:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      24:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      28:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      2c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      30:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      34:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      38:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__vector_14>
      3c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      40:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      44:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__vector_17>
      48:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__vector_18>
      4c:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__vector_19>
      50:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      54:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      58:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      5c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      60:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      64:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>

00000068 <__c.1790>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1788>:
      6c:	69 6e 66 00                                         inf.

00000070 <msg_hstate>:
      70:	d3 00 d8 00 e3 00 ed 00                             ........

00000078 <__c.1619>:
      78:	0a 00                                               ..

0000007a <__c.1614>:
      7a:	49 3a 25 31 2e 33 66 20 20 00                       I:%1.3f  .

00000084 <__c.1612>:
      84:	45 72 72 3a 25 31 2e 33 66 20 20 00                 Err:%1.3f  .

00000090 <__c.1610>:
      90:	53 74 64 44 65 76 3a 25 31 2e 33 66 20 20 00        StdDev:%1.3f  .

0000009f <__c.1608>:
      9f:	50 57 4d 3a 25 31 2e 33 66 20 20 00                 PWM:%1.3f  .

000000ab <__c.1606>:
      ab:	54 65 6d 70 3a 25 31 2e 33 66 20 20 00              Temp:%1.3f  .

000000b8 <__c.1602>:
      b8:	0a 44 65 76 69 63 65 20 49 6e 69 74 69 61 6c 69     .Device Initiali
      c8:	7a 65 64 20 25 31 2e 30 66 0a 00                    zed %1.0f..

000000d3 <msg_hstate0>:
      d3:	20 20 4f 4b 00                                        OK.

000000d8 <msg_hstate1>:
      d8:	20 20 53 68 75 74 64 6f 77 6e 00                      Shutdown.

000000e3 <msg_hstate2>:
      e3:	20 20 48 65 61 74 69 6e 67 00                         Heating.

000000ed <msg_hstate3>:
      ed:	20 20 52 45 47 55 4c 41 54 45 44 00                   REGULATED.

000000f9 <__c.1995>:
      f9:	48 65 61 74 65 72 20 54 69 6d 65 6f 75 74 20 45     Heater Timeout E
     109:	72 72 6f 72 20 53 68 75 74 64 6f 77 6e 0a 00        rror Shutdown..

00000118 <__c.1993>:
     118:	48 65 61 74 65 72 20 41 6d 62 69 65 6e 74 20 45     Heater Ambient E
     128:	72 72 6f 72 20 53 68 75 74 64 6f 77 6e 0a 00        rror Shutdown..

00000137 <__c.1990>:
     137:	48 65 61 74 65 72 20 53 65 6e 73 6f 72 20 45 72     Heater Sensor Er
     147:	72 6f 72 20 53 68 75 74 64 6f 77 6e 0a 00           ror Shutdown..

00000155 <cfgArray>:
     155:	73 79 73 00 66 62 00 00 00 00 07 0c 0e 26 0e 60     sys.fb.......&.`
     165:	06 c3 f5 e0 40 73 79 73 00 66 76 00 00 00 00 07     ....@sys.fv.....
     175:	0c 0e 26 0e 64 06 cd cc cc 3d 73 79 73 00 68 76     ..&.d....=sys.hv
     185:	00 00 00 00 07 0c 0e 26 0e 68 06 cd cc cc 3d 68     .......&.h....=h
     195:	31 00 00 68 31 73 74 00 00 00 89 0d a8 0d 60 03     1..h1st.......`.
     1a5:	00 00 00 00 68 31 00 00 68 31 74 6d 70 00 00 0c     ....h1..h1tmp...
     1b5:	0e 26 0e 66 03 00 00 89 c3 68 31 00 00 68 31 73     .&.f.....h1..h1s
     1c5:	65 74 00 00 0c 0e 26 0e 6a 03 00 00 20 41 68 31     et....&.j... Ah1
     1d5:	00 00 68 31 68 79 73 00 00 89 0d a8 0d 63 03 00     ..h1hys......c..
     1e5:	00 20 41 68 31 00 00 68 31 61 6d 62 00 00 0c 0e     . Ah1..h1amb....
     1f5:	26 0e 7e 03 00 00 20 42 68 31 00 00 68 31 6f 76     &.~... Bh1..h1ov
     205:	72 00 00 0c 0e 26 0e 82 03 00 00 96 43 68 31 00     r....&......Ch1.
     215:	00 68 31 61 74 6f 00 00 0c 0e 26 0e 76 03 00 00     .h1ato....&.v...
     225:	b4 42 68 31 00 00 68 31 72 65 67 00 00 0c 0e 26     .Bh1..h1reg....&
     235:	0e 6e 03 00 00 40 40 68 31 00 00 68 31 72 74 6f     .n...@@h1..h1rto
     245:	00 00 0c 0e 26 0e 7a 03 00 00 96 43 68 31 00 00     ....&.z....Ch1..
     255:	68 31 62 61 64 00 00 89 0d a8 0d 64 03 00 00 a0     h1bad......d....
     265:	40 73 31 00 00 73 31 73 74 00 00 00 89 0d a8 0d     @s1..s1st.......
     275:	b0 03 00 00 00 00 73 31 00 00 73 31 74 6d 70 00     ......s1..s1tmp.
     285:	00 0c 0e 26 0e b4 03 00 00 89 c3 73 31 00 00 73     ...&.......s1..s
     295:	31 73 76 6d 00 00 0c 0e 26 0e bc 03 cd cc 8c 3f     1svm....&......?
     2a5:	73 31 00 00 73 31 72 76 6d 00 00 0c 0e 26 0e c0     s1..s1rvm....&..
     2b5:	03 00 00 a0 41 70 31 00 00 70 31 6b 70 00 00 00     ....Ap1..p1kp...
     2c5:	0c 0e 26 0e a4 03 00 00 a0 40 70 31 00 00 70 31     ..&......@p1..p1
     2d5:	6b 69 00 00 00 0c 0e 26 0e a8 03 cd cc cc 3d 70     ki.....&......=p
     2e5:	31 00 00 70 31 6b 64 00 00 00 0c 0e 26 0e ac 03     1..p1kd.....&...
     2f5:	00 00 00 3f 70 31 00 00 70 31 73 6d 78 00 00 0c     ...?p1..p1smx...
     305:	0e 26 0e 8c 03 00 00 c8 42 70 31 00 00 70 31 73     .&......Bp1..p1s
     315:	6d 6e 00 00 0c 0e 26 0e 90 03 00 00 00 00 00 00     mn....&.........
     325:	00 00 73 79 73 00 00 00 00 4d 11 9b 11 d4 02 00     ..sys....M......
     335:	00 00 00 00 00 00 00 68 31 00 00 00 00 00 4d 11     .......h1.....M.
     345:	9b 11 d4 02 00 00 00 00 00 00 00 00 73 31 00 00     ............s1..
     355:	00 00 00 4d 11 9b 11 d4 02 00 00 00 00 00 00 00     ...M............
     365:	00 70 31 00 00 00 00 00 4d 11 9b 11 d4 02 00 00     .p1.....M.......
	...

00000377 <pstr_inf>:
     377:	49 4e 46                                            INF

0000037a <pstr_inity>:
     37a:	49 4e 49 54 59                                      INITY

0000037f <pstr_nan>:
     37f:	4e 41 4e                                            NAN

00000382 <pwr_m10>:
     382:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     392:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000039a <pwr_p10>:
     39a:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     3aa:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     3ba:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     3ca:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     3da:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     3ea:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     3fa:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     40a:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     41a:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     42a:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     43a:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     44a:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     45a:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     46a:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     47a:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     48a:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     49a:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     4aa:	3d 27                                               ='

000004ac <__ctors_end>:
     4ac:	11 24       	eor	r1, r1
     4ae:	1f be       	out	0x3f, r1	; 63
     4b0:	cf ef       	ldi	r28, 0xFF	; 255
     4b2:	d8 e0       	ldi	r29, 0x08	; 8
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	cd bf       	out	0x3d, r28	; 61

000004b8 <__do_copy_data>:
     4b8:	12 e0       	ldi	r17, 0x02	; 2
     4ba:	a0 e0       	ldi	r26, 0x00	; 0
     4bc:	b1 e0       	ldi	r27, 0x01	; 1
     4be:	ea e9       	ldi	r30, 0x9A	; 154
     4c0:	f1 e4       	ldi	r31, 0x41	; 65
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <.do_copy_data_start>

000004c4 <.do_copy_data_loop>:
     4c4:	05 90       	lpm	r0, Z+
     4c6:	0d 92       	st	X+, r0

000004c8 <.do_copy_data_start>:
     4c8:	a4 3a       	cpi	r26, 0xA4	; 164
     4ca:	b1 07       	cpc	r27, r17
     4cc:	d9 f7       	brne	.-10     	; 0x4c4 <.do_copy_data_loop>

000004ce <__do_clear_bss>:
     4ce:	16 e0       	ldi	r17, 0x06	; 6
     4d0:	a4 ea       	ldi	r26, 0xA4	; 164
     4d2:	b2 e0       	ldi	r27, 0x02	; 2
     4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <.do_clear_bss_start>

000004d6 <.do_clear_bss_loop>:
     4d6:	1d 92       	st	X+, r1

000004d8 <.do_clear_bss_start>:
     4d8:	a2 38       	cpi	r26, 0x82	; 130
     4da:	b1 07       	cpc	r27, r17
     4dc:	e1 f7       	brne	.-8      	; 0x4d6 <.do_clear_bss_loop>
     4de:	0e 94 b1 03 	call	0x762	; 0x762 <main>
     4e2:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <_exit>

000004e6 <__bad_interrupt>:
     4e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004ea <isnumber>:
	return (max);
}

uint8_t isnumber(char c)
{
	if (c == '.') { return (true); }
     4ea:	8e 32       	cpi	r24, 0x2E	; 46
     4ec:	49 f0       	breq	.+18     	; 0x500 <isnumber+0x16>
	if (c == '-') { return (true); }
     4ee:	8d 32       	cpi	r24, 0x2D	; 45
     4f0:	39 f0       	breq	.+14     	; 0x500 <isnumber+0x16>
	if (c == '+') { return (true); }
     4f2:	8b 32       	cpi	r24, 0x2B	; 43
     4f4:	29 f0       	breq	.+10     	; 0x500 <isnumber+0x16>
	return (isdigit(c));
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	c0 97       	sbiw	r24, 0x30	; 48
     4fc:	0a 97       	sbiw	r24, 0x0a	; 10
     4fe:	08 f4       	brcc	.+2      	; 0x502 <isnumber+0x18>
     500:	21 e0       	ldi	r18, 0x01	; 1
}
     502:	82 2f       	mov	r24, r18
     504:	08 95       	ret

00000506 <std_dev>:
 *
 *	"A lot of people talk about standard deviation but what is a standard deviant?"
 */

double std_dev(double a[], uint8_t n, double *mean) 
{
     506:	2f 92       	push	r2
     508:	3f 92       	push	r3
     50a:	4f 92       	push	r4
     50c:	5f 92       	push	r5
     50e:	6f 92       	push	r6
     510:	7f 92       	push	r7
     512:	8f 92       	push	r8
     514:	9f 92       	push	r9
     516:	af 92       	push	r10
     518:	bf 92       	push	r11
     51a:	cf 92       	push	r12
     51c:	df 92       	push	r13
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	df 93       	push	r29
     528:	cf 93       	push	r28
     52a:	00 d0       	rcall	.+0      	; 0x52c <std_dev+0x26>
     52c:	00 d0       	rcall	.+0      	; 0x52e <std_dev+0x28>
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	d6 2e       	mov	r13, r22
     534:	5a 83       	std	Y+2, r21	; 0x02
     536:	49 83       	std	Y+1, r20	; 0x01
	if(n == 0) { return (0);}
     538:	66 23       	and	r22, r22
     53a:	29 f4       	brne	.+10     	; 0x546 <std_dev+0x40>
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	57 c0       	rjmp	.+174    	; 0x5f4 <std_dev+0xee>
     546:	9c 83       	std	Y+4, r25	; 0x04
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	aa 24       	eor	r10, r10
     54c:	0f 2e       	mov	r0, r31
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	6f 2e       	mov	r6, r31
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	7f 2e       	mov	r7, r31
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	8f 2e       	mov	r8, r31
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	9f 2e       	mov	r9, r31
     55e:	f0 2d       	mov	r31, r0
     560:	13 01       	movw	r2, r6
     562:	24 01       	movw	r4, r8
     564:	1d c0       	rjmp	.+58     	; 0x5a0 <std_dev+0x9a>
	double sum = 0;
	double sq_sum = 0;
	for(uint8_t i=0; i<n; ++i) {
		sum += a[i];
     566:	eb 81       	ldd	r30, Y+3	; 0x03
     568:	fc 81       	ldd	r31, Y+4	; 0x04
     56a:	e1 90       	ld	r14, Z+
     56c:	f1 90       	ld	r15, Z+
     56e:	01 91       	ld	r16, Z+
     570:	11 91       	ld	r17, Z+
     572:	fc 83       	std	Y+4, r31	; 0x04
     574:	eb 83       	std	Y+3, r30	; 0x03
     576:	c4 01       	movw	r24, r8
     578:	b3 01       	movw	r22, r6
     57a:	a8 01       	movw	r20, r16
     57c:	97 01       	movw	r18, r14
     57e:	0e 94 6d 19 	call	0x32da	; 0x32da <__addsf3>
     582:	3b 01       	movw	r6, r22
     584:	4c 01       	movw	r8, r24
		sq_sum += square(a[i]);
     586:	c8 01       	movw	r24, r16
     588:	b7 01       	movw	r22, r14
     58a:	0e 94 c4 1b 	call	0x3788	; 0x3788 <square>
     58e:	9b 01       	movw	r18, r22
     590:	ac 01       	movw	r20, r24
     592:	c2 01       	movw	r24, r4
     594:	b1 01       	movw	r22, r2
     596:	0e 94 6d 19 	call	0x32da	; 0x32da <__addsf3>
     59a:	1b 01       	movw	r2, r22
     59c:	2c 01       	movw	r4, r24
double std_dev(double a[], uint8_t n, double *mean) 
{
	if(n == 0) { return (0);}
	double sum = 0;
	double sq_sum = 0;
	for(uint8_t i=0; i<n; ++i) {
     59e:	a3 94       	inc	r10
     5a0:	ad 14       	cp	r10, r13
     5a2:	08 f3       	brcs	.-62     	; 0x566 <std_dev+0x60>
		sum += a[i];
		sq_sum += square(a[i]);
	}
	*mean = sum / n;
     5a4:	6d 2d       	mov	r22, r13
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	88 27       	eor	r24, r24
     5aa:	77 fd       	sbrc	r23, 7
     5ac:	80 95       	com	r24
     5ae:	98 2f       	mov	r25, r24
     5b0:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__floatsisf>
     5b4:	5b 01       	movw	r10, r22
     5b6:	6c 01       	movw	r12, r24
     5b8:	c4 01       	movw	r24, r8
     5ba:	b3 01       	movw	r22, r6
     5bc:	a6 01       	movw	r20, r12
     5be:	95 01       	movw	r18, r10
     5c0:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__divsf3>
     5c4:	9b 01       	movw	r18, r22
     5c6:	ac 01       	movw	r20, r24
     5c8:	e9 81       	ldd	r30, Y+1	; 0x01
     5ca:	fa 81       	ldd	r31, Y+2	; 0x02
     5cc:	20 83       	st	Z, r18
     5ce:	31 83       	std	Z+1, r19	; 0x01
     5d0:	42 83       	std	Z+2, r20	; 0x02
     5d2:	53 83       	std	Z+3, r21	; 0x03
	double variance = (sq_sum / n) - square(*mean);
     5d4:	0e 94 c4 1b 	call	0x3788	; 0x3788 <square>
     5d8:	7b 01       	movw	r14, r22
     5da:	8c 01       	movw	r16, r24
	return sqrt(variance);
     5dc:	c2 01       	movw	r24, r4
     5de:	b1 01       	movw	r22, r2
     5e0:	a6 01       	movw	r20, r12
     5e2:	95 01       	movw	r18, r10
     5e4:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__divsf3>
     5e8:	a8 01       	movw	r20, r16
     5ea:	97 01       	movw	r18, r14
     5ec:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__subsf3>
     5f0:	0e 94 86 1b 	call	0x370c	; 0x370c <sqrt>
}
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	cf 91       	pop	r28
     5fe:	df 91       	pop	r29
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	df 90       	pop	r13
     60a:	cf 90       	pop	r12
     60c:	bf 90       	pop	r11
     60e:	af 90       	pop	r10
     610:	9f 90       	pop	r9
     612:	8f 90       	pop	r8
     614:	7f 90       	pop	r7
     616:	6f 90       	pop	r6
     618:	5f 90       	pop	r5
     61a:	4f 90       	pop	r4
     61c:	3f 90       	pop	r3
     61e:	2f 90       	pop	r2
     620:	08 95       	ret

00000622 <kinen_init>:
 *	Would like some kind of auto-detect here. For now it's just commenting
 */
void kinen_init(void)
{
	return;
}
     622:	08 95       	ret

00000624 <rpt_readout>:
	printf_P(PSTR("\nDevice Initialized %1.0f\n"),42);
}

void rpt_readout()
{
	printf_P(PSTR("Temp:%1.3f  "), 		sensor.temperature);
     624:	00 d0       	rcall	.+0      	; 0x626 <rpt_readout+0x2>
     626:	00 d0       	rcall	.+0      	; 0x628 <rpt_readout+0x4>
     628:	00 d0       	rcall	.+0      	; 0x62a <rpt_readout+0x6>
     62a:	8b ea       	ldi	r24, 0xAB	; 171
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	ed b7       	in	r30, 0x3d	; 61
     630:	fe b7       	in	r31, 0x3e	; 62
     632:	92 83       	std	Z+2, r25	; 0x02
     634:	81 83       	std	Z+1, r24	; 0x01
     636:	80 91 b4 03 	lds	r24, 0x03B4
     63a:	90 91 b5 03 	lds	r25, 0x03B5
     63e:	a0 91 b6 03 	lds	r26, 0x03B6
     642:	b0 91 b7 03 	lds	r27, 0x03B7
     646:	83 83       	std	Z+3, r24	; 0x03
     648:	94 83       	std	Z+4, r25	; 0x04
     64a:	a5 83       	std	Z+5, r26	; 0x05
     64c:	b6 83       	std	Z+6, r27	; 0x06
     64e:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <printf_P>
	printf_P(PSTR("PWM:%1.3f  "),		pid.output);
     652:	8f e9       	ldi	r24, 0x9F	; 159
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	ed b7       	in	r30, 0x3d	; 61
     658:	fe b7       	in	r31, 0x3e	; 62
     65a:	92 83       	std	Z+2, r25	; 0x02
     65c:	81 83       	std	Z+1, r24	; 0x01
     65e:	80 91 88 03 	lds	r24, 0x0388
     662:	90 91 89 03 	lds	r25, 0x0389
     666:	a0 91 8a 03 	lds	r26, 0x038A
     66a:	b0 91 8b 03 	lds	r27, 0x038B
     66e:	83 83       	std	Z+3, r24	; 0x03
     670:	94 83       	std	Z+4, r25	; 0x04
     672:	a5 83       	std	Z+5, r26	; 0x05
     674:	b6 83       	std	Z+6, r27	; 0x06
     676:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <printf_P>
//	printf_P(PSTR("s[0]:%1.3f  "), 		sensor.sample[0]);
	printf_P(PSTR("StdDev:%1.3f  "),	sensor.std_dev);
     67a:	80 e9       	ldi	r24, 0x90	; 144
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	ed b7       	in	r30, 0x3d	; 61
     680:	fe b7       	in	r31, 0x3e	; 62
     682:	92 83       	std	Z+2, r25	; 0x02
     684:	81 83       	std	Z+1, r24	; 0x01
     686:	80 91 b8 03 	lds	r24, 0x03B8
     68a:	90 91 b9 03 	lds	r25, 0x03B9
     68e:	a0 91 ba 03 	lds	r26, 0x03BA
     692:	b0 91 bb 03 	lds	r27, 0x03BB
     696:	83 83       	std	Z+3, r24	; 0x03
     698:	94 83       	std	Z+4, r25	; 0x04
     69a:	a5 83       	std	Z+5, r26	; 0x05
     69c:	b6 83       	std	Z+6, r27	; 0x06
     69e:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <printf_P>
//	printf_P(PSTR("Samples:%1.3f  "),	sensor.samples);
	printf_P(PSTR("Err:%1.3f  "),		pid.error);
     6a2:	84 e8       	ldi	r24, 0x84	; 132
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	ed b7       	in	r30, 0x3d	; 61
     6a8:	fe b7       	in	r31, 0x3e	; 62
     6aa:	92 83       	std	Z+2, r25	; 0x02
     6ac:	81 83       	std	Z+1, r24	; 0x01
     6ae:	80 91 94 03 	lds	r24, 0x0394
     6b2:	90 91 95 03 	lds	r25, 0x0395
     6b6:	a0 91 96 03 	lds	r26, 0x0396
     6ba:	b0 91 97 03 	lds	r27, 0x0397
     6be:	83 83       	std	Z+3, r24	; 0x03
     6c0:	94 83       	std	Z+4, r25	; 0x04
     6c2:	a5 83       	std	Z+5, r26	; 0x05
     6c4:	b6 83       	std	Z+6, r27	; 0x06
     6c6:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <printf_P>
	printf_P(PSTR("I:%1.3f  "),			pid.integral);
     6ca:	8a e7       	ldi	r24, 0x7A	; 122
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	ed b7       	in	r30, 0x3d	; 61
     6d0:	fe b7       	in	r31, 0x3e	; 62
     6d2:	92 83       	std	Z+2, r25	; 0x02
     6d4:	81 83       	std	Z+1, r24	; 0x01
     6d6:	80 91 9c 03 	lds	r24, 0x039C
     6da:	90 91 9d 03 	lds	r25, 0x039D
     6de:	a0 91 9e 03 	lds	r26, 0x039E
     6e2:	b0 91 9f 03 	lds	r27, 0x039F
     6e6:	83 83       	std	Z+3, r24	; 0x03
     6e8:	94 83       	std	Z+4, r25	; 0x04
     6ea:	a5 83       	std	Z+5, r26	; 0x05
     6ec:	b6 83       	std	Z+6, r27	; 0x06
     6ee:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <printf_P>
//	printf_P(PSTR("D:%1.3f  "),			pid.derivative);
//	printf_P(PSTR("Hy:%1.3f  "),		heater.hysteresis);

	printf_P((PGM_P)pgm_read_word(&msg_hstate[heater.state]));
     6f2:	80 91 60 03 	lds	r24, 0x0360
     6f6:	e8 2f       	mov	r30, r24
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	ee 0f       	add	r30, r30
     6fc:	ff 1f       	adc	r31, r31
     6fe:	e0 59       	subi	r30, 0x90	; 144
     700:	ff 4f       	sbci	r31, 0xFF	; 255
     702:	85 91       	lpm	r24, Z+
     704:	94 91       	lpm	r25, Z+
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	ed b7       	in	r30, 0x3d	; 61
     710:	fe b7       	in	r31, 0x3e	; 62
     712:	92 83       	std	Z+2, r25	; 0x02
     714:	81 83       	std	Z+1, r24	; 0x01
     716:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <printf_P>
//	printf_P((PGM_P)pgm_read_word(&msg_scode[sensor.code]));
	printf_P(PSTR("\n")); 
     71a:	88 e7       	ldi	r24, 0x78	; 120
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	ed b7       	in	r30, 0x3d	; 61
     720:	fe b7       	in	r31, 0x3e	; 62
     722:	92 83       	std	Z+2, r25	; 0x02
     724:	81 83       	std	Z+1, r24	; 0x01
     726:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <printf_P>
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
}
     72e:	08 95       	ret

00000730 <rpt_initialized>:
static PGM_P const msg_hstate[] PROGMEM = { msg_hstate0, msg_hstate1, msg_hstate2, msg_hstate3 };

/*** Display routines ***/
void rpt_initialized()
{
	printf_P(PSTR("\nDevice Initialized %1.0f\n"),42);
     730:	00 d0       	rcall	.+0      	; 0x732 <rpt_initialized+0x2>
     732:	00 d0       	rcall	.+0      	; 0x734 <rpt_initialized+0x4>
     734:	88 eb       	ldi	r24, 0xB8	; 184
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	ed b7       	in	r30, 0x3d	; 61
     73a:	fe b7       	in	r31, 0x3e	; 62
     73c:	92 83       	std	Z+2, r25	; 0x02
     73e:	81 83       	std	Z+1, r24	; 0x01
     740:	8a e2       	ldi	r24, 0x2A	; 42
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	94 83       	std	Z+4, r25	; 0x04
     746:	83 83       	std	Z+3, r24	; 0x03
     748:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <printf_P>
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
}
     754:	08 95       	ret

00000756 <canned_startup>:
 *	It's best to create a test file for really complicated things.
 */
void canned_startup()	// uncomment __CANNED_STARTUP in tempfin1.h if you need this run
{
#ifdef __CANNED_STARTUP
	xio_queue_RX_string(XIO_DEV_USART, "{\"fv\":\"\"}\n");
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	71 e0       	ldi	r23, 0x01	; 1
     75c:	0e 94 2a 05 	call	0xa54	; 0xa54 <xio_queue_RX_string>
#endif
}
     760:	08 95       	ret

00000762 <main>:
 *	Device and Kinen initialization
 *	Main loop handler
 */
int main(void)
{
	cli();
     762:	f8 94       	cli
								// system-level inits
	sys_init();					// do this first
     764:	0e 94 b5 06 	call	0xd6a	; 0xd6a <sys_init>
	xio_init();					// do this second
     768:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <xio_init>
	kinen_init();				// do this third
     76c:	0e 94 11 03 	call	0x622	; 0x622 <kinen_init>
	cfg_init();
     770:	0e 94 c2 11 	call	0x2384	; 0x2384 <cfg_init>
//	led_init();

	// application level inits
//	heater_init();				// setup the heater module and subordinate functions
//	sensor_init();
	sei(); 						// enable interrupts
     774:	78 94       	sei
	rpt_initialized();			// send initalization string
     776:	0e 94 98 03 	call	0x730	; 0x730 <rpt_initialized>
 *	It's best to create a test file for really complicated things.
 */
void canned_startup()	// uncomment __CANNED_STARTUP in tempfin1.h if you need this run
{
#ifdef __CANNED_STARTUP
	xio_queue_RX_string(XIO_DEV_USART, "{\"fv\":\"\"}\n");
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	71 e0       	ldi	r23, 0x01	; 1
     780:	0e 94 2a 05 	call	0xa54	; 0xa54 <xio_queue_RX_string>
 *	For any other status code exceution continues down the list.
 */
#define	RUN(func) if (func == STAT_EAGAIN) return; 
static void _controller()
{
	RUN(tick_callback());		// regular interval timer clock handler (ticks)
     784:	0e 94 0f 08 	call	0x101e	; 0x101e <tick_callback>
     788:	82 30       	cpi	r24, 0x02	; 2
     78a:	e1 f3       	breq	.-8      	; 0x784 <main+0x22>
	RUN(_dispatch());			// read and execute next incoming command
}

static uint8_t _dispatch()
{
	ritorno (xio_gets(kc.src, kc.buf, sizeof(kc.buf)));// read line or return if not completed
     78c:	80 91 d8 02 	lds	r24, 0x02D8
     790:	6f ed       	ldi	r22, 0xDF	; 223
     792:	72 e0       	ldi	r23, 0x02	; 2
     794:	40 e8       	ldi	r20, 0x80	; 128
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	0e 94 e5 03 	call	0x7ca	; 0x7ca <xio_gets>
     79c:	80 93 5f 03 	sts	0x035F, r24
     7a0:	88 23       	and	r24, r24
     7a2:	81 f7       	brne	.-32     	; 0x784 <main+0x22>
	json_parser(kc.buf);
     7a4:	8f ed       	ldi	r24, 0xDF	; 223
     7a6:	92 e0       	ldi	r25, 0x02	; 2
     7a8:	0e 94 22 15 	call	0x2a44	; 0x2a44 <json_parser>
     7ac:	eb cf       	rjmp	.-42     	; 0x784 <main+0x22>

000007ae <xio_open>:
 *
 * It might be prudent to run an assertion like below, but we trust the callers:
 * 	if (dev < XIO_DEV_COUNT) blah blah blah
 *	else  return (_FDEV_ERR);	// XIO_NO_SUCH_DEVICE
 */
FILE *xio_open(uint8_t dev, const char *addr, flags_t flags) { return (ds[dev]->x_open(dev, addr, flags));}
     7ae:	e8 2f       	mov	r30, r24
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	ee 0f       	add	r30, r30
     7b4:	ff 1f       	adc	r31, r31
     7b6:	e0 5e       	subi	r30, 0xE0	; 224
     7b8:	fb 4f       	sbci	r31, 0xFB	; 251
     7ba:	01 90       	ld	r0, Z+
     7bc:	f0 81       	ld	r31, Z
     7be:	e0 2d       	mov	r30, r0
     7c0:	01 80       	ldd	r0, Z+1	; 0x01
     7c2:	f2 81       	ldd	r31, Z+2	; 0x02
     7c4:	e0 2d       	mov	r30, r0
     7c6:	09 95       	icall
     7c8:	08 95       	ret

000007ca <xio_gets>:
int xio_gets(const uint8_t dev, char *buf, const int size) { return (ds[dev]->x_gets(ds[dev], buf, size));}
     7ca:	e8 2f       	mov	r30, r24
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	ee 0f       	add	r30, r30
     7d0:	ff 1f       	adc	r31, r31
     7d2:	e0 5e       	subi	r30, 0xE0	; 224
     7d4:	fb 4f       	sbci	r31, 0xFB	; 251
     7d6:	01 90       	ld	r0, Z+
     7d8:	f0 81       	ld	r31, Z
     7da:	e0 2d       	mov	r30, r0
     7dc:	25 81       	ldd	r18, Z+5	; 0x05
     7de:	36 81       	ldd	r19, Z+6	; 0x06
     7e0:	cf 01       	movw	r24, r30
     7e2:	f9 01       	movw	r30, r18
     7e4:	09 95       	icall
     7e6:	08 95       	ret

000007e8 <xio_getc>:
int xio_getc(const uint8_t dev) { return (ds[dev]->x_getc(&(ds[dev]->stream)));}
     7e8:	e8 2f       	mov	r30, r24
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	ee 0f       	add	r30, r30
     7ee:	ff 1f       	adc	r31, r31
     7f0:	e0 5e       	subi	r30, 0xE0	; 224
     7f2:	fb 4f       	sbci	r31, 0xFB	; 251
     7f4:	01 90       	ld	r0, Z+
     7f6:	f0 81       	ld	r31, Z
     7f8:	e0 2d       	mov	r30, r0
     7fa:	27 81       	ldd	r18, Z+7	; 0x07
     7fc:	30 85       	ldd	r19, Z+8	; 0x08
     7fe:	cf 01       	movw	r24, r30
     800:	43 96       	adiw	r24, 0x13	; 19
     802:	f9 01       	movw	r30, r18
     804:	09 95       	icall
     806:	08 95       	ret

00000808 <xio_putc>:
int xio_putc(const uint8_t dev, const char c) { return (ds[dev]->x_putc(c, &(ds[dev]->stream)));}
     808:	e8 2f       	mov	r30, r24
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	ee 0f       	add	r30, r30
     80e:	ff 1f       	adc	r31, r31
     810:	e0 5e       	subi	r30, 0xE0	; 224
     812:	fb 4f       	sbci	r31, 0xFB	; 251
     814:	01 90       	ld	r0, Z+
     816:	f0 81       	ld	r31, Z
     818:	e0 2d       	mov	r30, r0
     81a:	21 85       	ldd	r18, Z+9	; 0x09
     81c:	32 85       	ldd	r19, Z+10	; 0x0a
     81e:	86 2f       	mov	r24, r22
     820:	73 96       	adiw	r30, 0x13	; 19
     822:	bf 01       	movw	r22, r30
     824:	f9 01       	movw	r30, r18
     826:	09 95       	icall
     828:	08 95       	ret

0000082a <xio_set_stdin>:
int xio_ctrl(const uint8_t dev, const flags_t flags) { return (xio_ctrl_device(ds[dev], flags));}
int xio_set_baud(const uint8_t dev, const uint8_t baud) { xio_set_baud_usart(ds[dev], baud); return (XIO_OK);}
void xio_set_stdin(const uint8_t dev)  { stdin  = &(ds[dev]->stream);}
     82a:	e8 2f       	mov	r30, r24
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	ee 0f       	add	r30, r30
     830:	ff 1f       	adc	r31, r31
     832:	e0 5e       	subi	r30, 0xE0	; 224
     834:	fb 4f       	sbci	r31, 0xFB	; 251
     836:	80 81       	ld	r24, Z
     838:	91 81       	ldd	r25, Z+1	; 0x01
     83a:	43 96       	adiw	r24, 0x13	; 19
     83c:	90 93 7b 06 	sts	0x067B, r25
     840:	80 93 7a 06 	sts	0x067A, r24
     844:	08 95       	ret

00000846 <xio_set_stdout>:
void xio_set_stdout(const uint8_t dev) { stdout = &(ds[dev]->stream);}
     846:	e8 2f       	mov	r30, r24
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	ee 0f       	add	r30, r30
     84c:	ff 1f       	adc	r31, r31
     84e:	e0 5e       	subi	r30, 0xE0	; 224
     850:	fb 4f       	sbci	r31, 0xFB	; 251
     852:	80 81       	ld	r24, Z
     854:	91 81       	ldd	r25, Z+1	; 0x01
     856:	43 96       	adiw	r24, 0x13	; 19
     858:	90 93 7d 06 	sts	0x067D, r25
     85c:	80 93 7c 06 	sts	0x067C, r24
     860:	08 95       	ret

00000862 <xio_set_stderr>:
void xio_set_stderr(const uint8_t dev) { stderr = &(ds[dev]->stream);}
     862:	e8 2f       	mov	r30, r24
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	ee 0f       	add	r30, r30
     868:	ff 1f       	adc	r31, r31
     86a:	e0 5e       	subi	r30, 0xE0	; 224
     86c:	fb 4f       	sbci	r31, 0xFB	; 251
     86e:	80 81       	ld	r24, Z
     870:	91 81       	ldd	r25, Z+1	; 0x01
     872:	43 96       	adiw	r24, 0x13	; 19
     874:	90 93 7f 06 	sts	0x067F, r25
     878:	80 93 7e 06 	sts	0x067E, r24
     87c:	08 95       	ret

0000087e <xio_null>:
	// setup stdio stream structure
	fdev_setup_stream(&d->stream, d->x_putc, d->x_getc, _FDEV_SETUP_RW);
	fdev_set_udata(&d->stream, d);	// reference yourself for udata 
}

void xio_null(xioDev_t *d) { return;}
     87e:	08 95       	ret

00000880 <xio_ctrl_device>:

#define SETFLAG(t,f) if ((flags & t) != 0) { d->f = true; }
#define CLRFLAG(t,f) if ((flags & t) != 0) { d->f = false; }

int xio_ctrl_device(xioDev_t *d, const flags_t flags)
{
     880:	fc 01       	movw	r30, r24
	SETFLAG(XIO_BLOCK,		flag_block);
     882:	60 ff       	sbrs	r22, 0
     884:	02 c0       	rjmp	.+4      	; 0x88a <xio_ctrl_device+0xa>
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	81 a3       	std	Z+33, r24	; 0x21
	CLRFLAG(XIO_NOBLOCK,	flag_block);
     88a:	61 fd       	sbrc	r22, 1
     88c:	11 a2       	std	Z+33, r1	; 0x21

	SETFLAG(XIO_ECHO,		flag_echo);
     88e:	64 ff       	sbrs	r22, 4
     890:	02 c0       	rjmp	.+4      	; 0x896 <xio_ctrl_device+0x16>
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	82 a3       	std	Z+34, r24	; 0x22
	CLRFLAG(XIO_NOECHO,		flag_echo);
     896:	65 fd       	sbrc	r22, 5
     898:	12 a2       	std	Z+34, r1	; 0x22

	SETFLAG(XIO_LINEMODE,	flag_linemode);
     89a:	74 ff       	sbrs	r23, 4
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <xio_ctrl_device+0x22>
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	83 a3       	std	Z+35, r24	; 0x23
	CLRFLAG(XIO_NOLINEMODE,	flag_linemode);
     8a2:	75 fd       	sbrc	r23, 5
     8a4:	13 a2       	std	Z+35, r1	; 0x23
//	SETFLAG(XIO_IGNORECR,	flag_ignorecr);
//	CLRFLAG(XIO_NOIGNORECR,	flag_ignorecr);
//	SETFLAG(XIO_IGNORELF,	flag_ignorelf);
//	CLRFLAG(XIO_NOIGNORELF,	flag_ignorelf);
	return (XIO_OK);
}
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	08 95       	ret

000008ac <xio_reset_device>:
	xio_set_stdout(XIO_DEV_USART);
	xio_set_stderr(XIO_DEV_SPI);
}

void xio_reset_device(xioDev_t *d,  const flags_t flags)
{
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	ec 01       	movw	r28, r24
	if (d->rx != NULL) {			// don't write on a wild pointer
     8b2:	ed 85       	ldd	r30, Y+13	; 0x0d
     8b4:	fe 85       	ldd	r31, Y+14	; 0x0e
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	29 f0       	breq	.+10     	; 0x8c4 <xio_reset_device+0x18>
		d->rx->wr = 1;				// can't use location 0 in circular buffer
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	82 83       	std	Z+2, r24	; 0x02
		d->rx->rd = 1;
     8be:	ed 85       	ldd	r30, Y+13	; 0x0d
     8c0:	fe 85       	ldd	r31, Y+14	; 0x0e
     8c2:	81 83       	std	Z+1, r24	; 0x01
	}
	if (d->tx != NULL) {
     8c4:	ef 85       	ldd	r30, Y+15	; 0x0f
     8c6:	f8 89       	ldd	r31, Y+16	; 0x10
     8c8:	30 97       	sbiw	r30, 0x00	; 0
     8ca:	29 f0       	breq	.+10     	; 0x8d6 <xio_reset_device+0x2a>
		d->tx->wr = 1;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	82 83       	std	Z+2, r24	; 0x02
		d->tx->rd = 1;
     8d0:	ef 85       	ldd	r30, Y+15	; 0x0f
     8d2:	f8 89       	ldd	r31, Y+16	; 0x10
     8d4:	81 83       	std	Z+1, r24	; 0x01
	}
	d->flag_in_line = 0;			// reset the working flags
     8d6:	1c a2       	std	Y+36, r1	; 0x24
	d->flag_eol = 0;
     8d8:	1d a2       	std	Y+37, r1	; 0x25
	d->flag_eof = 0;
     8da:	1e a2       	std	Y+38, r1	; 0x26

	xio_ctrl_device(d, flags);		// setup control flags
     8dc:	ce 01       	movw	r24, r28
     8de:	0e 94 40 04 	call	0x880	; 0x880 <xio_ctrl_device>

	// setup stdio stream structure
	fdev_setup_stream(&d->stream, d->x_putc, d->x_getc, _FDEV_SETUP_RW);
     8e2:	89 85       	ldd	r24, Y+9	; 0x09
     8e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     8e6:	9c 8f       	std	Y+28, r25	; 0x1c
     8e8:	8b 8f       	std	Y+27, r24	; 0x1b
     8ea:	8f 81       	ldd	r24, Y+7	; 0x07
     8ec:	98 85       	ldd	r25, Y+8	; 0x08
     8ee:	9e 8f       	std	Y+30, r25	; 0x1e
     8f0:	8d 8f       	std	Y+29, r24	; 0x1d
     8f2:	83 e0       	ldi	r24, 0x03	; 3
     8f4:	8e 8b       	std	Y+22, r24	; 0x16
	fdev_set_udata(&d->stream, d);	// reference yourself for udata 
     8f6:	d8 a3       	std	Y+32, r29	; 0x20
     8f8:	cf 8f       	std	Y+31, r28	; 0x1f
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <xio_ctrl>:
 */
FILE *xio_open(uint8_t dev, const char *addr, flags_t flags) { return (ds[dev]->x_open(dev, addr, flags));}
int xio_gets(const uint8_t dev, char *buf, const int size) { return (ds[dev]->x_gets(ds[dev], buf, size));}
int xio_getc(const uint8_t dev) { return (ds[dev]->x_getc(&(ds[dev]->stream)));}
int xio_putc(const uint8_t dev, const char c) { return (ds[dev]->x_putc(c, &(ds[dev]->stream)));}
int xio_ctrl(const uint8_t dev, const flags_t flags) { return (xio_ctrl_device(ds[dev], flags));}
     900:	e8 2f       	mov	r30, r24
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	ee 0f       	add	r30, r30
     906:	ff 1f       	adc	r31, r31
     908:	e0 5e       	subi	r30, 0xE0	; 224
     90a:	fb 4f       	sbci	r31, 0xFB	; 251
     90c:	80 81       	ld	r24, Z
     90e:	91 81       	ldd	r25, Z+1	; 0x01
     910:	0e 94 40 04 	call	0x880	; 0x880 <xio_ctrl_device>
     914:	08 95       	ret

00000916 <xio_putc_device>:
{
	return (xio_read_buffer(((xioDev_t *)stream->udata)->rx));
}

int xio_putc_device(const char c, FILE *stream)
{
     916:	28 2f       	mov	r18, r24
     918:	fb 01       	movw	r30, r22
	return (xio_write_buffer(((xioDev_t *)stream->udata)->tx, c));
     91a:	04 84       	ldd	r0, Z+12	; 0x0c
     91c:	f5 85       	ldd	r31, Z+13	; 0x0d
     91e:	e0 2d       	mov	r30, r0
     920:	a7 85       	ldd	r26, Z+15	; 0x0f
     922:	b0 89       	ldd	r27, Z+16	; 0x10
}												// leave rd on *returned* char

//int xio_write_buffer(xioBuf_t *b, char c) 
int8_t xio_write_buffer(xioBuf_t *b, char c) 
{
	buffer_t next_wr = b->wr-1;					// pre-advance wr to temporary variable
     924:	12 96       	adiw	r26, 0x02	; 2
     926:	9c 91       	ld	r25, X
     928:	12 97       	sbiw	r26, 0x02	; 2
     92a:	91 50       	subi	r25, 0x01	; 1
	if (next_wr == 0) { next_wr = b->size;}		// advance wr with wrap
     92c:	09 f4       	brne	.+2      	; 0x930 <xio_putc_device+0x1a>
     92e:	9c 91       	ld	r25, X
	if (next_wr == b->rd) { return (_FDEV_ERR);}// return if queue full
     930:	11 96       	adiw	r26, 0x01	; 1
     932:	8c 91       	ld	r24, X
     934:	11 97       	sbiw	r26, 0x01	; 1
     936:	98 17       	cp	r25, r24
     938:	11 f4       	brne	.+4      	; 0x93e <xio_putc_device+0x28>
     93a:	2f ef       	ldi	r18, 0xFF	; 255
     93c:	07 c0       	rjmp	.+14     	; 0x94c <xio_putc_device+0x36>
	b->buf[next_wr] = c;						// write char to buffer
     93e:	fd 01       	movw	r30, r26
     940:	e9 0f       	add	r30, r25
     942:	f1 1d       	adc	r31, r1
     944:	23 83       	std	Z+3, r18	; 0x03
	b->wr = next_wr;							// advance wr from temp value
     946:	12 96       	adiw	r26, 0x02	; 2
     948:	9c 93       	st	X, r25
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	33 27       	eor	r19, r19
     94e:	27 fd       	sbrc	r18, 7
     950:	30 95       	com	r19
}

int xio_putc_device(const char c, FILE *stream)
{
	return (xio_write_buffer(((xioDev_t *)stream->udata)->tx, c));
}
     952:	c9 01       	movw	r24, r18
     954:	08 95       	ret

00000956 <xio_read_buffer>:
 *	Of course, this only works if some interrupt is loading things behind
 *	the scenes.
 */
//int xio_read_buffer(xioBuf_t *b) 
int8_t xio_read_buffer(xioBuf_t *b) 
{
     956:	fc 01       	movw	r30, r24
	if (b->wr == b->rd) { return (_FDEV_ERR);}	// return if queue empty
     958:	92 81       	ldd	r25, Z+2	; 0x02
     95a:	81 81       	ldd	r24, Z+1	; 0x01
     95c:	98 17       	cp	r25, r24
     95e:	11 f4       	brne	.+4      	; 0x964 <xio_read_buffer+0xe>
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	08 95       	ret
	if ((--(b->rd)) == 0) { b->rd = b->size;}	// advance tail with wrap
     964:	81 81       	ldd	r24, Z+1	; 0x01
     966:	81 50       	subi	r24, 0x01	; 1
     968:	81 83       	std	Z+1, r24	; 0x01
     96a:	81 81       	ldd	r24, Z+1	; 0x01
     96c:	88 23       	and	r24, r24
     96e:	11 f4       	brne	.+4      	; 0x974 <xio_read_buffer+0x1e>
     970:	80 81       	ld	r24, Z
     972:	81 83       	std	Z+1, r24	; 0x01
	return (b->buf[b->rd]);						// return character from buffer
     974:	81 81       	ldd	r24, Z+1	; 0x01
     976:	e8 0f       	add	r30, r24
     978:	f1 1d       	adc	r31, r1
     97a:	83 81       	ldd	r24, Z+3	; 0x03
}												// leave rd on *returned* char
     97c:	08 95       	ret

0000097e <xio_gets_device>:
 *
 *	Note: LINEMODE flag in device struct is ignored. It's ALWAYS LINEMODE here.
 *	Note: CRs are not recognized as NL chars - master must send LF to terminate a line
 */
int xio_gets_device(xioDev_t *d, char *buf, const int size)
{
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	ec 01       	movw	r28, r24
	int c_out;

	// first time thru initializations
	if (d->flag_in_line == false) {
     984:	8c a1       	ldd	r24, Y+36	; 0x24
     986:	88 23       	and	r24, r24
     988:	39 f4       	brne	.+14     	; 0x998 <xio_gets_device+0x1a>
		d->flag_in_line = true;					// yes, we are busy getting a line
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	8c a3       	std	Y+36, r24	; 0x24
		d->buf = buf;							// bind the output buffer
     98e:	7b a7       	std	Y+43, r23	; 0x2b
     990:	6a a7       	std	Y+42, r22	; 0x2a
		d->len = 0;								// zero the buffer count
     992:	19 a6       	std	Y+41, r1	; 0x29
		d->size = size;							// set the max size of the message
     994:	58 a7       	std	Y+40, r21	; 0x28
     996:	4f a3       	std	Y+39, r20	; 0x27
	}
	while (true) {
		if (d->len >= (d->size)-1) {			// size is total count - aka 'num' in fgets()
     998:	4f a1       	ldd	r20, Y+39	; 0x27
     99a:	58 a5       	ldd	r21, Y+40	; 0x28
     99c:	89 a5       	ldd	r24, Y+41	; 0x29
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	9a 01       	movw	r18, r20
     9a2:	21 50       	subi	r18, 0x01	; 1
     9a4:	30 40       	sbci	r19, 0x00	; 0
     9a6:	82 17       	cp	r24, r18
     9a8:	93 07       	cpc	r25, r19
     9aa:	44 f0       	brlt	.+16     	; 0x9bc <xio_gets_device+0x3e>
			d->buf[d->size] = NUL;				// string termination preserves latest char
     9ac:	ea a5       	ldd	r30, Y+42	; 0x2a
     9ae:	fb a5       	ldd	r31, Y+43	; 0x2b
     9b0:	e4 0f       	add	r30, r20
     9b2:	f5 1f       	adc	r31, r21
     9b4:	10 82       	st	Z, r1
     9b6:	2d e0       	ldi	r18, 0x0D	; 13
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	23 c0       	rjmp	.+70     	; 0xa02 <xio_gets_device+0x84>
			return (XIO_BUFFER_FULL);
		}
		if ((c_out = xio_read_buffer(d->rx)) == _FDEV_ERR) { return (XIO_EAGAIN);}
     9bc:	8d 85       	ldd	r24, Y+13	; 0x0d
     9be:	9e 85       	ldd	r25, Y+14	; 0x0e
     9c0:	0e 94 ab 04 	call	0x956	; 0x956 <xio_read_buffer>
     9c4:	28 2f       	mov	r18, r24
     9c6:	33 27       	eor	r19, r19
     9c8:	27 fd       	sbrc	r18, 7
     9ca:	30 95       	com	r19
     9cc:	8f ef       	ldi	r24, 0xFF	; 255
     9ce:	2f 3f       	cpi	r18, 0xFF	; 255
     9d0:	38 07       	cpc	r19, r24
     9d2:	a9 f0       	breq	.+42     	; 0x9fe <xio_gets_device+0x80>
     9d4:	99 a5       	ldd	r25, Y+41	; 0x29
     9d6:	ea a5       	ldd	r30, Y+42	; 0x2a
     9d8:	fb a5       	ldd	r31, Y+43	; 0x2b
		if (c_out == LF) {
     9da:	2a 30       	cpi	r18, 0x0A	; 10
     9dc:	31 05       	cpc	r19, r1
     9de:	49 f4       	brne	.+18     	; 0x9f2 <xio_gets_device+0x74>
//			d->buf[(d->len)++] = LF;			// ++++++++++++++++ for diagnostics only
			d->buf[(d->len)++] = NUL;
     9e0:	e9 0f       	add	r30, r25
     9e2:	f1 1d       	adc	r31, r1
     9e4:	10 82       	st	Z, r1
     9e6:	9f 5f       	subi	r25, 0xFF	; 255
     9e8:	99 a7       	std	Y+41, r25	; 0x29
			d->flag_in_line = false;			// clear in-line state (reset)
     9ea:	1c a2       	std	Y+36, r1	; 0x24
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	08 c0       	rjmp	.+16     	; 0xa02 <xio_gets_device+0x84>
			return (XIO_OK);					// return for end-of-line
		}
		d->buf[d->len++] = c_out;				// write character to buffer
     9f2:	e9 0f       	add	r30, r25
     9f4:	f1 1d       	adc	r31, r1
     9f6:	20 83       	st	Z, r18
     9f8:	9f 5f       	subi	r25, 0xFF	; 255
     9fa:	99 a7       	std	Y+41, r25	; 0x29
     9fc:	cd cf       	rjmp	.-102    	; 0x998 <xio_gets_device+0x1a>
	}
     9fe:	22 e0       	ldi	r18, 0x02	; 2
     a00:	30 e0       	ldi	r19, 0x00	; 0
}
     a02:	c9 01       	movw	r24, r18
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <xio_getc_device>:
 *	xio_getc_device() - get a character from the device 
 *	xio_putc_device() - write a character to the device 
 */
int xio_getc_device(FILE *stream)
{
	return (xio_read_buffer(((xioDev_t *)stream->udata)->rx));
     a0a:	dc 01       	movw	r26, r24
     a0c:	1c 96       	adiw	r26, 0x0c	; 12
     a0e:	ed 91       	ld	r30, X+
     a10:	fc 91       	ld	r31, X
     a12:	1d 97       	sbiw	r26, 0x0d	; 13
     a14:	85 85       	ldd	r24, Z+13	; 0x0d
     a16:	96 85       	ldd	r25, Z+14	; 0x0e
     a18:	0e 94 ab 04 	call	0x956	; 0x956 <xio_read_buffer>
     a1c:	28 2f       	mov	r18, r24
     a1e:	33 27       	eor	r19, r19
     a20:	27 fd       	sbrc	r18, 7
     a22:	30 95       	com	r19
}
     a24:	c9 01       	movw	r24, r18
     a26:	08 95       	ret

00000a28 <xio_write_buffer>:
	return (b->buf[b->rd]);						// return character from buffer
}												// leave rd on *returned* char

//int xio_write_buffer(xioBuf_t *b, char c) 
int8_t xio_write_buffer(xioBuf_t *b, char c) 
{
     a28:	dc 01       	movw	r26, r24
	buffer_t next_wr = b->wr-1;					// pre-advance wr to temporary variable
     a2a:	12 96       	adiw	r26, 0x02	; 2
     a2c:	9c 91       	ld	r25, X
     a2e:	12 97       	sbiw	r26, 0x02	; 2
     a30:	91 50       	subi	r25, 0x01	; 1
	if (next_wr == 0) { next_wr = b->size;}		// advance wr with wrap
     a32:	09 f4       	brne	.+2      	; 0xa36 <xio_write_buffer+0xe>
     a34:	9c 91       	ld	r25, X
	if (next_wr == b->rd) { return (_FDEV_ERR);}// return if queue full
     a36:	11 96       	adiw	r26, 0x01	; 1
     a38:	8c 91       	ld	r24, X
     a3a:	11 97       	sbiw	r26, 0x01	; 1
     a3c:	98 17       	cp	r25, r24
     a3e:	11 f4       	brne	.+4      	; 0xa44 <xio_write_buffer+0x1c>
     a40:	8f ef       	ldi	r24, 0xFF	; 255
     a42:	08 95       	ret
	b->buf[next_wr] = c;						// write char to buffer
     a44:	fd 01       	movw	r30, r26
     a46:	e9 0f       	add	r30, r25
     a48:	f1 1d       	adc	r31, r1
     a4a:	63 83       	std	Z+3, r22	; 0x03
	b->wr = next_wr;							// advance wr from temp value
     a4c:	12 96       	adiw	r26, 0x02	; 2
     a4e:	9c 93       	st	X, r25
     a50:	80 e0       	ldi	r24, 0x00	; 0
	return (XIO_OK);							// leave wr on *written* char
}
     a52:	08 95       	ret

00000a54 <xio_queue_RX_string>:
/*
 *	xio_queue_RX_string() - put a string in an RX buffer
 *	String must be NUL terminated but doesn't require a CR or LF
 */
void xio_queue_RX_string(const uint8_t dev, const char *buf)
{
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t i=0;
	while (buf[i] != NUL) {
		xio_write_buffer(ds[dev]->rx, buf[i++]);
     a5a:	c8 2f       	mov	r28, r24
     a5c:	d0 e0       	ldi	r29, 0x00	; 0
     a5e:	cc 0f       	add	r28, r28
     a60:	dd 1f       	adc	r29, r29
     a62:	c0 5e       	subi	r28, 0xE0	; 224
     a64:	db 4f       	sbci	r29, 0xFB	; 251
     a66:	16 c0       	rjmp	.+44     	; 0xa94 <xio_queue_RX_string+0x40>
     a68:	e8 81       	ld	r30, Y
     a6a:	f9 81       	ldd	r31, Y+1	; 0x01
     a6c:	a5 85       	ldd	r26, Z+13	; 0x0d
     a6e:	b6 85       	ldd	r27, Z+14	; 0x0e
}												// leave rd on *returned* char

//int xio_write_buffer(xioBuf_t *b, char c) 
int8_t xio_write_buffer(xioBuf_t *b, char c) 
{
	buffer_t next_wr = b->wr-1;					// pre-advance wr to temporary variable
     a70:	12 96       	adiw	r26, 0x02	; 2
     a72:	9c 91       	ld	r25, X
     a74:	12 97       	sbiw	r26, 0x02	; 2
     a76:	91 50       	subi	r25, 0x01	; 1
	if (next_wr == 0) { next_wr = b->size;}		// advance wr with wrap
     a78:	09 f4       	brne	.+2      	; 0xa7c <xio_queue_RX_string+0x28>
     a7a:	9c 91       	ld	r25, X
	if (next_wr == b->rd) { return (_FDEV_ERR);}// return if queue full
     a7c:	11 96       	adiw	r26, 0x01	; 1
     a7e:	8c 91       	ld	r24, X
     a80:	11 97       	sbiw	r26, 0x01	; 1
     a82:	98 17       	cp	r25, r24
     a84:	31 f0       	breq	.+12     	; 0xa92 <xio_queue_RX_string+0x3e>
	b->buf[next_wr] = c;						// write char to buffer
     a86:	fd 01       	movw	r30, r26
     a88:	e9 0f       	add	r30, r25
     a8a:	f1 1d       	adc	r31, r1
     a8c:	33 83       	std	Z+3, r19	; 0x03
	b->wr = next_wr;							// advance wr from temp value
     a8e:	12 96       	adiw	r26, 0x02	; 2
     a90:	9c 93       	st	X, r25
 */
void xio_queue_RX_string(const uint8_t dev, const char *buf)
{
	uint8_t i=0;
	while (buf[i] != NUL) {
		xio_write_buffer(ds[dev]->rx, buf[i++]);
     a92:	2f 5f       	subi	r18, 0xFF	; 255
 *	String must be NUL terminated but doesn't require a CR or LF
 */
void xio_queue_RX_string(const uint8_t dev, const char *buf)
{
	uint8_t i=0;
	while (buf[i] != NUL) {
     a94:	fb 01       	movw	r30, r22
     a96:	e2 0f       	add	r30, r18
     a98:	f1 1d       	adc	r31, r1
     a9a:	30 81       	ld	r19, Z
     a9c:	33 23       	and	r19, r19
     a9e:	21 f7       	brne	.-56     	; 0xa68 <xio_queue_RX_string+0x14>
		xio_write_buffer(ds[dev]->rx, buf[i++]);
	}
}
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <xio_unit_tests>:
uint8_t status;
char buffer[64];
char sequence[8] = {"01234567"};

void xio_unit_tests()
{
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
 * It might be prudent to run an assertion like below, but we trust the callers:
 * 	if (dev < XIO_DEV_COUNT) blah blah blah
 *	else  return (_FDEV_ERR);	// XIO_NO_SUCH_DEVICE
 */
FILE *xio_open(uint8_t dev, const char *addr, flags_t flags) { return (ds[dev]->x_open(dev, addr, flags));}
int xio_gets(const uint8_t dev, char *buf, const int size) { return (ds[dev]->x_gets(ds[dev], buf, size));}
     aae:	0d e1       	ldi	r16, 0x1D	; 29
     ab0:	16 e0       	ldi	r17, 0x06	; 6

static void _message_test(uint8_t dev)		// never returns
{
	while (true) {
		if ((status = xio_gets(dev, buffer, sizeof(buffer))) == XIO_OK) {
			printf("%s",buffer);
     ab2:	cb e0       	ldi	r28, 0x0B	; 11
     ab4:	d1 e0       	ldi	r29, 0x01	; 1
 * It might be prudent to run an assertion like below, but we trust the callers:
 * 	if (dev < XIO_DEV_COUNT) blah blah blah
 *	else  return (_FDEV_ERR);	// XIO_NO_SUCH_DEVICE
 */
FILE *xio_open(uint8_t dev, const char *addr, flags_t flags) { return (ds[dev]->x_open(dev, addr, flags));}
int xio_gets(const uint8_t dev, char *buf, const int size) { return (ds[dev]->x_gets(ds[dev], buf, size));}
     ab6:	e0 91 22 04 	lds	r30, 0x0422
     aba:	f0 91 23 04 	lds	r31, 0x0423
     abe:	25 81       	ldd	r18, Z+5	; 0x05
     ac0:	36 81       	ldd	r19, Z+6	; 0x06
     ac2:	cf 01       	movw	r24, r30
     ac4:	6d e1       	ldi	r22, 0x1D	; 29
     ac6:	76 e0       	ldi	r23, 0x06	; 6
     ac8:	40 e4       	ldi	r20, 0x40	; 64
     aca:	50 e0       	ldi	r21, 0x00	; 0
     acc:	f9 01       	movw	r30, r18
     ace:	09 95       	icall
}

static void _message_test(uint8_t dev)		// never returns
{
	while (true) {
		if ((status = xio_gets(dev, buffer, sizeof(buffer))) == XIO_OK) {
     ad0:	80 93 5f 06 	sts	0x065F, r24
     ad4:	88 23       	and	r24, r24
     ad6:	79 f7       	brne	.-34     	; 0xab6 <xio_unit_tests+0x10>
			printf("%s",buffer);
     ad8:	00 d0       	rcall	.+0      	; 0xada <xio_unit_tests+0x34>
     ada:	00 d0       	rcall	.+0      	; 0xadc <xio_unit_tests+0x36>
     adc:	ed b7       	in	r30, 0x3d	; 61
     ade:	fe b7       	in	r31, 0x3e	; 62
     ae0:	d2 83       	std	Z+2, r29	; 0x02
     ae2:	c1 83       	std	Z+1, r28	; 0x01
     ae4:	14 83       	std	Z+4, r17	; 0x04
     ae6:	03 83       	std	Z+3, r16	; 0x03
     ae8:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <printf>
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	e0 cf       	rjmp	.-64     	; 0xab6 <xio_unit_tests+0x10>

00000af6 <xio_init>:
 * xio_null() 			- xio null function
 */
void xio_init()
{
	// run device constructors and register devices in dev array
	ds[XIO_DEV_USART] = xio_init_usart(XIO_DEV_USART);
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	0e 94 cb 05 	call	0xb96	; 0xb96 <xio_init_usart>
     afc:	90 93 21 04 	sts	0x0421, r25
     b00:	80 93 20 04 	sts	0x0420, r24
	ds[XIO_DEV_SPI]   = xio_init_spi(XIO_DEV_SPI);
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	0e 94 3c 08 	call	0x1078	; 0x1078 <xio_init_spi>
     b0a:	90 93 23 04 	sts	0x0423, r25
     b0e:	80 93 22 04 	sts	0x0422, r24
 *
 * It might be prudent to run an assertion like below, but we trust the callers:
 * 	if (dev < XIO_DEV_COUNT) blah blah blah
 *	else  return (_FDEV_ERR);	// XIO_NO_SUCH_DEVICE
 */
FILE *xio_open(uint8_t dev, const char *addr, flags_t flags) { return (ds[dev]->x_open(dev, addr, flags));}
     b12:	e0 91 20 04 	lds	r30, 0x0420
     b16:	f0 91 21 04 	lds	r31, 0x0421
     b1a:	01 80       	ldd	r0, Z+1	; 0x01
     b1c:	f2 81       	ldd	r31, Z+2	; 0x02
     b1e:	e0 2d       	mov	r30, r0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	45 e1       	ldi	r20, 0x15	; 21
     b28:	50 e1       	ldi	r21, 0x10	; 16
     b2a:	09 95       	icall
int xio_gets(const uint8_t dev, char *buf, const int size) { return (ds[dev]->x_gets(ds[dev], buf, size));}
int xio_getc(const uint8_t dev) { return (ds[dev]->x_getc(&(ds[dev]->stream)));}
int xio_putc(const uint8_t dev, const char c) { return (ds[dev]->x_putc(c, &(ds[dev]->stream)));}
int xio_ctrl(const uint8_t dev, const flags_t flags) { return (xio_ctrl_device(ds[dev], flags));}
int xio_set_baud(const uint8_t dev, const uint8_t baud) { xio_set_baud_usart(ds[dev], baud); return (XIO_OK);}
void xio_set_stdin(const uint8_t dev)  { stdin  = &(ds[dev]->stream);}
     b2c:	e0 91 22 04 	lds	r30, 0x0422
     b30:	f0 91 23 04 	lds	r31, 0x0423
     b34:	01 80       	ldd	r0, Z+1	; 0x01
     b36:	f2 81       	ldd	r31, Z+2	; 0x02
     b38:	e0 2d       	mov	r30, r0
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e1       	ldi	r21, 0x10	; 16
     b44:	09 95       	icall
     b46:	80 91 20 04 	lds	r24, 0x0420
     b4a:	90 91 21 04 	lds	r25, 0x0421
     b4e:	43 96       	adiw	r24, 0x13	; 19
     b50:	90 93 7b 06 	sts	0x067B, r25
     b54:	80 93 7a 06 	sts	0x067A, r24
void xio_set_stdout(const uint8_t dev) { stdout = &(ds[dev]->stream);}
     b58:	90 93 7d 06 	sts	0x067D, r25
     b5c:	80 93 7c 06 	sts	0x067C, r24
void xio_set_stderr(const uint8_t dev) { stderr = &(ds[dev]->stream);}
     b60:	80 91 22 04 	lds	r24, 0x0422
     b64:	90 91 23 04 	lds	r25, 0x0423
     b68:	43 96       	adiw	r24, 0x13	; 19
     b6a:	90 93 7f 06 	sts	0x067F, r25
     b6e:	80 93 7e 06 	sts	0x067E, r24

	// setup std devices for printf/fprintf to work
	xio_set_stdin(XIO_DEV_USART);
	xio_set_stdout(XIO_DEV_USART);
	xio_set_stderr(XIO_DEV_SPI);
}
     b72:	08 95       	ret

00000b74 <xio_set_baud>:
FILE *xio_open(uint8_t dev, const char *addr, flags_t flags) { return (ds[dev]->x_open(dev, addr, flags));}
int xio_gets(const uint8_t dev, char *buf, const int size) { return (ds[dev]->x_gets(ds[dev], buf, size));}
int xio_getc(const uint8_t dev) { return (ds[dev]->x_getc(&(ds[dev]->stream)));}
int xio_putc(const uint8_t dev, const char c) { return (ds[dev]->x_putc(c, &(ds[dev]->stream)));}
int xio_ctrl(const uint8_t dev, const flags_t flags) { return (xio_ctrl_device(ds[dev], flags));}
int xio_set_baud(const uint8_t dev, const uint8_t baud) { xio_set_baud_usart(ds[dev], baud); return (XIO_OK);}
     b74:	46 2f       	mov	r20, r22
     b76:	e8 2f       	mov	r30, r24
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	e0 5e       	subi	r30, 0xE0	; 224
     b80:	fb 4f       	sbci	r31, 0xFB	; 251
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	91 81       	ldd	r25, Z+1	; 0x01
     b8c:	0e 94 d0 05 	call	0xba0	; 0xba0 <xio_set_baud_usart>
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	08 95       	ret

00000b96 <xio_init_usart>:
 *	xio_init_usart() - general purpose USART initialization (shared)
 *					   requires open() to be performed to complete the device init
 */
xioDev_t *xio_init_usart(uint8_t dev)
{
	usart0.dev = dev;	// overwite the structure initialization value in case it was wrong
     b96:	80 93 5c 01 	sts	0x015C, r24
	return (&usart0);
}
     b9a:	8c e5       	ldi	r24, 0x5C	; 92
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	08 95       	ret

00000ba0 <xio_set_baud_usart>:
/* 
 * xio_set_baud_usart() - baud rate setting routine
 * Broken out so it can be exposed to the config system
 */
void xio_set_baud_usart(xioDev_t *d, const uint32_t baud)
{
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
	UBRR0 = (F_CPU / (8 * baud)) - 1;
     ba4:	83 e0       	ldi	r24, 0x03	; 3
     ba6:	22 0f       	add	r18, r18
     ba8:	33 1f       	adc	r19, r19
     baa:	44 1f       	adc	r20, r20
     bac:	55 1f       	adc	r21, r21
     bae:	8a 95       	dec	r24
     bb0:	d1 f7       	brne	.-12     	; 0xba6 <xio_set_baud_usart+0x6>
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	74 e2       	ldi	r23, 0x24	; 36
     bb6:	84 ef       	ldi	r24, 0xF4	; 244
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <__udivmodsi4>
     bbe:	21 50       	subi	r18, 0x01	; 1
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	30 93 c5 00 	sts	0x00C5, r19
     bc6:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0A &= ~(1<<U2X0);		// baud doubler off
     bca:	e0 ec       	ldi	r30, 0xC0	; 192
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	8d 7f       	andi	r24, 0xFD	; 253
     bd2:	80 83       	st	Z, r24
}
     bd4:	08 95       	ret

00000bd6 <xio_getc_usart>:
{ 
	xio_write_buffer(USART0rx, UDR0);
}

int xio_getc_usart(FILE *stream)
{
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
	// non-blocking version - returns _FDEV_ERR if no char available
	xioDev_t *d = (xioDev_t *)stream->udata;		// get device struct pointer
     bde:	fc 01       	movw	r30, r24
     be0:	c4 85       	ldd	r28, Z+12	; 0x0c
     be2:	d5 85       	ldd	r29, Z+13	; 0x0d
	int c = xio_read_buffer(d->rx);
     be4:	8d 85       	ldd	r24, Y+13	; 0x0d
     be6:	9e 85       	ldd	r25, Y+14	; 0x0e
     be8:	0e 94 ab 04 	call	0x956	; 0x956 <xio_read_buffer>
     bec:	08 2f       	mov	r16, r24
     bee:	11 27       	eor	r17, r17
     bf0:	07 fd       	sbrc	r16, 7
     bf2:	10 95       	com	r17
	d->x_flow(d);									// run the flow control function callback
     bf4:	eb 85       	ldd	r30, Y+11	; 0x0b
     bf6:	fc 85       	ldd	r31, Y+12	; 0x0c
     bf8:	ce 01       	movw	r24, r28
     bfa:	09 95       	icall
	if (d->flag_echo) { d->x_putc(c, stdout);}		// conditional echo 
     bfc:	8a a1       	ldd	r24, Y+34	; 0x22
     bfe:	88 23       	and	r24, r24
     c00:	41 f0       	breq	.+16     	; 0xc12 <xio_getc_usart+0x3c>
     c02:	60 91 7c 06 	lds	r22, 0x067C
     c06:	70 91 7d 06 	lds	r23, 0x067D
     c0a:	e9 85       	ldd	r30, Y+9	; 0x09
     c0c:	fa 85       	ldd	r31, Y+10	; 0x0a
     c0e:	80 2f       	mov	r24, r16
     c10:	09 95       	icall
	if ((c == CR) || (c == LF)) { if (d->flag_linemode) { return('\n');}}
     c12:	0d 30       	cpi	r16, 0x0D	; 13
     c14:	11 05       	cpc	r17, r1
     c16:	19 f0       	breq	.+6      	; 0xc1e <xio_getc_usart+0x48>
     c18:	0a 30       	cpi	r16, 0x0A	; 10
     c1a:	11 05       	cpc	r17, r1
     c1c:	29 f4       	brne	.+10     	; 0xc28 <xio_getc_usart+0x52>
     c1e:	8b a1       	ldd	r24, Y+35	; 0x23
     c20:	88 23       	and	r24, r24
     c22:	11 f0       	breq	.+4      	; 0xc28 <xio_getc_usart+0x52>
     c24:	0a e0       	ldi	r16, 0x0A	; 10
     c26:	10 e0       	ldi	r17, 0x00	; 0
	d->x_flow(d);									// run the flow control function callback
	if (d->flag_echo) { d->x_putc(c, stdout);}		// conditional echo 
	if ((c == CR) || (c == LF)) { if (d->flag_linemode) { return('\n');}}
	return (c);
*/
}
     c28:	c8 01       	movw	r24, r16
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	08 95       	ret

00000c34 <__vector_19>:
	UCSR0B |= (1<<UDRIE0); 		// enable TX interrupts - they will keep firing
	return (status);
}

ISR(USART_UDRE_vect)
{
     c34:	1f 92       	push	r1
     c36:	0f 92       	push	r0
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	0f 92       	push	r0
     c3c:	11 24       	eor	r1, r1
     c3e:	2f 93       	push	r18
     c40:	3f 93       	push	r19
     c42:	4f 93       	push	r20
     c44:	5f 93       	push	r21
     c46:	6f 93       	push	r22
     c48:	7f 93       	push	r23
     c4a:	8f 93       	push	r24
     c4c:	9f 93       	push	r25
     c4e:	af 93       	push	r26
     c50:	bf 93       	push	r27
     c52:	ef 93       	push	r30
     c54:	ff 93       	push	r31
	int c = xio_read_buffer(USART0tx);
     c56:	80 91 6b 01 	lds	r24, 0x016B
     c5a:	90 91 6c 01 	lds	r25, 0x016C
     c5e:	0e 94 ab 04 	call	0x956	; 0x956 <xio_read_buffer>
     c62:	99 27       	eor	r25, r25
     c64:	87 fd       	sbrc	r24, 7
     c66:	90 95       	com	r25
	if (c == _FDEV_ERR) {
     c68:	2f ef       	ldi	r18, 0xFF	; 255
     c6a:	8f 3f       	cpi	r24, 0xFF	; 255
     c6c:	92 07       	cpc	r25, r18
     c6e:	31 f4       	brne	.+12     	; 0xc7c <__vector_19+0x48>
		UCSR0B &= ~(1<<UDRIE0); // disable interrupts
     c70:	80 91 c1 00 	lds	r24, 0x00C1
     c74:	8f 7d       	andi	r24, 0xDF	; 223
     c76:	80 93 c1 00 	sts	0x00C1, r24
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <__vector_19+0x4c>
	} else {
		UDR0 = (char)c;			// write char to USART xmit register
     c7c:	80 93 c6 00 	sts	0x00C6, r24
	}
}
     c80:	ff 91       	pop	r31
     c82:	ef 91       	pop	r30
     c84:	bf 91       	pop	r27
     c86:	af 91       	pop	r26
     c88:	9f 91       	pop	r25
     c8a:	8f 91       	pop	r24
     c8c:	7f 91       	pop	r23
     c8e:	6f 91       	pop	r22
     c90:	5f 91       	pop	r21
     c92:	4f 91       	pop	r20
     c94:	3f 91       	pop	r19
     c96:	2f 91       	pop	r18
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	0f 90       	pop	r0
     c9e:	1f 90       	pop	r1
     ca0:	18 95       	reti

00000ca2 <__vector_18>:
 *		- if ECHO is enabled echo character to stdout
 *		- echo all line termination chars as newlines ('\n')
 *		- Note: putc is responsible for expanding newlines to <cr><lf> if needed
 */
ISR(USART_RX_vect) 
{ 
     ca2:	1f 92       	push	r1
     ca4:	0f 92       	push	r0
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	0f 92       	push	r0
     caa:	11 24       	eor	r1, r1
     cac:	2f 93       	push	r18
     cae:	3f 93       	push	r19
     cb0:	4f 93       	push	r20
     cb2:	5f 93       	push	r21
     cb4:	6f 93       	push	r22
     cb6:	7f 93       	push	r23
     cb8:	8f 93       	push	r24
     cba:	9f 93       	push	r25
     cbc:	af 93       	push	r26
     cbe:	bf 93       	push	r27
     cc0:	ef 93       	push	r30
     cc2:	ff 93       	push	r31
	xio_write_buffer(USART0rx, UDR0);
     cc4:	60 91 c6 00 	lds	r22, 0x00C6
     cc8:	80 91 69 01 	lds	r24, 0x0169
     ccc:	90 91 6a 01 	lds	r25, 0x016A
     cd0:	0e 94 14 05 	call	0xa28	; 0xa28 <xio_write_buffer>
}
     cd4:	ff 91       	pop	r31
     cd6:	ef 91       	pop	r30
     cd8:	bf 91       	pop	r27
     cda:	af 91       	pop	r26
     cdc:	9f 91       	pop	r25
     cde:	8f 91       	pop	r24
     ce0:	7f 91       	pop	r23
     ce2:	6f 91       	pop	r22
     ce4:	5f 91       	pop	r21
     ce6:	4f 91       	pop	r20
     ce8:	3f 91       	pop	r19
     cea:	2f 91       	pop	r18
     cec:	0f 90       	pop	r0
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	0f 90       	pop	r0
     cf2:	1f 90       	pop	r1
     cf4:	18 95       	reti

00000cf6 <xio_putc_usart>:
/* 
 * xio_putc_usart() - stdio compatible char writer for usart devices
 * USART TX ISR() - hard-wired for atmega328p 
 */
int xio_putc_usart(const char c, FILE *stream)
{
     cf6:	28 2f       	mov	r18, r24
     cf8:	fb 01       	movw	r30, r22
	int status = xio_write_buffer(((xioDev_t *)stream->udata)->tx, c);
     cfa:	04 84       	ldd	r0, Z+12	; 0x0c
     cfc:	f5 85       	ldd	r31, Z+13	; 0x0d
     cfe:	e0 2d       	mov	r30, r0
     d00:	87 85       	ldd	r24, Z+15	; 0x0f
     d02:	90 89       	ldd	r25, Z+16	; 0x10
     d04:	62 2f       	mov	r22, r18
     d06:	0e 94 14 05 	call	0xa28	; 0xa28 <xio_write_buffer>
	UCSR0B |= (1<<UDRIE0); 		// enable TX interrupts - they will keep firing
     d0a:	e1 ec       	ldi	r30, 0xC1	; 193
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	90 81       	ld	r25, Z
     d10:	90 62       	ori	r25, 0x20	; 32
     d12:	90 83       	st	Z, r25
     d14:	28 2f       	mov	r18, r24
     d16:	33 27       	eor	r19, r19
     d18:	27 fd       	sbrc	r18, 7
     d1a:	30 95       	com	r19
	return (status);
}
     d1c:	c9 01       	movw	r24, r18
     d1e:	08 95       	ret

00000d20 <xio_open_usart>:
/*
 *	xio_open_usart() - general purpose USART open
 *	open() assumes that init() has been run previously
 */
FILE *xio_open_usart(const uint8_t dev, const char *addr, const flags_t flags)
{
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
	xioDev_t *d = ds[dev];			// convenience device struct pointer
     d24:	e8 2f       	mov	r30, r24
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	ee 0f       	add	r30, r30
     d2a:	ff 1f       	adc	r31, r31
     d2c:	e0 5e       	subi	r30, 0xE0	; 224
     d2e:	fb 4f       	sbci	r31, 0xFB	; 251
     d30:	00 81       	ld	r16, Z
     d32:	11 81       	ldd	r17, Z+1	; 0x01
	xio_reset_device(d, flags);
     d34:	c8 01       	movw	r24, r16
     d36:	ba 01       	movw	r22, r20
     d38:	0e 94 56 04 	call	0x8ac	; 0x8ac <xio_reset_device>

	// setup the hardware
	PRR &= ~PRUSART0_bm;			// Enable the USART in the power reduction register (system.h)
     d3c:	e4 e6       	ldi	r30, 0x64	; 100
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	8d 7f       	andi	r24, 0xFD	; 253
     d44:	80 83       	st	Z, r24
	UCSR0A = USART_BAUD_DOUBLER;
     d46:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = USART_ENABLE_FLAGS;
     d4a:	88 e9       	ldi	r24, 0x98	; 152
     d4c:	80 93 c1 00 	sts	0x00C1, r24
	xio_set_baud_usart(d, USART_BAUD_RATE);
     d50:	c8 01       	movw	r24, r16
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	52 ec       	ldi	r21, 0xC2	; 194
     d56:	61 e0       	ldi	r22, 0x01	; 1
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	0e 94 d0 05 	call	0xba0	; 0xba0 <xio_set_baud_usart>
     d5e:	0d 5e       	subi	r16, 0xED	; 237
     d60:	1f 4f       	sbci	r17, 0xFF	; 255

	return (&d->stream);			// return stdio FILE reference
}
     d62:	c8 01       	movw	r24, r16
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	08 95       	ret

00000d6a <sys_init>:

/**** sys_init() - lowest level hardware init ****/

void sys_init() 
{
	PRR = 0xFF;					// turn off all peripherals. Each device needs to enble itself
     d6a:	8f ef       	ldi	r24, 0xFF	; 255
     d6c:	80 93 64 00 	sts	0x0064, r24

	DDRB = 0x00;				// initialize all ports as inputs. Each device sets its own outputs
     d70:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x00;
     d72:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x00;
     d74:	1a b8       	out	0x0a, r1	; 10
}
     d76:	08 95       	ret

00000d78 <adc_init>:
 *	I need to fund out why this is happening and stop it.
 *	In the mean time there is a do-while loop in the read function.
 */
void adc_init(uint8_t channel)
{
	PRR &= ~PRADC_bm;					// Enable the ADC in the power reduction register (system.h)
     d78:	e4 e6       	ldi	r30, 0x64	; 100
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	90 81       	ld	r25, Z
     d7e:	9e 7f       	andi	r25, 0xFE	; 254
     d80:	90 83       	st	Z, r25
	ADMUX  = (ADC_REFS | channel);		// setup ADC Vref and channel
     d82:	98 2f       	mov	r25, r24
     d84:	90 64       	ori	r25, 0x40	; 64
     d86:	ec e7       	ldi	r30, 0x7C	; 124
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	90 83       	st	Z, r25
	ADCSRA = (ADC_ENABLE | ADC_PRESCALE);// Enable ADC (bit 7) & set prescaler
     d8c:	96 e8       	ldi	r25, 0x86	; 134
     d8e:	90 93 7a 00 	sts	0x007A, r25

	ADMUX &= 0xF0;						// clobber the channel
     d92:	90 81       	ld	r25, Z
     d94:	90 7f       	andi	r25, 0xF0	; 240
     d96:	90 83       	st	Z, r25
	ADMUX |= 0x0F & ADC_CHANNEL;		// set the channel
     d98:	90 81       	ld	r25, Z
     d9a:	90 83       	st	Z, r25
	DIDR0 = (1<<channel);				// disable digital input
     d9c:	21 e0       	ldi	r18, 0x01	; 1
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <adc_init+0x2e>
     da2:	22 0f       	add	r18, r18
     da4:	33 1f       	adc	r19, r19
     da6:	8a 95       	dec	r24
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <adc_init+0x2a>
     daa:	20 93 7e 00 	sts	0x007E, r18
}
     dae:	08 95       	ret

00000db0 <adc_read>:

uint16_t adc_read()
{
	do {
		ADCSRA |= ADC_START_CONVERSION; // start the conversion
     db0:	80 91 7a 00 	lds	r24, 0x007A
     db4:	80 64       	ori	r24, 0x40	; 64
     db6:	80 93 7a 00 	sts	0x007A, r24
		while (ADCSRA && (1<<ADIF) == 0);// wait about 100 uSec
     dba:	80 91 7a 00 	lds	r24, 0x007A
		ADCSRA |= (1<<ADIF);			// clear the conversion flag
     dbe:	80 91 7a 00 	lds	r24, 0x007A
     dc2:	80 61       	ori	r24, 0x10	; 16
     dc4:	80 93 7a 00 	sts	0x007A, r24
	} while (ADC == 0);
     dc8:	80 91 78 00 	lds	r24, 0x0078
     dcc:	90 91 79 00 	lds	r25, 0x0079
     dd0:	89 2b       	or	r24, r25
     dd2:	71 f3       	breq	.-36     	; 0xdb0 <adc_read>
	return (ADC);
     dd4:	20 91 78 00 	lds	r18, 0x0078
     dd8:	30 91 79 00 	lds	r19, 0x0079
}
     ddc:	c9 01       	movw	r24, r18
     dde:	08 95       	ret

00000de0 <pwm_init>:
 *	Mode: 8 bit Fast PWM Fast w/OCR2A setting PWM freq (TOP value)
 *		  and OCR2B setting the duty cycle as a fraction of OCR2A seeting
 */
void pwm_init(void)
{
	DDRD |= PWM_OUTB;					// set PWM bit to output
     de0:	53 9a       	sbi	0x0a, 3	; 10
	PRR &= ~PRTIM2_bm;					// Enable Timer2 in the power reduction register (system.h)
     de2:	e4 e6       	ldi	r30, 0x64	; 100
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	8f 7b       	andi	r24, 0xBF	; 191
     dea:	80 83       	st	Z, r24
	TCCR2A  = PWM_INVERTED;				// alternative is PWM_NONINVERTED
     dec:	e0 eb       	ldi	r30, 0xB0	; 176
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 ef       	ldi	r24, 0xF0	; 240
     df2:	80 83       	st	Z, r24
	TCCR2A |= 0b00000011;				// Waveform generation set to MODE 7 - here...
     df4:	80 81       	ld	r24, Z
     df6:	83 60       	ori	r24, 0x03	; 3
     df8:	80 83       	st	Z, r24
	TCCR2B  = 0b00001000;				// ...continued here
     dfa:	e1 eb       	ldi	r30, 0xB1	; 177
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	88 e0       	ldi	r24, 0x08	; 8
     e00:	80 83       	st	Z, r24
	TCCR2B |= PWM_PRESCALE_SET;			// set clock and prescaler
     e02:	80 81       	ld	r24, Z
     e04:	84 60       	ori	r24, 0x04	; 4
     e06:	80 83       	st	Z, r24
	TIMSK1 = 0; 						// disable PWM interrupts
     e08:	10 92 6f 00 	sts	0x006F, r1
	OCR2A = 0;							// clear PWM frequency (TOP value)
     e0c:	10 92 b3 00 	sts	0x00B3, r1
	OCR2B = 0;							// clear PWM duty cycle as % of TOP value
     e10:	10 92 b4 00 	sts	0x00B4, r1
	device.pwm_freq = 0;
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	a0 e0       	ldi	r26, 0x00	; 0
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	80 93 7b 04 	sts	0x047B, r24
     e20:	90 93 7c 04 	sts	0x047C, r25
     e24:	a0 93 7d 04 	sts	0x047D, r26
     e28:	b0 93 7e 04 	sts	0x047E, r27
}
     e2c:	08 95       	ret

00000e2e <pwm_set_freq>:
 * pwm_set_freq() - set PWM channel frequency
 *
 *	At current settings the range is from about 500 Hz to about 6000 Hz  
 */
uint8_t pwm_set_freq(double freq)
{
     e2e:	ef 92       	push	r14
     e30:	ff 92       	push	r15
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	9b 01       	movw	r18, r22
     e38:	ac 01       	movw	r20, r24
	device.pwm_freq = F_CPU / PWM_PRESCALE / freq;
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	74 e2       	ldi	r23, 0x24	; 36
     e3e:	84 e7       	ldi	r24, 0x74	; 116
     e40:	98 e4       	ldi	r25, 0x48	; 72
     e42:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__divsf3>
     e46:	7b 01       	movw	r14, r22
     e48:	8c 01       	movw	r16, r24
     e4a:	60 93 7b 04 	sts	0x047B, r22
     e4e:	70 93 7c 04 	sts	0x047C, r23
     e52:	80 93 7d 04 	sts	0x047D, r24
     e56:	90 93 7e 04 	sts	0x047E, r25
	if (device.pwm_freq < PWM_MIN_RES) { 
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 ea       	ldi	r20, 0xA0	; 160
     e60:	51 e4       	ldi	r21, 0x41	; 65
     e62:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__cmpsf2>
     e66:	88 23       	and	r24, r24
     e68:	14 f4       	brge	.+4      	; 0xe6e <pwm_set_freq+0x40>
		OCR2A = PWM_MIN_RES;
     e6a:	84 e1       	ldi	r24, 0x14	; 20
     e6c:	0b c0       	rjmp	.+22     	; 0xe84 <pwm_set_freq+0x56>
	} else if (device.pwm_freq >= PWM_MAX_RES) { 
     e6e:	c8 01       	movw	r24, r16
     e70:	b7 01       	movw	r22, r14
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	4f e7       	ldi	r20, 0x7F	; 127
     e78:	53 e4       	ldi	r21, 0x43	; 67
     e7a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__gesf2>
     e7e:	88 23       	and	r24, r24
     e80:	24 f0       	brlt	.+8      	; 0xe8a <pwm_set_freq+0x5c>
		OCR2A = PWM_MAX_RES;
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	80 93 b3 00 	sts	0x00B3, r24
     e88:	06 c0       	rjmp	.+12     	; 0xe96 <pwm_set_freq+0x68>
	} else { 
		OCR2A = (uint8_t)device.pwm_freq;
     e8a:	c8 01       	movw	r24, r16
     e8c:	b7 01       	movw	r22, r14
     e8e:	0e 94 3d 1a 	call	0x347a	; 0x347a <__fixunssfsi>
     e92:	60 93 b3 00 	sts	0x00B3, r22
	}
	return (STAT_OK);
}
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	08 95       	ret

00000ea2 <pwm_set_duty>:
 *
 *	Since I can't seem to get the output pin to work in non-inverted mode
 *	it's done in software in this routine.
 */
uint8_t pwm_set_duty(double duty)
{
     ea2:	af 92       	push	r10
     ea4:	bf 92       	push	r11
     ea6:	cf 92       	push	r12
     ea8:	df 92       	push	r13
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	5b 01       	movw	r10, r22
     eb4:	6c 01       	movw	r12, r24
	if (duty < 0.01) {				// anything approaching 0% 
     eb6:	2a e0       	ldi	r18, 0x0A	; 10
     eb8:	37 ed       	ldi	r19, 0xD7	; 215
     eba:	43 e2       	ldi	r20, 0x23	; 35
     ebc:	5c e3       	ldi	r21, 0x3C	; 60
     ebe:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__cmpsf2>
     ec2:	88 23       	and	r24, r24
     ec4:	24 f4       	brge	.+8      	; 0xece <pwm_set_duty+0x2c>
		OCR2B = 255;
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	80 93 b4 00 	sts	0x00B4, r24
     ecc:	30 c0       	rjmp	.+96     	; 0xf2e <pwm_set_duty+0x8c>
	} else if (duty > 99.9) { 		// anything approaching 100%
     ece:	c6 01       	movw	r24, r12
     ed0:	b5 01       	movw	r22, r10
     ed2:	2d ec       	ldi	r18, 0xCD	; 205
     ed4:	3c ec       	ldi	r19, 0xCC	; 204
     ed6:	47 ec       	ldi	r20, 0xC7	; 199
     ed8:	52 e4       	ldi	r21, 0x42	; 66
     eda:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__gesf2>
     ede:	18 16       	cp	r1, r24
     ee0:	1c f4       	brge	.+6      	; 0xee8 <pwm_set_duty+0x46>
		OCR2B = 0;
     ee2:	10 92 b4 00 	sts	0x00B4, r1
     ee6:	23 c0       	rjmp	.+70     	; 0xf2e <pwm_set_duty+0x8c>
	} else {
		OCR2B = (uint8_t)(OCR2A * (1-(duty/100)));
     ee8:	60 91 b3 00 	lds	r22, 0x00B3
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	88 27       	eor	r24, r24
     ef0:	77 fd       	sbrc	r23, 7
     ef2:	80 95       	com	r24
     ef4:	98 2f       	mov	r25, r24
     ef6:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__floatsisf>
     efa:	7b 01       	movw	r14, r22
     efc:	8c 01       	movw	r16, r24
     efe:	c6 01       	movw	r24, r12
     f00:	b5 01       	movw	r22, r10
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	48 ec       	ldi	r20, 0xC8	; 200
     f08:	52 ec       	ldi	r21, 0xC2	; 194
     f0a:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__divsf3>
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e8       	ldi	r20, 0x80	; 128
     f14:	5f e3       	ldi	r21, 0x3F	; 63
     f16:	0e 94 6d 19 	call	0x32da	; 0x32da <__addsf3>
     f1a:	9b 01       	movw	r18, r22
     f1c:	ac 01       	movw	r20, r24
     f1e:	c8 01       	movw	r24, r16
     f20:	b7 01       	movw	r22, r14
     f22:	0e 94 1f 1b 	call	0x363e	; 0x363e <__mulsf3>
     f26:	0e 94 3d 1a 	call	0x347a	; 0x347a <__fixunssfsi>
     f2a:	60 93 b4 00 	sts	0x00B4, r22
	}
	OCR2A = (uint8_t)device.pwm_freq;
     f2e:	60 91 7b 04 	lds	r22, 0x047B
     f32:	70 91 7c 04 	lds	r23, 0x047C
     f36:	80 91 7d 04 	lds	r24, 0x047D
     f3a:	90 91 7e 04 	lds	r25, 0x047E
     f3e:	0e 94 3d 1a 	call	0x347a	; 0x347a <__fixunssfsi>
     f42:	60 93 b3 00 	sts	0x00B3, r22
	return (STAT_OK);
}
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	ff 90       	pop	r15
     f4e:	ef 90       	pop	r14
     f50:	df 90       	pop	r13
     f52:	cf 90       	pop	r12
     f54:	bf 90       	pop	r11
     f56:	af 90       	pop	r10
     f58:	08 95       	ret

00000f5a <pwm_on>:
	OCR2B = 0;							// clear PWM duty cycle as % of TOP value
	device.pwm_freq = 0;
}

void pwm_on(double freq, double duty)
{
     f5a:	af 92       	push	r10
     f5c:	bf 92       	push	r11
     f5e:	cf 92       	push	r12
     f60:	df 92       	push	r13
     f62:	ef 92       	push	r14
     f64:	ff 92       	push	r15
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	7b 01       	movw	r14, r22
     f6c:	8c 01       	movw	r16, r24
     f6e:	59 01       	movw	r10, r18
     f70:	6a 01       	movw	r12, r20
	pwm_init();
     f72:	0e 94 f0 06 	call	0xde0	; 0xde0 <pwm_init>
	pwm_set_freq(freq);
     f76:	c8 01       	movw	r24, r16
     f78:	b7 01       	movw	r22, r14
     f7a:	0e 94 17 07 	call	0xe2e	; 0xe2e <pwm_set_freq>
	pwm_set_duty(duty);
     f7e:	c6 01       	movw	r24, r12
     f80:	b5 01       	movw	r22, r10
     f82:	0e 94 51 07 	call	0xea2	; 0xea2 <pwm_set_duty>
}
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	df 90       	pop	r13
     f90:	cf 90       	pop	r12
     f92:	bf 90       	pop	r11
     f94:	af 90       	pop	r10
     f96:	08 95       	ret

00000f98 <pwm_off>:

void pwm_off(void)
{
	pwm_on(0,0);
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	9b 01       	movw	r18, r22
     fa2:	ac 01       	movw	r20, r24
     fa4:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pwm_on>
}
     fa8:	08 95       	ret

00000faa <tick_init>:
 * tick_100ms()	  - tasks that run every 100 ms
 * tick_1sec()	  - tasks that run every 100 ms
 */
void tick_init(void)
{
	PRR &= ~PRTIM0_bm;				// Enable Timer0 in the power reduction register (system.h)
     faa:	e4 e6       	ldi	r30, 0x64	; 100
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8f 7d       	andi	r24, 0xDF	; 223
     fb2:	80 83       	st	Z, r24
	TCCR0A = TICK_MODE;				// mode_settings
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	94 bd       	out	0x24, r25	; 36
	TCCR0B = TICK_PRESCALER;		// 1024 ~= 7800 Hz
     fb8:	83 e0       	ldi	r24, 0x03	; 3
     fba:	85 bd       	out	0x25, r24	; 37
	OCR0A = TICK_COUNT;
     fbc:	8d e7       	ldi	r24, 0x7D	; 125
     fbe:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1<<OCIE0A);			// enable compare interrupts
     fc0:	90 93 6e 00 	sts	0x006E, r25
	device.tick_10ms_count = 10;
     fc4:	8a e0       	ldi	r24, 0x0A	; 10
     fc6:	80 93 78 04 	sts	0x0478, r24
	device.tick_100ms_count = 10;
     fca:	80 93 79 04 	sts	0x0479, r24
	device.tick_1sec_count = 10;	
     fce:	80 93 7a 04 	sts	0x047A, r24
}
     fd2:	08 95       	ret

00000fd4 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
     fd4:	1f 92       	push	r1
     fd6:	0f 92       	push	r0
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	0f 92       	push	r0
     fdc:	11 24       	eor	r1, r1
     fde:	8f 93       	push	r24
	device.tick_flag = true;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	80 93 77 04 	sts	0x0477, r24
}
     fe6:	8f 91       	pop	r24
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	0f 90       	pop	r0
     fee:	1f 90       	pop	r1
     ff0:	18 95       	reti

00000ff2 <tick_10ms>:
	sensor_callback();
}

void tick_10ms(void)			// 10 ms callout
{
}
     ff2:	08 95       	ret

00000ff4 <tick_1sec>:
}

void tick_1sec(void)			// 1 second callout
{
//	led_toggle();
}
     ff4:	08 95       	ret

00000ff6 <led_init>:
 * led_off()
 * led_toggle()
 */
void led_init()
{
	DDRD |= PWM_OUTB;			// set PWM bit to output
     ff6:	53 9a       	sbi	0x0a, 3	; 10
	LED_PORT &= ~(LED_PIN);
}

void led_off(void) 
{
	LED_PORT |= LED_PIN;
     ff8:	5a 9a       	sbi	0x0b, 2	; 11
 */
void led_init()
{
	DDRD |= PWM_OUTB;			// set PWM bit to output
	led_off();					// put off the red light [~Sting, 1978]
}
     ffa:	08 95       	ret

00000ffc <led_on>:

void led_on(void) 
{
	LED_PORT &= ~(LED_PIN);
     ffc:	5a 98       	cbi	0x0b, 2	; 11
}
     ffe:	08 95       	ret

00001000 <led_off>:

void led_off(void) 
{
	LED_PORT |= LED_PIN;
    1000:	5a 9a       	sbi	0x0b, 2	; 11
}
    1002:	08 95       	ret

00001004 <led_toggle>:

void led_toggle(void) 
{
	if (LED_PORT && LED_PIN) {
    1004:	8b b1       	in	r24, 0x0b	; 11
    1006:	88 23       	and	r24, r24
    1008:	11 f0       	breq	.+4      	; 0x100e <led_toggle+0xa>
	led_off();					// put off the red light [~Sting, 1978]
}

void led_on(void) 
{
	LED_PORT &= ~(LED_PIN);
    100a:	5a 98       	cbi	0x0b, 2	; 11
    100c:	08 95       	ret
}

void led_off(void) 
{
	LED_PORT |= LED_PIN;
    100e:	5a 9a       	sbi	0x0b, 2	; 11
    1010:	08 95       	ret

00001012 <tick_100ms>:
{
}

void tick_100ms(void)			// 100ms callout
{
	heater_callback();
    1012:	0e 94 1d 0a 	call	0x143a	; 0x143a <heater_callback>
}
    1016:	08 95       	ret

00001018 <tick_1ms>:
	return (STAT_OK);
}

void tick_1ms(void)				// 1ms callout
{
	sensor_callback();
    1018:	0e 94 1c 0c 	call	0x1838	; 0x1838 <sensor_callback>
}
    101c:	08 95       	ret

0000101e <tick_callback>:
{
	device.tick_flag = true;
}

uint8_t tick_callback(void)
{
    101e:	1f 93       	push	r17
	if (device.tick_flag == false) { return (STAT_NOOP);}
    1020:	80 91 77 04 	lds	r24, 0x0477
    1024:	88 23       	and	r24, r24
    1026:	11 f4       	brne	.+4      	; 0x102c <tick_callback+0xe>
    1028:	83 e0       	ldi	r24, 0x03	; 3
    102a:	24 c0       	rjmp	.+72     	; 0x1074 <tick_callback+0x56>

	device.tick_flag = false;
    102c:	10 92 77 04 	sts	0x0477, r1
	return (STAT_OK);
}

void tick_1ms(void)				// 1ms callout
{
	sensor_callback();
    1030:	0e 94 1c 0c 	call	0x1838	; 0x1838 <sensor_callback>
	if (device.tick_flag == false) { return (STAT_NOOP);}

	device.tick_flag = false;
	tick_1ms();

	if (--device.tick_10ms_count != 0) { return (STAT_OK);}
    1034:	80 91 78 04 	lds	r24, 0x0478
    1038:	81 50       	subi	r24, 0x01	; 1
    103a:	80 93 78 04 	sts	0x0478, r24
    103e:	88 23       	and	r24, r24
    1040:	c1 f4       	brne	.+48     	; 0x1072 <tick_callback+0x54>
	device.tick_10ms_count = 10;
    1042:	1a e0       	ldi	r17, 0x0A	; 10
    1044:	10 93 78 04 	sts	0x0478, r17
	tick_10ms();

	if (--device.tick_100ms_count != 0) { return (STAT_OK);}
    1048:	80 91 79 04 	lds	r24, 0x0479
    104c:	81 50       	subi	r24, 0x01	; 1
    104e:	80 93 79 04 	sts	0x0479, r24
    1052:	88 23       	and	r24, r24
    1054:	71 f4       	brne	.+28     	; 0x1072 <tick_callback+0x54>
	device.tick_100ms_count = 10;
    1056:	10 93 79 04 	sts	0x0479, r17
{
}

void tick_100ms(void)			// 100ms callout
{
	heater_callback();
    105a:	0e 94 1d 0a 	call	0x143a	; 0x143a <heater_callback>

	if (--device.tick_100ms_count != 0) { return (STAT_OK);}
	device.tick_100ms_count = 10;
	tick_100ms();

	if (--device.tick_1sec_count != 0) { return (STAT_OK);}
    105e:	80 91 7a 04 	lds	r24, 0x047A
    1062:	81 50       	subi	r24, 0x01	; 1
    1064:	80 93 7a 04 	sts	0x047A, r24
    1068:	88 23       	and	r24, r24
    106a:	19 f4       	brne	.+6      	; 0x1072 <tick_callback+0x54>
	device.tick_1sec_count = 10;
    106c:	10 93 7a 04 	sts	0x047A, r17
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <tick_callback+0x56>
	tick_1sec();

	return (STAT_OK);
    1072:	80 e0       	ldi	r24, 0x00	; 0
}
    1074:	1f 91       	pop	r17
    1076:	08 95       	ret

00001078 <xio_init_spi>:
 *	xio_init_spi() - general purpose SPI initialization (shared)
 *					 requires open() to be performed to complete the device init
 */
xioDev_t *xio_init_spi(uint8_t dev)
{
	spi0.dev = dev;	// overwrite the structure initialization value in case it was wrong
    1078:	80 93 0e 02 	sts	0x020E, r24
	return (&spi0);
}
    107c:	8e e0       	ldi	r24, 0x0E	; 14
    107e:	92 e0       	ldi	r25, 0x02	; 2
    1080:	08 95       	ret

00001082 <__vector_17>:
{
	return (xio_write_buffer(((xioDev_t *)stream->udata)->tx, c));
}
*/
ISR(SPI_STC_vect)
{
    1082:	1f 92       	push	r1
    1084:	0f 92       	push	r0
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	0f 92       	push	r0
    108a:	11 24       	eor	r1, r1
    108c:	1f 93       	push	r17
    108e:	2f 93       	push	r18
    1090:	3f 93       	push	r19
    1092:	4f 93       	push	r20
    1094:	5f 93       	push	r21
    1096:	6f 93       	push	r22
    1098:	7f 93       	push	r23
    109a:	8f 93       	push	r24
    109c:	9f 93       	push	r25
    109e:	af 93       	push	r26
    10a0:	bf 93       	push	r27
    10a2:	ef 93       	push	r30
    10a4:	ff 93       	push	r31
	char c = SPDR;								// read the incoming character; save it
    10a6:	1e b5       	in	r17, 0x2e	; 46
	int c_out = xio_read_buffer(SPI0tx); 		// stage the next char to transmit on MISO from the TX buffer
    10a8:	80 91 1d 02 	lds	r24, 0x021D
    10ac:	90 91 1e 02 	lds	r25, 0x021E
    10b0:	0e 94 ab 04 	call	0x956	; 0x956 <xio_read_buffer>
    10b4:	99 27       	eor	r25, r25
    10b6:	87 fd       	sbrc	r24, 7
    10b8:	90 95       	com	r25
	if (c_out ==_FDEV_ERR) SPDR = ETX; else SPDR = (char)c_out;	// stage next TX char or ETX if none	
    10ba:	2f ef       	ldi	r18, 0xFF	; 255
    10bc:	8f 3f       	cpi	r24, 0xFF	; 255
    10be:	92 07       	cpc	r25, r18
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <__vector_17+0x42>
    10c2:	83 e0       	ldi	r24, 0x03	; 3
    10c4:	8e bd       	out	0x2e, r24	; 46
	xio_write_buffer(SPI0rx, c);				// write incoming char into RX buffer
    10c6:	80 91 1b 02 	lds	r24, 0x021B
    10ca:	90 91 1c 02 	lds	r25, 0x021C
    10ce:	61 2f       	mov	r22, r17
    10d0:	0e 94 14 05 	call	0xa28	; 0xa28 <xio_write_buffer>
//	char c = SPDR;								// read the incoming character; save it
//	if (SPI0tx->head == SPI0tx->tail) { SPDR = ETX;}
//	if ((--(SPI0tx->tail)) == 0) { SPI0tx->tail = SPI0tx->size;}	// advance tail with wrap
//	SPDR = SPI0tx->buf[SPI0tx->tail];				// stage the character from TX buffer
//	xio_write_buffer(SPI0rx, c);					// write incoming char into RX buffer
}
    10d4:	ff 91       	pop	r31
    10d6:	ef 91       	pop	r30
    10d8:	bf 91       	pop	r27
    10da:	af 91       	pop	r26
    10dc:	9f 91       	pop	r25
    10de:	8f 91       	pop	r24
    10e0:	7f 91       	pop	r23
    10e2:	6f 91       	pop	r22
    10e4:	5f 91       	pop	r21
    10e6:	4f 91       	pop	r20
    10e8:	3f 91       	pop	r19
    10ea:	2f 91       	pop	r18
    10ec:	1f 91       	pop	r17
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	0f 90       	pop	r0
    10f4:	1f 90       	pop	r1
    10f6:	18 95       	reti

000010f8 <xio_open_spi>:

/*
 *	xio_open_spi() - open a specific SPI device
 */
FILE *xio_open_spi(const uint8_t dev, const char *addr, const flags_t flags)
{
    10f8:	0f 93       	push	r16
    10fa:	1f 93       	push	r17
	xioDev_t *d = ds[dev];			// convenience device struct pointer
    10fc:	e8 2f       	mov	r30, r24
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	ee 0f       	add	r30, r30
    1102:	ff 1f       	adc	r31, r31
    1104:	e0 5e       	subi	r30, 0xE0	; 224
    1106:	fb 4f       	sbci	r31, 0xFB	; 251
    1108:	00 81       	ld	r16, Z
    110a:	11 81       	ldd	r17, Z+1	; 0x01
	xio_reset_device(d, flags);
    110c:	c8 01       	movw	r24, r16
    110e:	ba 01       	movw	r22, r20
    1110:	0e 94 56 04 	call	0x8ac	; 0x8ac <xio_reset_device>

	// setup the SPI hardware device
	PRR &= ~PRSPI_bm;				// Enable SPI in power reduction register (system.h)
    1114:	e4 e6       	ldi	r30, 0x64	; 100
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	8b 7f       	andi	r24, 0xFB	; 251
    111c:	80 83       	st	Z, r24
	SPCR |= SPI_MODE;
    111e:	8c b5       	in	r24, 0x2c	; 44
    1120:	8c 6c       	ori	r24, 0xCC	; 204
    1122:	8c bd       	out	0x2c, r24	; 44
	DDRB |= SPI_OUTBITS;
    1124:	24 9a       	sbi	0x04, 4	; 4
    1126:	0d 5e       	subi	r16, 0xED	; 237
    1128:	1f 4f       	sbci	r17, 0xFF	; 255

	return (&d->stream);			// return stdio FILE reference
}
    112a:	c8 01       	movw	r24, r16
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	08 95       	ret

00001132 <pid_reset>:
	pid.state = PID_ON;
}

void pid_reset()
{
	pid.output = 0;
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e0       	ldi	r20, 0x00	; 0
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	20 93 88 03 	sts	0x0388, r18
    113e:	30 93 89 03 	sts	0x0389, r19
    1142:	40 93 8a 03 	sts	0x038A, r20
    1146:	50 93 8b 03 	sts	0x038B, r21
	pid.integral = PID_INITIAL_INTEGRAL;
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a8 e4       	ldi	r26, 0x48	; 72
    1150:	b3 e4       	ldi	r27, 0x43	; 67
    1152:	80 93 9c 03 	sts	0x039C, r24
    1156:	90 93 9d 03 	sts	0x039D, r25
    115a:	a0 93 9e 03 	sts	0x039E, r26
    115e:	b0 93 9f 03 	sts	0x039F, r27
	pid.prev_error = 0;
    1162:	20 93 98 03 	sts	0x0398, r18
    1166:	30 93 99 03 	sts	0x0399, r19
    116a:	40 93 9a 03 	sts	0x039A, r20
    116e:	50 93 9b 03 	sts	0x039B, r21
}
    1172:	08 95       	ret

00001174 <pid_calculate>:

double pid_calculate(double setpoint,double temperature)
{
    1174:	6f 92       	push	r6
    1176:	7f 92       	push	r7
    1178:	8f 92       	push	r8
    117a:	9f 92       	push	r9
    117c:	af 92       	push	r10
    117e:	bf 92       	push	r11
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	7b 01       	movw	r14, r22
    118e:	8c 01       	movw	r16, r24
	if (pid.state == PID_OFF) { return (pid.output_min);}
    1190:	80 91 86 03 	lds	r24, 0x0386
    1194:	88 23       	and	r24, r24
    1196:	49 f4       	brne	.+18     	; 0x11aa <pid_calculate+0x36>
    1198:	70 91 90 03 	lds	r23, 0x0390
    119c:	60 91 91 03 	lds	r22, 0x0391
    11a0:	90 91 92 03 	lds	r25, 0x0392
    11a4:	80 91 93 03 	lds	r24, 0x0393
    11a8:	dd c0       	rjmp	.+442    	; 0x1364 <pid_calculate+0x1f0>

	pid.error = setpoint - temperature;		// current error term
    11aa:	c8 01       	movw	r24, r16
    11ac:	b7 01       	movw	r22, r14
    11ae:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__subsf3>
    11b2:	3b 01       	movw	r6, r22
    11b4:	4c 01       	movw	r8, r24
    11b6:	60 93 94 03 	sts	0x0394, r22
    11ba:	70 93 95 03 	sts	0x0395, r23
    11be:	80 93 96 03 	sts	0x0396, r24
    11c2:	90 93 97 03 	sts	0x0397, r25

	// perform integration only if error is GT epsilon, and with anti-windup
	if ((fabs(pid.error) > PID_EPSILON) && (pid.output < pid.output_max)) {	
    11c6:	9f 77       	andi	r25, 0x7F	; 127
    11c8:	2d ec       	ldi	r18, 0xCD	; 205
    11ca:	3c ec       	ldi	r19, 0xCC	; 204
    11cc:	4c ec       	ldi	r20, 0xCC	; 204
    11ce:	5d e3       	ldi	r21, 0x3D	; 61
    11d0:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__gesf2>
    11d4:	18 16       	cp	r1, r24
    11d6:	84 f5       	brge	.+96     	; 0x1238 <pid_calculate+0xc4>
    11d8:	60 91 88 03 	lds	r22, 0x0388
    11dc:	70 91 89 03 	lds	r23, 0x0389
    11e0:	80 91 8a 03 	lds	r24, 0x038A
    11e4:	90 91 8b 03 	lds	r25, 0x038B
    11e8:	20 91 8c 03 	lds	r18, 0x038C
    11ec:	30 91 8d 03 	lds	r19, 0x038D
    11f0:	40 91 8e 03 	lds	r20, 0x038E
    11f4:	50 91 8f 03 	lds	r21, 0x038F
    11f8:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__cmpsf2>
    11fc:	88 23       	and	r24, r24
    11fe:	e4 f4       	brge	.+56     	; 0x1238 <pid_calculate+0xc4>
		pid.integral += (pid.error * PID_DT);
    1200:	c4 01       	movw	r24, r8
    1202:	b3 01       	movw	r22, r6
    1204:	2d ec       	ldi	r18, 0xCD	; 205
    1206:	3c ec       	ldi	r19, 0xCC	; 204
    1208:	4c ec       	ldi	r20, 0xCC	; 204
    120a:	5d e3       	ldi	r21, 0x3D	; 61
    120c:	0e 94 1f 1b 	call	0x363e	; 0x363e <__mulsf3>
    1210:	9b 01       	movw	r18, r22
    1212:	ac 01       	movw	r20, r24
    1214:	60 91 9c 03 	lds	r22, 0x039C
    1218:	70 91 9d 03 	lds	r23, 0x039D
    121c:	80 91 9e 03 	lds	r24, 0x039E
    1220:	90 91 9f 03 	lds	r25, 0x039F
    1224:	0e 94 6d 19 	call	0x32da	; 0x32da <__addsf3>
    1228:	60 93 9c 03 	sts	0x039C, r22
    122c:	70 93 9d 03 	sts	0x039D, r23
    1230:	80 93 9e 03 	sts	0x039E, r24
    1234:	90 93 9f 03 	sts	0x039F, r25
	}
	// compute derivative and output
	pid.derivative = (pid.error - pid.prev_error) / PID_DT;
    1238:	c4 01       	movw	r24, r8
    123a:	b3 01       	movw	r22, r6
    123c:	20 91 98 03 	lds	r18, 0x0398
    1240:	30 91 99 03 	lds	r19, 0x0399
    1244:	40 91 9a 03 	lds	r20, 0x039A
    1248:	50 91 9b 03 	lds	r21, 0x039B
    124c:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__subsf3>
    1250:	2d ec       	ldi	r18, 0xCD	; 205
    1252:	3c ec       	ldi	r19, 0xCC	; 204
    1254:	4c ec       	ldi	r20, 0xCC	; 204
    1256:	5d e3       	ldi	r21, 0x3D	; 61
    1258:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__divsf3>
    125c:	5b 01       	movw	r10, r22
    125e:	6c 01       	movw	r12, r24
    1260:	60 93 a0 03 	sts	0x03A0, r22
    1264:	70 93 a1 03 	sts	0x03A1, r23
    1268:	80 93 a2 03 	sts	0x03A2, r24
    126c:	90 93 a3 03 	sts	0x03A3, r25
	pid.output = pid.Kp * pid.error + pid.Ki * pid.integral + pid.Kd * pid.derivative;
    1270:	c4 01       	movw	r24, r8
    1272:	b3 01       	movw	r22, r6
    1274:	20 91 a4 03 	lds	r18, 0x03A4
    1278:	30 91 a5 03 	lds	r19, 0x03A5
    127c:	40 91 a6 03 	lds	r20, 0x03A6
    1280:	50 91 a7 03 	lds	r21, 0x03A7
    1284:	0e 94 1f 1b 	call	0x363e	; 0x363e <__mulsf3>
    1288:	7b 01       	movw	r14, r22
    128a:	8c 01       	movw	r16, r24
    128c:	60 91 a8 03 	lds	r22, 0x03A8
    1290:	70 91 a9 03 	lds	r23, 0x03A9
    1294:	80 91 aa 03 	lds	r24, 0x03AA
    1298:	90 91 ab 03 	lds	r25, 0x03AB
    129c:	20 91 9c 03 	lds	r18, 0x039C
    12a0:	30 91 9d 03 	lds	r19, 0x039D
    12a4:	40 91 9e 03 	lds	r20, 0x039E
    12a8:	50 91 9f 03 	lds	r21, 0x039F
    12ac:	0e 94 1f 1b 	call	0x363e	; 0x363e <__mulsf3>
    12b0:	9b 01       	movw	r18, r22
    12b2:	ac 01       	movw	r20, r24
    12b4:	c8 01       	movw	r24, r16
    12b6:	b7 01       	movw	r22, r14
    12b8:	0e 94 6d 19 	call	0x32da	; 0x32da <__addsf3>
    12bc:	7b 01       	movw	r14, r22
    12be:	8c 01       	movw	r16, r24
    12c0:	c6 01       	movw	r24, r12
    12c2:	b5 01       	movw	r22, r10
    12c4:	20 91 ac 03 	lds	r18, 0x03AC
    12c8:	30 91 ad 03 	lds	r19, 0x03AD
    12cc:	40 91 ae 03 	lds	r20, 0x03AE
    12d0:	50 91 af 03 	lds	r21, 0x03AF
    12d4:	0e 94 1f 1b 	call	0x363e	; 0x363e <__mulsf3>
    12d8:	9b 01       	movw	r18, r22
    12da:	ac 01       	movw	r20, r24
    12dc:	c8 01       	movw	r24, r16
    12de:	b7 01       	movw	r22, r14
    12e0:	0e 94 6d 19 	call	0x32da	; 0x32da <__addsf3>
    12e4:	7b 01       	movw	r14, r22
    12e6:	8c 01       	movw	r16, r24
    12e8:	60 93 88 03 	sts	0x0388, r22
    12ec:	70 93 89 03 	sts	0x0389, r23
    12f0:	80 93 8a 03 	sts	0x038A, r24
    12f4:	90 93 8b 03 	sts	0x038B, r25

	// fix min amd max outputs (saturation filter)
	if(pid.output > pid.output_max) { pid.output = pid.output_max; } else
    12f8:	a0 90 8c 03 	lds	r10, 0x038C
    12fc:	b0 90 8d 03 	lds	r11, 0x038D
    1300:	c0 90 8e 03 	lds	r12, 0x038E
    1304:	d0 90 8f 03 	lds	r13, 0x038F
    1308:	a6 01       	movw	r20, r12
    130a:	95 01       	movw	r18, r10
    130c:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__gesf2>
    1310:	18 16       	cp	r1, r24
    1312:	84 f0       	brlt	.+32     	; 0x1334 <pid_calculate+0x1c0>
	if(pid.output < pid.output_min) { pid.output = pid.output_min; }
    1314:	a0 90 90 03 	lds	r10, 0x0390
    1318:	b0 90 91 03 	lds	r11, 0x0391
    131c:	c0 90 92 03 	lds	r12, 0x0392
    1320:	d0 90 93 03 	lds	r13, 0x0393
    1324:	c8 01       	movw	r24, r16
    1326:	b7 01       	movw	r22, r14
    1328:	a6 01       	movw	r20, r12
    132a:	95 01       	movw	r18, r10
    132c:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__cmpsf2>
    1330:	88 23       	and	r24, r24
    1332:	44 f4       	brge	.+16     	; 0x1344 <pid_calculate+0x1d0>
    1334:	a0 92 88 03 	sts	0x0388, r10
    1338:	b0 92 89 03 	sts	0x0389, r11
    133c:	c0 92 8a 03 	sts	0x038A, r12
    1340:	d0 92 8b 03 	sts	0x038B, r13
	pid.prev_error = pid.error;
    1344:	60 92 98 03 	sts	0x0398, r6
    1348:	70 92 99 03 	sts	0x0399, r7
    134c:	80 92 9a 03 	sts	0x039A, r8
    1350:	90 92 9b 03 	sts	0x039B, r9

	return pid.output;
    1354:	70 91 88 03 	lds	r23, 0x0388
    1358:	60 91 89 03 	lds	r22, 0x0389
    135c:	90 91 8a 03 	lds	r25, 0x038A
    1360:	80 91 8b 03 	lds	r24, 0x038B
}
    1364:	27 2f       	mov	r18, r23
    1366:	36 2f       	mov	r19, r22
    1368:	49 2f       	mov	r20, r25
    136a:	58 2f       	mov	r21, r24
    136c:	b9 01       	movw	r22, r18
    136e:	ca 01       	movw	r24, r20
    1370:	1f 91       	pop	r17
    1372:	0f 91       	pop	r16
    1374:	ff 90       	pop	r15
    1376:	ef 90       	pop	r14
    1378:	df 90       	pop	r13
    137a:	cf 90       	pop	r12
    137c:	bf 90       	pop	r11
    137e:	af 90       	pop	r10
    1380:	9f 90       	pop	r9
    1382:	8f 90       	pop	r8
    1384:	7f 90       	pop	r7
    1386:	6f 90       	pop	r6
    1388:	08 95       	ret

0000138a <pid_init>:
 * pid_reset() - reset PID values to cold start
 * pid_calc() - derived from: http://www.embeddedheaven.com/pid-control-algorithm-c-language.htm
 */
void pid_init() 
{
	memset(&pid, 0, sizeof(struct PIDstruct));
    138a:	8a e2       	ldi	r24, 0x2A	; 42
    138c:	e6 e8       	ldi	r30, 0x86	; 134
    138e:	f3 e0       	ldi	r31, 0x03	; 3
    1390:	df 01       	movw	r26, r30
    1392:	1d 92       	st	X+, r1
    1394:	8a 95       	dec	r24
    1396:	e9 f7       	brne	.-6      	; 0x1392 <pid_init+0x8>
	pid.Kp = PID_Kp;
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	a0 ea       	ldi	r26, 0xA0	; 160
    139e:	b0 e4       	ldi	r27, 0x40	; 64
    13a0:	80 93 a4 03 	sts	0x03A4, r24
    13a4:	90 93 a5 03 	sts	0x03A5, r25
    13a8:	a0 93 a6 03 	sts	0x03A6, r26
    13ac:	b0 93 a7 03 	sts	0x03A7, r27
	pid.Ki = PID_Ki;
    13b0:	8d ec       	ldi	r24, 0xCD	; 205
    13b2:	9c ec       	ldi	r25, 0xCC	; 204
    13b4:	ac ec       	ldi	r26, 0xCC	; 204
    13b6:	bd e3       	ldi	r27, 0x3D	; 61
    13b8:	80 93 a8 03 	sts	0x03A8, r24
    13bc:	90 93 a9 03 	sts	0x03A9, r25
    13c0:	a0 93 aa 03 	sts	0x03AA, r26
    13c4:	b0 93 ab 03 	sts	0x03AB, r27
	pid.Kd = PID_Kd;
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a0 e0       	ldi	r26, 0x00	; 0
    13ce:	bf e3       	ldi	r27, 0x3F	; 63
    13d0:	80 93 ac 03 	sts	0x03AC, r24
    13d4:	90 93 ad 03 	sts	0x03AD, r25
    13d8:	a0 93 ae 03 	sts	0x03AE, r26
    13dc:	b0 93 af 03 	sts	0x03AF, r27
	pid.output_max = PID_MAX_OUTPUT;		// saturation filter max value
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a8 ec       	ldi	r26, 0xC8	; 200
    13e6:	b2 e4       	ldi	r27, 0x42	; 66
    13e8:	80 93 8c 03 	sts	0x038C, r24
    13ec:	90 93 8d 03 	sts	0x038D, r25
    13f0:	a0 93 8e 03 	sts	0x038E, r26
    13f4:	b0 93 8f 03 	sts	0x038F, r27
	pid.output_min = PID_MIN_OUTPUT;		// saturation filter min value
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a0 e0       	ldi	r26, 0x00	; 0
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	80 93 90 03 	sts	0x0390, r24
    1404:	90 93 91 03 	sts	0x0391, r25
    1408:	a0 93 92 03 	sts	0x0392, r26
    140c:	b0 93 93 03 	sts	0x0393, r27
	pid.state = PID_ON;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	80 93 86 03 	sts	0x0386, r24
}
    1416:	08 95       	ret

00001418 <heater_off>:
	heater.state = HEATER_HEATING;
	led_off();
}

void heater_off(uint8_t state, uint8_t code) 
{
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	18 2f       	mov	r17, r24
    141e:	06 2f       	mov	r16, r22
	pwm_off();							// stop sending current to the heater
    1420:	0e 94 cc 07 	call	0xf98	; 0xf98 <pwm_off>
	sensor_off();						// stop taking readings
    1424:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <sensor_off>
	heater.state = state;
    1428:	10 93 60 03 	sts	0x0360, r17
	heater.code = code;
    142c:	00 93 61 03 	sts	0x0361, r16
	led_off();
    1430:	0e 94 00 08 	call	0x1000	; 0x1000 <led_off>
}
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	08 95       	ret

0000143a <heater_callback>:

void heater_callback()
{
    143a:	af 92       	push	r10
    143c:	bf 92       	push	r11
    143e:	cf 92       	push	r12
    1440:	df 92       	push	r13
    1442:	ef 92       	push	r14
    1444:	ff 92       	push	r15
    1446:	0f 93       	push	r16
    1448:	1f 93       	push	r17
	// catch the no-op cases
	if ((heater.state == HEATER_OFF) || (heater.state == HEATER_SHUTDOWN)) { return;}
    144a:	80 91 60 03 	lds	r24, 0x0360
    144e:	82 30       	cpi	r24, 0x02	; 2
    1450:	08 f4       	brcc	.+2      	; 0x1454 <heater_callback+0x1a>
    1452:	13 c1       	rjmp	.+550    	; 0x167a <heater_callback+0x240>
	rpt_readout();
    1454:	0e 94 12 03 	call	0x624	; 0x624 <rpt_readout>

	// get current temperature from the sensor
	heater.temperature = sensor_get_temperature();
    1458:	0e 94 04 0c 	call	0x1808	; 0x1808 <sensor_get_temperature>
    145c:	60 93 66 03 	sts	0x0366, r22
    1460:	70 93 67 03 	sts	0x0367, r23
    1464:	80 93 68 03 	sts	0x0368, r24
    1468:	90 93 69 03 	sts	0x0369, r25

	// trap overheat condition
	if (heater.temperature > heater.overheat_temperature) {
    146c:	20 91 82 03 	lds	r18, 0x0382
    1470:	30 91 83 03 	lds	r19, 0x0383
    1474:	40 91 84 03 	lds	r20, 0x0384
    1478:	50 91 85 03 	lds	r21, 0x0385
    147c:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__gesf2>
    1480:	18 16       	cp	r1, r24
    1482:	2c f4       	brge	.+10     	; 0x148e <heater_callback+0x54>
		heater_off(HEATER_SHUTDOWN, HEATER_OVERHEATED);
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	63 e0       	ldi	r22, 0x03	; 3
    1488:	0e 94 0c 0a 	call	0x1418	; 0x1418 <heater_off>
    148c:	f6 c0       	rjmp	.+492    	; 0x167a <heater_callback+0x240>
		return;
	}

	sensor_start_reading();				// start reading for the next interval
    148e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <sensor_start_reading>

	// handle bad readings from the sensor
	if (heater.temperature < ABSOLUTE_ZERO) {
    1492:	e0 90 66 03 	lds	r14, 0x0366
    1496:	f0 90 67 03 	lds	r15, 0x0367
    149a:	00 91 68 03 	lds	r16, 0x0368
    149e:	10 91 69 03 	lds	r17, 0x0369
    14a2:	c8 01       	movw	r24, r16
    14a4:	b7 01       	movw	r22, r14
    14a6:	23 e3       	ldi	r18, 0x33	; 51
    14a8:	33 e9       	ldi	r19, 0x93	; 147
    14aa:	48 e8       	ldi	r20, 0x88	; 136
    14ac:	53 ec       	ldi	r21, 0xC3	; 195
    14ae:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__cmpsf2>
    14b2:	88 23       	and	r24, r24
    14b4:	94 f4       	brge	.+36     	; 0x14da <heater_callback+0xa0>
		if (++heater.bad_reading_count > heater.bad_reading_max) {
    14b6:	80 91 65 03 	lds	r24, 0x0365
    14ba:	8f 5f       	subi	r24, 0xFF	; 255
    14bc:	80 93 65 03 	sts	0x0365, r24
    14c0:	90 91 64 03 	lds	r25, 0x0364
    14c4:	98 17       	cp	r25, r24
    14c6:	08 f0       	brcs	.+2      	; 0x14ca <heater_callback+0x90>
    14c8:	d8 c0       	rjmp	.+432    	; 0x167a <heater_callback+0x240>
			heater_off(HEATER_SHUTDOWN, HEATER_SENSOR_ERROR);
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	64 e0       	ldi	r22, 0x04	; 4
    14ce:	0e 94 0c 0a 	call	0x1418	; 0x1418 <heater_off>
			printf_P(PSTR("Heater Sensor Error Shutdown\n"));	
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <heater_callback+0x9a>
    14d4:	87 e3       	ldi	r24, 0x37	; 55
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	58 c0       	rjmp	.+176    	; 0x158a <heater_callback+0x150>
		}
		return;
	}
	heater.bad_reading_count = 0;		// reset the bad reading counter
    14da:	10 92 65 03 	sts	0x0365, r1

	double duty_cycle = pid_calculate(heater.setpoint, heater.temperature);
    14de:	60 91 6a 03 	lds	r22, 0x036A
    14e2:	70 91 6b 03 	lds	r23, 0x036B
    14e6:	80 91 6c 03 	lds	r24, 0x036C
    14ea:	90 91 6d 03 	lds	r25, 0x036D
    14ee:	a8 01       	movw	r20, r16
    14f0:	97 01       	movw	r18, r14
    14f2:	0e 94 ba 08 	call	0x1174	; 0x1174 <pid_calculate>
	pwm_set_duty(duty_cycle);
    14f6:	0e 94 51 07 	call	0xea2	; 0xea2 <pwm_set_duty>

	// handle HEATER exceptions
	if (heater.state == HEATER_HEATING) {
    14fa:	80 91 60 03 	lds	r24, 0x0360
    14fe:	82 30       	cpi	r24, 0x02	; 2
    1500:	09 f0       	breq	.+2      	; 0x1504 <heater_callback+0xca>
    1502:	70 c0       	rjmp	.+224    	; 0x15e4 <heater_callback+0x1aa>
		heater.regulation_timer += HEATER_TICK_SECONDS;
    1504:	60 91 72 03 	lds	r22, 0x0372
    1508:	70 91 73 03 	lds	r23, 0x0373
    150c:	80 91 74 03 	lds	r24, 0x0374
    1510:	90 91 75 03 	lds	r25, 0x0375
    1514:	2d ec       	ldi	r18, 0xCD	; 205
    1516:	3c ec       	ldi	r19, 0xCC	; 204
    1518:	4c ec       	ldi	r20, 0xCC	; 204
    151a:	5d e3       	ldi	r21, 0x3D	; 61
    151c:	0e 94 6d 19 	call	0x32da	; 0x32da <__addsf3>
    1520:	7b 01       	movw	r14, r22
    1522:	8c 01       	movw	r16, r24
    1524:	60 93 72 03 	sts	0x0372, r22
    1528:	70 93 73 03 	sts	0x0373, r23
    152c:	80 93 74 03 	sts	0x0374, r24
    1530:	90 93 75 03 	sts	0x0375, r25

		if ((heater.temperature < heater.ambient_temperature) &&
    1534:	a0 90 66 03 	lds	r10, 0x0366
    1538:	b0 90 67 03 	lds	r11, 0x0367
    153c:	c0 90 68 03 	lds	r12, 0x0368
    1540:	d0 90 69 03 	lds	r13, 0x0369
    1544:	c6 01       	movw	r24, r12
    1546:	b5 01       	movw	r22, r10
    1548:	20 91 7e 03 	lds	r18, 0x037E
    154c:	30 91 7f 03 	lds	r19, 0x037F
    1550:	40 91 80 03 	lds	r20, 0x0380
    1554:	50 91 81 03 	lds	r21, 0x0381
    1558:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__cmpsf2>
    155c:	88 23       	and	r24, r24
    155e:	f4 f4       	brge	.+60     	; 0x159c <heater_callback+0x162>
    1560:	c8 01       	movw	r24, r16
    1562:	b7 01       	movw	r22, r14
    1564:	20 91 76 03 	lds	r18, 0x0376
    1568:	30 91 77 03 	lds	r19, 0x0377
    156c:	40 91 78 03 	lds	r20, 0x0378
    1570:	50 91 79 03 	lds	r21, 0x0379
    1574:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__gesf2>
    1578:	18 16       	cp	r1, r24
    157a:	84 f4       	brge	.+32     	; 0x159c <heater_callback+0x162>
			(heater.regulation_timer > heater.ambient_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_AMBIENT_TIMED_OUT);
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	61 e0       	ldi	r22, 0x01	; 1
    1580:	0e 94 0c 0a 	call	0x1418	; 0x1418 <heater_off>
			printf_P(PSTR("Heater Ambient Error Shutdown\n"));	
    1584:	00 d0       	rcall	.+0      	; 0x1586 <heater_callback+0x14c>
    1586:	88 e1       	ldi	r24, 0x18	; 24
    1588:	91 e0       	ldi	r25, 0x01	; 1
    158a:	ed b7       	in	r30, 0x3d	; 61
    158c:	fe b7       	in	r31, 0x3e	; 62
    158e:	92 83       	std	Z+2, r25	; 0x02
    1590:	81 83       	std	Z+1, r24	; 0x01
    1592:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <printf_P>
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	6f c0       	rjmp	.+222    	; 0x167a <heater_callback+0x240>
			return;
		}
		if ((heater.temperature < heater.setpoint) &&
    159c:	c6 01       	movw	r24, r12
    159e:	b5 01       	movw	r22, r10
    15a0:	20 91 6a 03 	lds	r18, 0x036A
    15a4:	30 91 6b 03 	lds	r19, 0x036B
    15a8:	40 91 6c 03 	lds	r20, 0x036C
    15ac:	50 91 6d 03 	lds	r21, 0x036D
    15b0:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__cmpsf2>
    15b4:	88 23       	and	r24, r24
    15b6:	b4 f4       	brge	.+44     	; 0x15e4 <heater_callback+0x1aa>
    15b8:	c8 01       	movw	r24, r16
    15ba:	b7 01       	movw	r22, r14
    15bc:	20 91 7a 03 	lds	r18, 0x037A
    15c0:	30 91 7b 03 	lds	r19, 0x037B
    15c4:	40 91 7c 03 	lds	r20, 0x037C
    15c8:	50 91 7d 03 	lds	r21, 0x037D
    15cc:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__gesf2>
    15d0:	18 16       	cp	r1, r24
    15d2:	44 f4       	brge	.+16     	; 0x15e4 <heater_callback+0x1aa>
			(heater.regulation_timer > heater.regulation_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_REGULATION_TIMED_OUT);
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	62 e0       	ldi	r22, 0x02	; 2
    15d8:	0e 94 0c 0a 	call	0x1418	; 0x1418 <heater_off>
			printf_P(PSTR("Heater Timeout Error Shutdown\n"));	
    15dc:	00 d0       	rcall	.+0      	; 0x15de <heater_callback+0x1a4>
    15de:	89 ef       	ldi	r24, 0xF9	; 249
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	d3 cf       	rjmp	.-90     	; 0x158a <heater_callback+0x150>
	// Manage regulation state and LED indicator
	// Heater.regulation_count is a hysteresis register that increments if the 
	// heater is at temp, decrements if not. It pegs at max and min values.
	// The LED flashes if the heater is not in regulation and goes solid if it is.

	if (fabs(pid.error) <= heater.regulation_range) {
    15e4:	60 91 94 03 	lds	r22, 0x0394
    15e8:	70 91 95 03 	lds	r23, 0x0395
    15ec:	80 91 96 03 	lds	r24, 0x0396
    15f0:	90 91 97 03 	lds	r25, 0x0397
    15f4:	9f 77       	andi	r25, 0x7F	; 127
    15f6:	20 91 6e 03 	lds	r18, 0x036E
    15fa:	30 91 6f 03 	lds	r19, 0x036F
    15fe:	40 91 70 03 	lds	r20, 0x0370
    1602:	50 91 71 03 	lds	r21, 0x0371
    1606:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__cmpsf2>
    160a:	18 16       	cp	r1, r24
    160c:	64 f0       	brlt	.+24     	; 0x1626 <heater_callback+0x1ec>
		if (++heater.hysteresis > HEATER_HYSTERESIS) {
    160e:	80 91 63 03 	lds	r24, 0x0363
    1612:	8f 5f       	subi	r24, 0xFF	; 255
    1614:	80 93 63 03 	sts	0x0363, r24
    1618:	8b 30       	cpi	r24, 0x0B	; 11
    161a:	ec f0       	brlt	.+58     	; 0x1656 <heater_callback+0x21c>
			heater.hysteresis = HEATER_HYSTERESIS;
    161c:	8a e0       	ldi	r24, 0x0A	; 10
    161e:	80 93 63 03 	sts	0x0363, r24
			heater.state = HEATER_REGULATED;
    1622:	83 e0       	ldi	r24, 0x03	; 3
    1624:	16 c0       	rjmp	.+44     	; 0x1652 <heater_callback+0x218>
		}
	} else {
		if (--heater.hysteresis <= 0) {
    1626:	80 91 63 03 	lds	r24, 0x0363
    162a:	81 50       	subi	r24, 0x01	; 1
    162c:	80 93 63 03 	sts	0x0363, r24
    1630:	18 16       	cp	r1, r24
    1632:	8c f0       	brlt	.+34     	; 0x1656 <heater_callback+0x21c>
			heater.hysteresis = 0;
    1634:	10 92 63 03 	sts	0x0363, r1
			heater.regulation_timer = 0;			// reset timeouts
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	a0 e0       	ldi	r26, 0x00	; 0
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	80 93 72 03 	sts	0x0372, r24
    1644:	90 93 73 03 	sts	0x0373, r25
    1648:	a0 93 74 03 	sts	0x0374, r26
    164c:	b0 93 75 03 	sts	0x0375, r27
			heater.state = HEATER_HEATING;
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	80 93 60 03 	sts	0x0360, r24
		}
	}
	if (heater.state == HEATER_REGULATED) {
    1656:	80 91 60 03 	lds	r24, 0x0360
    165a:	83 30       	cpi	r24, 0x03	; 3
    165c:	19 f4       	brne	.+6      	; 0x1664 <heater_callback+0x22a>
		led_on();
    165e:	0e 94 fe 07 	call	0xffc	; 0xffc <led_on>
    1662:	0b c0       	rjmp	.+22     	; 0x167a <heater_callback+0x240>
	} else {
		if (++heater.toggle > 3) {
    1664:	80 91 62 03 	lds	r24, 0x0362
    1668:	8f 5f       	subi	r24, 0xFF	; 255
    166a:	80 93 62 03 	sts	0x0362, r24
    166e:	84 30       	cpi	r24, 0x04	; 4
    1670:	20 f0       	brcs	.+8      	; 0x167a <heater_callback+0x240>
			heater.toggle = 0;
    1672:	10 92 62 03 	sts	0x0362, r1
			led_toggle();
    1676:	0e 94 02 08 	call	0x1004	; 0x1004 <led_toggle>
		}
	}
}
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	bf 90       	pop	r11
    1688:	af 90       	pop	r10
    168a:	08 95       	ret

0000168c <heater_on>:
	sensor_init();
	pid_init();
}

void heater_on(double setpoint)
{
    168c:	af 92       	push	r10
    168e:	bf 92       	push	r11
    1690:	cf 92       	push	r12
    1692:	df 92       	push	r13
    1694:	ef 92       	push	r14
    1696:	ff 92       	push	r15
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	5b 01       	movw	r10, r22
    169e:	6c 01       	movw	r12, r24
	// no action if heater is already on
	if ((heater.state == HEATER_HEATING) || (heater.state == HEATER_REGULATED)) {
    16a0:	80 91 60 03 	lds	r24, 0x0360
    16a4:	82 50       	subi	r24, 0x02	; 2
    16a6:	82 30       	cpi	r24, 0x02	; 2
    16a8:	08 f4       	brcc	.+2      	; 0x16ac <heater_on+0x20>
    16aa:	4b c0       	rjmp	.+150    	; 0x1742 <heater_on+0xb6>
		return;
	}
	// turn on lower level functions
	sensor_on();						// enable the sensor
    16ac:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <sensor_on>
	sensor_start_reading();				// now start a reading
    16b0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <sensor_start_reading>
	pid.state = PID_ON;
}

void pid_reset()
{
	pid.output = 0;
    16b4:	0f 2e       	mov	r0, r31
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	ef 2e       	mov	r14, r31
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	ff 2e       	mov	r15, r31
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	0f 2f       	mov	r16, r31
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	1f 2f       	mov	r17, r31
    16c6:	f0 2d       	mov	r31, r0
    16c8:	e0 92 88 03 	sts	0x0388, r14
    16cc:	f0 92 89 03 	sts	0x0389, r15
    16d0:	00 93 8a 03 	sts	0x038A, r16
    16d4:	10 93 8b 03 	sts	0x038B, r17
	pid.integral = PID_INITIAL_INTEGRAL;
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	a8 e4       	ldi	r26, 0x48	; 72
    16de:	b3 e4       	ldi	r27, 0x43	; 67
    16e0:	80 93 9c 03 	sts	0x039C, r24
    16e4:	90 93 9d 03 	sts	0x039D, r25
    16e8:	a0 93 9e 03 	sts	0x039E, r26
    16ec:	b0 93 9f 03 	sts	0x039F, r27
	pid.prev_error = 0;
    16f0:	e0 92 98 03 	sts	0x0398, r14
    16f4:	f0 92 99 03 	sts	0x0399, r15
    16f8:	00 93 9a 03 	sts	0x039A, r16
    16fc:	10 93 9b 03 	sts	0x039B, r17
	}
	// turn on lower level functions
	sensor_on();						// enable the sensor
	sensor_start_reading();				// now start a reading
	pid_reset();
	pwm_on(PWM_FREQUENCY, 0);			// duty cycle will be set by PID loop
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	8a e7       	ldi	r24, 0x7A	; 122
    1706:	94 e4       	ldi	r25, 0x44	; 68
    1708:	a8 01       	movw	r20, r16
    170a:	97 01       	movw	r18, r14
    170c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pwm_on>

	// initialize values for a heater cycle
	heater.setpoint = setpoint;
    1710:	a0 92 6a 03 	sts	0x036A, r10
    1714:	b0 92 6b 03 	sts	0x036B, r11
    1718:	c0 92 6c 03 	sts	0x036C, r12
    171c:	d0 92 6d 03 	sts	0x036D, r13
	heater.hysteresis = 0;
    1720:	10 92 63 03 	sts	0x0363, r1
	heater.bad_reading_count = 0;
    1724:	10 92 65 03 	sts	0x0365, r1
	heater.regulation_timer = 0;		// reset timeouts
    1728:	e0 92 72 03 	sts	0x0372, r14
    172c:	f0 92 73 03 	sts	0x0373, r15
    1730:	00 93 74 03 	sts	0x0374, r16
    1734:	10 93 75 03 	sts	0x0375, r17
	heater.state = HEATER_HEATING;
    1738:	82 e0       	ldi	r24, 0x02	; 2
    173a:	80 93 60 03 	sts	0x0360, r24
	led_off();
    173e:	0e 94 00 08 	call	0x1000	; 0x1000 <led_off>
}
    1742:	1f 91       	pop	r17
    1744:	0f 91       	pop	r16
    1746:	ff 90       	pop	r15
    1748:	ef 90       	pop	r14
    174a:	df 90       	pop	r13
    174c:	cf 90       	pop	r12
    174e:	bf 90       	pop	r11
    1750:	af 90       	pop	r10
    1752:	08 95       	ret

00001754 <heater_init>:
 */
void heater_init()
{ 
	// initialize heater, start PID and PWM
	// note: PWM and ADC are initialized as part of the device init
	memset(&heater, 0, sizeof(heater_t));
    1754:	86 e2       	ldi	r24, 0x26	; 38
    1756:	e0 e6       	ldi	r30, 0x60	; 96
    1758:	f3 e0       	ldi	r31, 0x03	; 3
    175a:	df 01       	movw	r26, r30
    175c:	1d 92       	st	X+, r1
    175e:	8a 95       	dec	r24
    1760:	e9 f7       	brne	.-6      	; 0x175c <heater_init+0x8>
	heater.regulation_range = HEATER_REGULATION_RANGE;
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a0 e4       	ldi	r26, 0x40	; 64
    1768:	b0 e4       	ldi	r27, 0x40	; 64
    176a:	80 93 6e 03 	sts	0x036E, r24
    176e:	90 93 6f 03 	sts	0x036F, r25
    1772:	a0 93 70 03 	sts	0x0370, r26
    1776:	b0 93 71 03 	sts	0x0371, r27
	heater.ambient_timeout = HEATER_AMBIENT_TIMEOUT;
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a4 eb       	ldi	r26, 0xB4	; 180
    1780:	b2 e4       	ldi	r27, 0x42	; 66
    1782:	80 93 76 03 	sts	0x0376, r24
    1786:	90 93 77 03 	sts	0x0377, r25
    178a:	a0 93 78 03 	sts	0x0378, r26
    178e:	b0 93 79 03 	sts	0x0379, r27
	heater.regulation_timeout = HEATER_REGULATION_TIMEOUT;
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	46 e9       	ldi	r20, 0x96	; 150
    1798:	53 e4       	ldi	r21, 0x43	; 67
    179a:	20 93 7a 03 	sts	0x037A, r18
    179e:	30 93 7b 03 	sts	0x037B, r19
    17a2:	40 93 7c 03 	sts	0x037C, r20
    17a6:	50 93 7d 03 	sts	0x037D, r21
	heater.ambient_temperature = HEATER_AMBIENT_TEMPERATURE;
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	a0 e2       	ldi	r26, 0x20	; 32
    17b0:	b2 e4       	ldi	r27, 0x42	; 66
    17b2:	80 93 7e 03 	sts	0x037E, r24
    17b6:	90 93 7f 03 	sts	0x037F, r25
    17ba:	a0 93 80 03 	sts	0x0380, r26
    17be:	b0 93 81 03 	sts	0x0381, r27
	heater.overheat_temperature = HEATER_OVERHEAT_TEMPERATURE;
    17c2:	20 93 82 03 	sts	0x0382, r18
    17c6:	30 93 83 03 	sts	0x0383, r19
    17ca:	40 93 84 03 	sts	0x0384, r20
    17ce:	50 93 85 03 	sts	0x0385, r21
	heater.bad_reading_max = HEATER_BAD_READING_MAX;
    17d2:	85 e0       	ldi	r24, 0x05	; 5
    17d4:	80 93 64 03 	sts	0x0364, r24
	sensor_init();
    17d8:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <sensor_init>
	pid_init();
    17dc:	0e 94 c5 09 	call	0x138a	; 0x138a <pid_init>
}
    17e0:	08 95       	ret

000017e2 <sensor_on>:
	// note: there are no bits to set to outputs in this initialization
}

void sensor_on()
{
	sensor.state = SENSOR_NO_DATA;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	80 93 b0 03 	sts	0x03B0, r24
}
    17e8:	08 95       	ret

000017ea <sensor_off>:

void sensor_off()
{
	sensor.state = SENSOR_OFF;
    17ea:	10 92 b0 03 	sts	0x03B0, r1
}
    17ee:	08 95       	ret

000017f0 <sensor_start_reading>:

void sensor_start_reading() 
{ 
	sensor.sample_idx = 0;
    17f0:	10 92 b2 03 	sts	0x03B2, r1
	sensor.code = SENSOR_TAKING_READING;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	80 93 b1 03 	sts	0x03B1, r24
}
    17fa:	08 95       	ret

000017fc <sensor_get_state>:

uint8_t sensor_get_state() { return (sensor.state);}
    17fc:	80 91 b0 03 	lds	r24, 0x03B0
    1800:	08 95       	ret

00001802 <sensor_get_code>:
uint8_t sensor_get_code() { return (sensor.code);}
    1802:	80 91 b1 03 	lds	r24, 0x03B1
    1806:	08 95       	ret

00001808 <sensor_get_temperature>:

double sensor_get_temperature() 
{ 
	if (sensor.state == SENSOR_HAS_DATA) { 
    1808:	80 91 b0 03 	lds	r24, 0x03B0
    180c:	83 30       	cpi	r24, 0x03	; 3
    180e:	29 f0       	breq	.+10     	; 0x181a <sensor_get_temperature+0x12>
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	99 e8       	ldi	r25, 0x89	; 137
    1816:	83 ec       	ldi	r24, 0xC3	; 195
    1818:	08 c0       	rjmp	.+16     	; 0x182a <sensor_get_temperature+0x22>
		return (sensor.temperature);
    181a:	70 91 b4 03 	lds	r23, 0x03B4
    181e:	60 91 b5 03 	lds	r22, 0x03B5
    1822:	90 91 b6 03 	lds	r25, 0x03B6
    1826:	80 91 b7 03 	lds	r24, 0x03B7
	} else {
		return (LESS_THAN_ZERO);	// an impossible temperature value
	}
}
    182a:	27 2f       	mov	r18, r23
    182c:	36 2f       	mov	r19, r22
    182e:	49 2f       	mov	r20, r25
    1830:	58 2f       	mov	r21, r24
    1832:	b9 01       	movw	r22, r18
    1834:	ca 01       	movw	r24, r20
    1836:	08 95       	ret

00001838 <sensor_callback>:
 *	It's set up to collect 9 samples at 10 ms intervals to serve a 100ms heater 
 *	loop. Each sampling interval must be requested explicitly by calling 
 *	sensor_start_sample(). It does not free-run.
 */
void sensor_callback()
{
    1838:	2f 92       	push	r2
    183a:	3f 92       	push	r3
    183c:	4f 92       	push	r4
    183e:	5f 92       	push	r5
    1840:	7f 92       	push	r7
    1842:	8f 92       	push	r8
    1844:	9f 92       	push	r9
    1846:	af 92       	push	r10
    1848:	bf 92       	push	r11
    184a:	cf 92       	push	r12
    184c:	df 92       	push	r13
    184e:	ef 92       	push	r14
    1850:	ff 92       	push	r15
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	28 97       	sbiw	r28, 0x08	; 8
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61
	// cases where you don't execute the callback:
	if ((sensor.state == SENSOR_OFF) || (sensor.code != SENSOR_TAKING_READING)) {
    186a:	80 91 b0 03 	lds	r24, 0x03B0
    186e:	88 23       	and	r24, r24
    1870:	09 f4       	brne	.+2      	; 0x1874 <sensor_callback+0x3c>
    1872:	ec c0       	rjmp	.+472    	; 0x1a4c <sensor_callback+0x214>
    1874:	80 91 b1 03 	lds	r24, 0x03B1
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	09 f0       	breq	.+2      	; 0x187e <sensor_callback+0x46>
    187c:	e7 c0       	rjmp	.+462    	; 0x1a4c <sensor_callback+0x214>
		return;
	}

	// get a sample and return if still in the reading period
	sensor.sample[sensor.sample_idx] = _sensor_sample(ADC_CHANNEL);
    187e:	80 91 b2 03 	lds	r24, 0x03B2
    1882:	08 2f       	mov	r16, r24
    1884:	10 e0       	ldi	r17, 0x00	; 0
	double random_gain = 5;
	double random_variation = ((double)(rand() - RAND_MAX/2) / RAND_MAX/2) * random_gain;
	double reading = 60 + random_variation;
	return (((double)reading * SENSOR_SLOPE) + SENSOR_OFFSET);	// useful for testing the math
#else
	return (((double)adc_read() * SENSOR_SLOPE) + SENSOR_OFFSET);
    1886:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <adc_read>
	if ((sensor.state == SENSOR_OFF) || (sensor.code != SENSOR_TAKING_READING)) {
		return;
	}

	// get a sample and return if still in the reading period
	sensor.sample[sensor.sample_idx] = _sensor_sample(ADC_CHANNEL);
    188a:	00 0f       	add	r16, r16
    188c:	11 1f       	adc	r17, r17
    188e:	00 0f       	add	r16, r16
    1890:	11 1f       	adc	r17, r17
    1892:	04 53       	subi	r16, 0x34	; 52
    1894:	1c 4f       	sbci	r17, 0xFC	; 252
    1896:	a0 e0       	ldi	r26, 0x00	; 0
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	bc 01       	movw	r22, r24
    189c:	cd 01       	movw	r24, r26
    189e:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__floatunsisf>
    18a2:	26 e0       	ldi	r18, 0x06	; 6
    18a4:	3f ea       	ldi	r19, 0xAF	; 175
    18a6:	4a ef       	ldi	r20, 0xFA	; 250
    18a8:	5e e3       	ldi	r21, 0x3E	; 62
    18aa:	0e 94 1f 1b 	call	0x363e	; 0x363e <__mulsf3>
    18ae:	23 ed       	ldi	r18, 0xD3	; 211
    18b0:	31 eb       	ldi	r19, 0xB1	; 177
    18b2:	46 ed       	ldi	r20, 0xD6	; 214
    18b4:	5e e3       	ldi	r21, 0x3E	; 62
    18b6:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__subsf3>
    18ba:	d8 01       	movw	r26, r16
    18bc:	6d 93       	st	X+, r22
    18be:	7d 93       	st	X+, r23
    18c0:	8d 93       	st	X+, r24
    18c2:	9c 93       	st	X, r25
    18c4:	13 97       	sbiw	r26, 0x03	; 3
	if ((++sensor.sample_idx) < SENSOR_SAMPLES) { return; }
    18c6:	80 91 b2 03 	lds	r24, 0x03B2
    18ca:	8f 5f       	subi	r24, 0xFF	; 255
    18cc:	80 93 b2 03 	sts	0x03B2, r24
    18d0:	84 31       	cpi	r24, 0x14	; 20
    18d2:	08 f4       	brcc	.+2      	; 0x18d6 <sensor_callback+0x9e>
    18d4:	bb c0       	rjmp	.+374    	; 0x1a4c <sensor_callback+0x214>

	// process the array to clean up samples
	double mean;
	sensor.std_dev = std_dev(sensor.sample, SENSOR_SAMPLES, &mean);
    18d6:	8c ec       	ldi	r24, 0xCC	; 204
    18d8:	93 e0       	ldi	r25, 0x03	; 3
    18da:	64 e1       	ldi	r22, 0x14	; 20
    18dc:	ae 01       	movw	r20, r28
    18de:	4f 5f       	subi	r20, 0xFF	; 255
    18e0:	5f 4f       	sbci	r21, 0xFF	; 255
    18e2:	0e 94 83 02 	call	0x506	; 0x506 <std_dev>
    18e6:	7b 01       	movw	r14, r22
    18e8:	8c 01       	movw	r16, r24
    18ea:	60 93 b8 03 	sts	0x03B8, r22
    18ee:	70 93 b9 03 	sts	0x03B9, r23
    18f2:	80 93 ba 03 	sts	0x03BA, r24
    18f6:	90 93 bb 03 	sts	0x03BB, r25
	if (sensor.std_dev > sensor.reading_variance_max) {
    18fa:	20 91 c0 03 	lds	r18, 0x03C0
    18fe:	30 91 c1 03 	lds	r19, 0x03C1
    1902:	40 91 c2 03 	lds	r20, 0x03C2
    1906:	50 91 c3 03 	lds	r21, 0x03C3
    190a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__gesf2>
    190e:	18 16       	cp	r1, r24
    1910:	24 f4       	brge	.+8      	; 0x191a <sensor_callback+0xe2>
		sensor.state = SENSOR_ERROR;
    1912:	82 e0       	ldi	r24, 0x02	; 2
    1914:	80 93 b0 03 	sts	0x03B0, r24
    1918:	97 c0       	rjmp	.+302    	; 0x1a48 <sensor_callback+0x210>
		sensor.code = SENSOR_ERROR_BAD_READINGS;
		return;
	}

	// reject the outlier samples and re-compute the average
	sensor.samples = 0;
    191a:	10 92 b3 03 	sts	0x03B3, r1
	sensor.temperature = 0;
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	a0 e0       	ldi	r26, 0x00	; 0
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	80 93 b4 03 	sts	0x03B4, r24
    192a:	90 93 b5 03 	sts	0x03B5, r25
    192e:	a0 93 b6 03 	sts	0x03B6, r26
    1932:	b0 93 b7 03 	sts	0x03B7, r27
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	9a 81       	ldd	r25, Y+2	; 0x02
    193a:	ab 81       	ldd	r26, Y+3	; 0x03
    193c:	bc 81       	ldd	r27, Y+4	; 0x04
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	9e 83       	std	Y+6, r25	; 0x06
    1942:	af 83       	std	Y+7, r26	; 0x07
    1944:	b8 87       	std	Y+8, r27	; 0x08
    1946:	c8 01       	movw	r24, r16
    1948:	b7 01       	movw	r22, r14
    194a:	20 91 bc 03 	lds	r18, 0x03BC
    194e:	30 91 bd 03 	lds	r19, 0x03BD
    1952:	40 91 be 03 	lds	r20, 0x03BE
    1956:	50 91 bf 03 	lds	r21, 0x03BF
    195a:	0e 94 1f 1b 	call	0x363e	; 0x363e <__mulsf3>
    195e:	1b 01       	movw	r2, r22
    1960:	2c 01       	movw	r4, r24
    1962:	9c ec       	ldi	r25, 0xCC	; 204
    1964:	89 2e       	mov	r8, r25
    1966:	93 e0       	ldi	r25, 0x03	; 3
    1968:	99 2e       	mov	r9, r25
    196a:	77 24       	eor	r7, r7
    196c:	0f 2e       	mov	r0, r31
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	ef 2e       	mov	r14, r31
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	ff 2e       	mov	r15, r31
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	0f 2f       	mov	r16, r31
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	1f 2f       	mov	r17, r31
    197e:	f0 2d       	mov	r31, r0
    1980:	d4 01       	movw	r26, r8
    1982:	ad 90       	ld	r10, X+
    1984:	bd 90       	ld	r11, X+
    1986:	cd 90       	ld	r12, X+
    1988:	dc 90       	ld	r13, X
    198a:	c6 01       	movw	r24, r12
    198c:	b5 01       	movw	r22, r10
    198e:	2d 81       	ldd	r18, Y+5	; 0x05
    1990:	3e 81       	ldd	r19, Y+6	; 0x06
    1992:	4f 81       	ldd	r20, Y+7	; 0x07
    1994:	58 85       	ldd	r21, Y+8	; 0x08
    1996:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__subsf3>
    199a:	9f 77       	andi	r25, 0x7F	; 127
    199c:	a2 01       	movw	r20, r4
    199e:	91 01       	movw	r18, r2
    19a0:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__cmpsf2>
    19a4:	88 23       	and	r24, r24
    19a6:	4c f4       	brge	.+18     	; 0x19ba <sensor_callback+0x182>
			sensor.temperature += sensor.sample[i];
    19a8:	c8 01       	movw	r24, r16
    19aa:	b7 01       	movw	r22, r14
    19ac:	a6 01       	movw	r20, r12
    19ae:	95 01       	movw	r18, r10
    19b0:	0e 94 6d 19 	call	0x32da	; 0x32da <__addsf3>
    19b4:	7b 01       	movw	r14, r22
    19b6:	8c 01       	movw	r16, r24
			sensor.samples++;
    19b8:	73 94       	inc	r7
    19ba:	e4 e0       	ldi	r30, 0x04	; 4
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	8e 0e       	add	r8, r30
    19c0:	9f 1e       	adc	r9, r31
	}

	// reject the outlier samples and re-compute the average
	sensor.samples = 0;
	sensor.temperature = 0;
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
    19c2:	fc e1       	ldi	r31, 0x1C	; 28
    19c4:	8f 16       	cp	r8, r31
    19c6:	f4 e0       	ldi	r31, 0x04	; 4
    19c8:	9f 06       	cpc	r9, r31
    19ca:	d1 f6       	brne	.-76     	; 0x1980 <sensor_callback+0x148>
    19cc:	70 92 b3 03 	sts	0x03B3, r7
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
			sensor.temperature += sensor.sample[i];
			sensor.samples++;
		}
	}
	sensor.temperature /= sensor.samples;// calculate mean temp w/o the outliers
    19d0:	67 2d       	mov	r22, r7
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	88 27       	eor	r24, r24
    19d6:	77 fd       	sbrc	r23, 7
    19d8:	80 95       	com	r24
    19da:	98 2f       	mov	r25, r24
    19dc:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__floatsisf>
    19e0:	9b 01       	movw	r18, r22
    19e2:	ac 01       	movw	r20, r24
    19e4:	c8 01       	movw	r24, r16
    19e6:	b7 01       	movw	r22, r14
    19e8:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__divsf3>
    19ec:	7b 01       	movw	r14, r22
    19ee:	8c 01       	movw	r16, r24
    19f0:	60 93 b4 03 	sts	0x03B4, r22
    19f4:	70 93 b5 03 	sts	0x03B5, r23
    19f8:	80 93 b6 03 	sts	0x03B6, r24
    19fc:	90 93 b7 03 	sts	0x03B7, r25
	sensor.state = SENSOR_HAS_DATA;
    1a00:	83 e0       	ldi	r24, 0x03	; 3
    1a02:	d8 2e       	mov	r13, r24
    1a04:	d0 92 b0 03 	sts	0x03B0, r13
	sensor.code = SENSOR_IDLE;			// we are done. Flip it back to idle
    1a08:	10 92 b1 03 	sts	0x03B1, r1

	// process the exception cases
	if (sensor.temperature > SENSOR_DISCONNECTED_TEMPERATURE) {
    1a0c:	c8 01       	movw	r24, r16
    1a0e:	b7 01       	movw	r22, r14
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	48 ec       	ldi	r20, 0xC8	; 200
    1a16:	53 e4       	ldi	r21, 0x43	; 67
    1a18:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__gesf2>
    1a1c:	18 16       	cp	r1, r24
    1a1e:	34 f4       	brge	.+12     	; 0x1a2c <sensor_callback+0x1f4>
		sensor.state = SENSOR_ERROR;
    1a20:	82 e0       	ldi	r24, 0x02	; 2
    1a22:	80 93 b0 03 	sts	0x03B0, r24
		sensor.code = SENSOR_ERROR_DISCONNECTED;
    1a26:	d0 92 b1 03 	sts	0x03B1, r13
    1a2a:	10 c0       	rjmp	.+32     	; 0x1a4c <sensor_callback+0x214>
	} else if (sensor.temperature < SENSOR_NO_POWER_TEMPERATURE) {
    1a2c:	c8 01       	movw	r24, r16
    1a2e:	b7 01       	movw	r22, r14
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	50 ec       	ldi	r21, 0xC0	; 192
    1a38:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__cmpsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	34 f4       	brge	.+12     	; 0x1a4c <sensor_callback+0x214>
		sensor.state = SENSOR_ERROR;
    1a40:	82 e0       	ldi	r24, 0x02	; 2
    1a42:	80 93 b0 03 	sts	0x03B0, r24
		sensor.code = SENSOR_ERROR_NO_POWER;
    1a46:	84 e0       	ldi	r24, 0x04	; 4
    1a48:	80 93 b1 03 	sts	0x03B1, r24
	}
}
    1a4c:	28 96       	adiw	r28, 0x08	; 8
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	ff 90       	pop	r15
    1a62:	ef 90       	pop	r14
    1a64:	df 90       	pop	r13
    1a66:	cf 90       	pop	r12
    1a68:	bf 90       	pop	r11
    1a6a:	af 90       	pop	r10
    1a6c:	9f 90       	pop	r9
    1a6e:	8f 90       	pop	r8
    1a70:	7f 90       	pop	r7
    1a72:	5f 90       	pop	r5
    1a74:	4f 90       	pop	r4
    1a76:	3f 90       	pop	r3
    1a78:	2f 90       	pop	r2
    1a7a:	08 95       	ret

00001a7c <sensor_init>:
 * sensor_get_code()		- return latest sensor code
 * sensor_callback() 		- perform sensor sampling / reading
 */
void sensor_init()
{
	memset(&sensor, 0, sizeof(sensor_t));
    1a7c:	80 e7       	ldi	r24, 0x70	; 112
    1a7e:	e0 eb       	ldi	r30, 0xB0	; 176
    1a80:	f3 e0       	ldi	r31, 0x03	; 3
    1a82:	df 01       	movw	r26, r30
    1a84:	1d 92       	st	X+, r1
    1a86:	8a 95       	dec	r24
    1a88:	e9 f7       	brne	.-6      	; 0x1a84 <sensor_init+0x8>
	sensor.temperature = ABSOLUTE_ZERO;
    1a8a:	83 e3       	ldi	r24, 0x33	; 51
    1a8c:	93 e9       	ldi	r25, 0x93	; 147
    1a8e:	a8 e8       	ldi	r26, 0x88	; 136
    1a90:	b3 ec       	ldi	r27, 0xC3	; 195
    1a92:	80 93 b4 03 	sts	0x03B4, r24
    1a96:	90 93 b5 03 	sts	0x03B5, r25
    1a9a:	a0 93 b6 03 	sts	0x03B6, r26
    1a9e:	b0 93 b7 03 	sts	0x03B7, r27
	sensor.sample_variance_max = SENSOR_SAMPLE_VARIANCE_MAX;
    1aa2:	8d ec       	ldi	r24, 0xCD	; 205
    1aa4:	9c ec       	ldi	r25, 0xCC	; 204
    1aa6:	ac e8       	ldi	r26, 0x8C	; 140
    1aa8:	bf e3       	ldi	r27, 0x3F	; 63
    1aaa:	80 93 bc 03 	sts	0x03BC, r24
    1aae:	90 93 bd 03 	sts	0x03BD, r25
    1ab2:	a0 93 be 03 	sts	0x03BE, r26
    1ab6:	b0 93 bf 03 	sts	0x03BF, r27
	sensor.reading_variance_max = SENSOR_READING_VARIANCE_MAX;
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a0 ea       	ldi	r26, 0xA0	; 160
    1ac0:	b1 e4       	ldi	r27, 0x41	; 65
    1ac2:	80 93 c0 03 	sts	0x03C0, r24
    1ac6:	90 93 c1 03 	sts	0x03C1, r25
    1aca:	a0 93 c2 03 	sts	0x03C2, r26
    1ace:	b0 93 c3 03 	sts	0x03C3, r27
	sensor.disconnect_temperature = SENSOR_DISCONNECTED_TEMPERATURE;
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	a8 ec       	ldi	r26, 0xC8	; 200
    1ad8:	b3 e4       	ldi	r27, 0x43	; 67
    1ada:	80 93 c4 03 	sts	0x03C4, r24
    1ade:	90 93 c5 03 	sts	0x03C5, r25
    1ae2:	a0 93 c6 03 	sts	0x03C6, r26
    1ae6:	b0 93 c7 03 	sts	0x03C7, r27
	sensor.no_power_temperature = SENSOR_NO_POWER_TEMPERATURE;
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	a0 e0       	ldi	r26, 0x00	; 0
    1af0:	b0 ec       	ldi	r27, 0xC0	; 192
    1af2:	80 93 c8 03 	sts	0x03C8, r24
    1af6:	90 93 c9 03 	sts	0x03C9, r25
    1afa:	a0 93 ca 03 	sts	0x03CA, r26
    1afe:	b0 93 cb 03 	sts	0x03CB, r27
	// note: there are no bits to set to outputs in this initialization
}
    1b02:	08 95       	ret

00001b04 <_set_nul>:
 * _set_nul() - set nothing (returns SC_NOOP)
 * _set_ui8() - set value as 8 bit uint8_t value w/o unit conversion
 * _set_int() - set value as 32 bit integer w/o unit conversion
 * _set_dbl() - set value as double w/o unit conversion
 */
stat_t _set_nul(cmdObj_t *cmd) { return (STAT_NOOP);}
    1b04:	83 e0       	ldi	r24, 0x03	; 3
    1b06:	08 95       	ret

00001b08 <_get_nul>:
stat_t _get_nul(cmdObj_t *cmd) 
{ 
	cmd->type = TYPE_NULL;
    1b08:	21 e0       	ldi	r18, 0x01	; 1
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	26 83       	std	Z+6, r18	; 0x06
	return (STAT_NOOP);
}
    1b0e:	83 e0       	ldi	r24, 0x03	; 3
    1b10:	08 95       	ret

00001b12 <_get_ui8>:

stat_t _get_ui8(cmdObj_t *cmd)
{
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	8c 01       	movw	r16, r24
	cmd->value = (double)*((uint8_t *)pgm_read_word(&cfgArray[cmd->index].target));
    1b18:	fc 01       	movw	r30, r24
    1b1a:	94 81       	ldd	r25, Z+4	; 0x04
    1b1c:	85 e1       	ldi	r24, 0x15	; 21
    1b1e:	98 9f       	mul	r25, r24
    1b20:	c0 01       	movw	r24, r0
    1b22:	11 24       	eor	r1, r1
    1b24:	8c 59       	subi	r24, 0x9C	; 156
    1b26:	9e 4f       	sbci	r25, 0xFE	; 254
    1b28:	fc 01       	movw	r30, r24
    1b2a:	a5 91       	lpm	r26, Z+
    1b2c:	b4 91       	lpm	r27, Z+
    1b2e:	6c 91       	ld	r22, X
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__floatunsisf>
    1b3a:	f8 01       	movw	r30, r16
    1b3c:	67 83       	std	Z+7, r22	; 0x07
    1b3e:	70 87       	std	Z+8, r23	; 0x08
    1b40:	81 87       	std	Z+9, r24	; 0x09
    1b42:	92 87       	std	Z+10, r25	; 0x0a
	cmd->type = TYPE_INTEGER;
    1b44:	83 e0       	ldi	r24, 0x03	; 3
    1b46:	86 83       	std	Z+6, r24	; 0x06
	return (STAT_OK);
}
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	1f 91       	pop	r17
    1b4c:	0f 91       	pop	r16
    1b4e:	08 95       	ret

00001b50 <_set_ui8>:
stat_t _set_ui8(cmdObj_t *cmd)
{
    1b50:	ef 92       	push	r14
    1b52:	ff 92       	push	r15
    1b54:	0f 93       	push	r16
    1b56:	1f 93       	push	r17
    1b58:	8c 01       	movw	r16, r24
	*((uint8_t *)pgm_read_word(&cfgArray[cmd->index].target)) = cmd->value;
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	94 81       	ldd	r25, Z+4	; 0x04
    1b5e:	85 e1       	ldi	r24, 0x15	; 21
    1b60:	98 9f       	mul	r25, r24
    1b62:	f0 01       	movw	r30, r0
    1b64:	11 24       	eor	r1, r1
    1b66:	ec 59       	subi	r30, 0x9C	; 156
    1b68:	fe 4f       	sbci	r31, 0xFE	; 254
    1b6a:	e5 90       	lpm	r14, Z+
    1b6c:	f4 90       	lpm	r15, Z+
    1b6e:	f8 01       	movw	r30, r16
    1b70:	67 81       	ldd	r22, Z+7	; 0x07
    1b72:	70 85       	ldd	r23, Z+8	; 0x08
    1b74:	81 85       	ldd	r24, Z+9	; 0x09
    1b76:	92 85       	ldd	r25, Z+10	; 0x0a
    1b78:	0e 94 3d 1a 	call	0x347a	; 0x347a <__fixunssfsi>
    1b7c:	f7 01       	movw	r30, r14
    1b7e:	60 83       	st	Z, r22
	cmd->type = TYPE_INTEGER;
    1b80:	83 e0       	ldi	r24, 0x03	; 3
    1b82:	f8 01       	movw	r30, r16
    1b84:	86 83       	std	Z+6, r24	; 0x06
	return(STAT_OK);
}
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	ff 90       	pop	r15
    1b8e:	ef 90       	pop	r14
    1b90:	08 95       	ret

00001b92 <_get_int>:
stat_t _get_int(cmdObj_t *cmd)
{
    1b92:	0f 93       	push	r16
    1b94:	1f 93       	push	r17
    1b96:	8c 01       	movw	r16, r24
	cmd->value = (double)*((uint32_t *)pgm_read_word(&cfgArray[cmd->index].target));
    1b98:	fc 01       	movw	r30, r24
    1b9a:	94 81       	ldd	r25, Z+4	; 0x04
    1b9c:	85 e1       	ldi	r24, 0x15	; 21
    1b9e:	98 9f       	mul	r25, r24
    1ba0:	c0 01       	movw	r24, r0
    1ba2:	11 24       	eor	r1, r1
    1ba4:	8c 59       	subi	r24, 0x9C	; 156
    1ba6:	9e 4f       	sbci	r25, 0xFE	; 254
    1ba8:	fc 01       	movw	r30, r24
    1baa:	a5 91       	lpm	r26, Z+
    1bac:	b4 91       	lpm	r27, Z+
    1bae:	6d 91       	ld	r22, X+
    1bb0:	7d 91       	ld	r23, X+
    1bb2:	8d 91       	ld	r24, X+
    1bb4:	9c 91       	ld	r25, X
    1bb6:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__floatunsisf>
    1bba:	f8 01       	movw	r30, r16
    1bbc:	67 83       	std	Z+7, r22	; 0x07
    1bbe:	70 87       	std	Z+8, r23	; 0x08
    1bc0:	81 87       	std	Z+9, r24	; 0x09
    1bc2:	92 87       	std	Z+10, r25	; 0x0a
	cmd->type = TYPE_INTEGER;
    1bc4:	83 e0       	ldi	r24, 0x03	; 3
    1bc6:	86 83       	std	Z+6, r24	; 0x06
	return (STAT_OK);
}
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	08 95       	ret

00001bd0 <_set_int>:
stat_t _set_int(cmdObj_t *cmd)
{
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	8c 01       	movw	r16, r24
	*((uint32_t *)pgm_read_word(&cfgArray[cmd->index].target)) = cmd->value;
    1bda:	fc 01       	movw	r30, r24
    1bdc:	94 81       	ldd	r25, Z+4	; 0x04
    1bde:	85 e1       	ldi	r24, 0x15	; 21
    1be0:	98 9f       	mul	r25, r24
    1be2:	f0 01       	movw	r30, r0
    1be4:	11 24       	eor	r1, r1
    1be6:	ec 59       	subi	r30, 0x9C	; 156
    1be8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bea:	e5 90       	lpm	r14, Z+
    1bec:	f4 90       	lpm	r15, Z+
    1bee:	f8 01       	movw	r30, r16
    1bf0:	67 81       	ldd	r22, Z+7	; 0x07
    1bf2:	70 85       	ldd	r23, Z+8	; 0x08
    1bf4:	81 85       	ldd	r24, Z+9	; 0x09
    1bf6:	92 85       	ldd	r25, Z+10	; 0x0a
    1bf8:	0e 94 3d 1a 	call	0x347a	; 0x347a <__fixunssfsi>
    1bfc:	f7 01       	movw	r30, r14
    1bfe:	60 83       	st	Z, r22
    1c00:	71 83       	std	Z+1, r23	; 0x01
    1c02:	82 83       	std	Z+2, r24	; 0x02
    1c04:	93 83       	std	Z+3, r25	; 0x03
	cmd->type = TYPE_INTEGER;
    1c06:	83 e0       	ldi	r24, 0x03	; 3
    1c08:	f8 01       	movw	r30, r16
    1c0a:	86 83       	std	Z+6, r24	; 0x06
	return(STAT_OK);
}
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	ff 90       	pop	r15
    1c14:	ef 90       	pop	r14
    1c16:	08 95       	ret

00001c18 <_get_dbl>:
stat_t _get_dbl(cmdObj_t *cmd)
{
    1c18:	9c 01       	movw	r18, r24
	cmd->value = *((double *)pgm_read_word(&cfgArray[cmd->index].target));
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	94 81       	ldd	r25, Z+4	; 0x04
    1c1e:	85 e1       	ldi	r24, 0x15	; 21
    1c20:	98 9f       	mul	r25, r24
    1c22:	c0 01       	movw	r24, r0
    1c24:	11 24       	eor	r1, r1
    1c26:	8c 59       	subi	r24, 0x9C	; 156
    1c28:	9e 4f       	sbci	r25, 0xFE	; 254
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	a5 91       	lpm	r26, Z+
    1c2e:	b4 91       	lpm	r27, Z+
    1c30:	8d 91       	ld	r24, X+
    1c32:	9d 91       	ld	r25, X+
    1c34:	0d 90       	ld	r0, X+
    1c36:	bc 91       	ld	r27, X
    1c38:	a0 2d       	mov	r26, r0
    1c3a:	f9 01       	movw	r30, r18
    1c3c:	87 83       	std	Z+7, r24	; 0x07
    1c3e:	90 87       	std	Z+8, r25	; 0x08
    1c40:	a1 87       	std	Z+9, r26	; 0x09
    1c42:	b2 87       	std	Z+10, r27	; 0x0a
	cmd->type = TYPE_FLOAT;
    1c44:	84 e0       	ldi	r24, 0x04	; 4
    1c46:	86 83       	std	Z+6, r24	; 0x06
	return (STAT_OK);
}
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	08 95       	ret

00001c4c <_set_dbl>:
stat_t _set_dbl(cmdObj_t *cmd)
{
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	9c 01       	movw	r18, r24
	*((double *)pgm_read_word(&cfgArray[cmd->index].target)) = cmd->value;
    1c52:	fc 01       	movw	r30, r24
    1c54:	94 81       	ldd	r25, Z+4	; 0x04
    1c56:	85 e1       	ldi	r24, 0x15	; 21
    1c58:	98 9f       	mul	r25, r24
    1c5a:	c0 01       	movw	r24, r0
    1c5c:	11 24       	eor	r1, r1
    1c5e:	8c 59       	subi	r24, 0x9C	; 156
    1c60:	9e 4f       	sbci	r25, 0xFE	; 254
    1c62:	fc 01       	movw	r30, r24
    1c64:	c5 91       	lpm	r28, Z+
    1c66:	d4 91       	lpm	r29, Z+
    1c68:	f9 01       	movw	r30, r18
    1c6a:	87 81       	ldd	r24, Z+7	; 0x07
    1c6c:	90 85       	ldd	r25, Z+8	; 0x08
    1c6e:	a1 85       	ldd	r26, Z+9	; 0x09
    1c70:	b2 85       	ldd	r27, Z+10	; 0x0a
    1c72:	88 83       	st	Y, r24
    1c74:	99 83       	std	Y+1, r25	; 0x01
    1c76:	aa 83       	std	Y+2, r26	; 0x02
    1c78:	bb 83       	std	Y+3, r27	; 0x03
	cmd->type = TYPE_FLOAT;
    1c7a:	84 e0       	ldi	r24, 0x04	; 4
    1c7c:	86 83       	std	Z+6, r24	; 0x06
	return(STAT_OK);
}
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	08 95       	ret

00001c86 <cmd_reset_obj>:
	}
	((fptrCmd)(pgm_read_word(&cfgArray[cmd->index].get)))(cmd);	// populate the value
}
 
cmdObj_t *cmd_reset_obj(cmdObj_t *cmd)	// clear a single cmdObj structure
{
    1c86:	fc 01       	movw	r30, r24
	cmd->type = TYPE_EMPTY;				// selective clear is much faster than calling memset
    1c88:	16 82       	std	Z+6, r1	; 0x06
	cmd->index = 0;
    1c8a:	14 82       	std	Z+4, r1	; 0x04
	cmd->value = 0;
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	a0 e0       	ldi	r26, 0x00	; 0
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	87 83       	std	Z+7, r24	; 0x07
    1c96:	90 87       	std	Z+8, r25	; 0x08
    1c98:	a1 87       	std	Z+9, r26	; 0x09
    1c9a:	b2 87       	std	Z+10, r27	; 0x0a
	cmd->token[0] = NUL;
    1c9c:	13 86       	std	Z+11, r1	; 0x0b
	cmd->group[0] = NUL;
    1c9e:	11 8a       	std	Z+17, r1	; 0x11
	cmd->stringp = NULL;
    1ca0:	16 8a       	std	Z+22, r1	; 0x16
    1ca2:	15 8a       	std	Z+21, r1	; 0x15

	if (cmd->pv == NULL) { 				// set depth correctly
    1ca4:	a0 81       	ld	r26, Z
    1ca6:	b1 81       	ldd	r27, Z+1	; 0x01
    1ca8:	10 97       	sbiw	r26, 0x00	; 0
    1caa:	11 f4       	brne	.+4      	; 0x1cb0 <cmd_reset_obj+0x2a>
		cmd->depth = 0;
    1cac:	15 82       	std	Z+5, r1	; 0x05
    1cae:	09 c0       	rjmp	.+18     	; 0x1cc2 <cmd_reset_obj+0x3c>
	} else {
		if (cmd->pv->type == TYPE_PARENT) { 
    1cb0:	16 96       	adiw	r26, 0x06	; 6
    1cb2:	8c 91       	ld	r24, X
    1cb4:	16 97       	sbiw	r26, 0x06	; 6
    1cb6:	15 96       	adiw	r26, 0x05	; 5
    1cb8:	9c 91       	ld	r25, X
    1cba:	87 30       	cpi	r24, 0x07	; 7
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <cmd_reset_obj+0x3a>
			cmd->depth = cmd->pv->depth + 1;
    1cbe:	9f 5f       	subi	r25, 0xFF	; 255
		} else {
			cmd->depth = cmd->pv->depth;
    1cc0:	95 83       	std	Z+5, r25	; 0x05
		}
	}
	return (cmd);
}
    1cc2:	cf 01       	movw	r24, r30
    1cc4:	08 95       	ret

00001cc6 <cmd_read_NVM_value>:
//	int8_t nvm_byte_array[NVM_VALUE_LEN];
//	uint16_t nvm_address = cfg.nvm_profile_base + (cmd->index * NVM_VALUE_LEN);
//	(void)EEPROM_ReadBytes(nvm_address, nvm_byte_array, NVM_VALUE_LEN);
//	memcpy(&cmd->value, &nvm_byte_array, NVM_VALUE_LEN);
	return (STAT_OK);
}
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	08 95       	ret

00001cca <cmd_write_NVM_value>:
//		memcpy(&nvm_byte_array, &tmp, NVM_VALUE_LEN);
//		uint16_t nvm_address = cfg.nvm_profile_base + (cmd->index * NVM_VALUE_LEN);
//		(void)EEPROM_WriteBytes(nvm_address, nvm_byte_array, NVM_VALUE_LEN);
//	}
	return (STAT_OK);
}
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	08 95       	ret

00001cce <cmd_print_list>:
	}
}
*/

void cmd_print_list(uint8_t status, uint8_t text_flags, uint8_t json_flags)
{
    1cce:	98 2f       	mov	r25, r24
	if (kc.comm_mode == JSON_MODE) {
    1cd0:	80 91 da 02 	lds	r24, 0x02DA
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	69 f4       	brne	.+26     	; 0x1cf2 <cmd_print_list+0x24>
		switch (json_flags) {
    1cd8:	41 30       	cpi	r20, 0x01	; 1
    1cda:	19 f0       	breq	.+6      	; 0x1ce2 <cmd_print_list+0x14>
    1cdc:	42 30       	cpi	r20, 0x02	; 2
    1cde:	49 f4       	brne	.+18     	; 0x1cf2 <cmd_print_list+0x24>
    1ce0:	05 c0       	rjmp	.+10     	; 0x1cec <cmd_print_list+0x1e>
			case JSON_NO_PRINT: { break; } 
			case JSON_OBJECT_FORMAT: { json_print_object(cmd_body); break; }
    1ce2:	86 e9       	ldi	r24, 0x96	; 150
    1ce4:	94 e0       	ldi	r25, 0x04	; 4
    1ce6:	0e 94 52 13 	call	0x26a4	; 0x26a4 <json_print_object>
    1cea:	08 95       	ret
			case JSON_RESPONSE_FORMAT: { json_print_response(status); break; }
    1cec:	89 2f       	mov	r24, r25
    1cee:	0e 94 63 13 	call	0x26c6	; 0x26c6 <json_print_response>
    1cf2:	08 95       	ret

00001cf4 <cmd_add_float>:
	}
	return (NULL);
}

cmdObj_t *cmd_add_float(char *token, const double value)	// add a float object to the body
{
    1cf4:	ef 92       	push	r14
    1cf6:	ff 92       	push	r15
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	9c 01       	movw	r18, r24
    1d02:	7a 01       	movw	r14, r20
    1d04:	8b 01       	movw	r16, r22
    1d06:	c6 e9       	ldi	r28, 0x96	; 150
    1d08:	d4 e0       	ldi	r29, 0x04	; 4
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
	cmdObj_t *cmd = cmd_body;
	for (uint8_t i=0; i<CMD_BODY_LEN; i++) {
		if (cmd->type != TYPE_EMPTY) {
    1d0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d0e:	88 23       	and	r24, r24
    1d10:	49 f0       	breq	.+18     	; 0x1d24 <cmd_add_float+0x30>
			cmd = cmd->nx;
    1d12:	0a 80       	ldd	r0, Y+2	; 0x02
    1d14:	db 81       	ldd	r29, Y+3	; 0x03
    1d16:	c0 2d       	mov	r28, r0
}

cmdObj_t *cmd_add_float(char *token, const double value)	// add a float object to the body
{
	cmdObj_t *cmd = cmd_body;
	for (uint8_t i=0; i<CMD_BODY_LEN; i++) {
    1d18:	9f 5f       	subi	r25, 0xFF	; 255
    1d1a:	90 31       	cpi	r25, 0x10	; 16
    1d1c:	b9 f7       	brne	.-18     	; 0x1d0c <cmd_add_float+0x18>
    1d1e:	c0 e0       	ldi	r28, 0x00	; 0
    1d20:	d0 e0       	ldi	r29, 0x00	; 0
    1d22:	0d c0       	rjmp	.+26     	; 0x1d3e <cmd_add_float+0x4a>
		if (cmd->type != TYPE_EMPTY) {
			cmd = cmd->nx;
			continue;
		}
		strncpy(cmd->token, token, CMD_TOKEN_LEN);
    1d24:	ce 01       	movw	r24, r28
    1d26:	0b 96       	adiw	r24, 0x0b	; 11
    1d28:	b9 01       	movw	r22, r18
    1d2a:	45 e0       	ldi	r20, 0x05	; 5
    1d2c:	50 e0       	ldi	r21, 0x00	; 0
    1d2e:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <strncpy>
		cmd->value = value;
    1d32:	ef 82       	std	Y+7, r14	; 0x07
    1d34:	f8 86       	std	Y+8, r15	; 0x08
    1d36:	09 87       	std	Y+9, r16	; 0x09
    1d38:	1a 87       	std	Y+10, r17	; 0x0a
		cmd->type = TYPE_FLOAT;
    1d3a:	84 e0       	ldi	r24, 0x04	; 4
    1d3c:	8e 83       	std	Y+6, r24	; 0x06
		return (cmd);
	}
	return (NULL);
}
    1d3e:	ce 01       	movw	r24, r28
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	1f 91       	pop	r17
    1d46:	0f 91       	pop	r16
    1d48:	ff 90       	pop	r15
    1d4a:	ef 90       	pop	r14
    1d4c:	08 95       	ret

00001d4e <cmd_add_integer>:
	}
	return (NULL);
}

cmdObj_t *cmd_add_integer(char *token, const uint32_t value)// add an integer object to the body
{
    1d4e:	ef 92       	push	r14
    1d50:	ff 92       	push	r15
    1d52:	0f 93       	push	r16
    1d54:	1f 93       	push	r17
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	9c 01       	movw	r18, r24
    1d5c:	7a 01       	movw	r14, r20
    1d5e:	8b 01       	movw	r16, r22
    1d60:	c6 e9       	ldi	r28, 0x96	; 150
    1d62:	d4 e0       	ldi	r29, 0x04	; 4
    1d64:	90 e0       	ldi	r25, 0x00	; 0
	cmdObj_t *cmd = cmd_body;
	for (uint8_t i=0; i<CMD_BODY_LEN; i++) {
		if (cmd->type != TYPE_EMPTY) {
    1d66:	8e 81       	ldd	r24, Y+6	; 0x06
    1d68:	88 23       	and	r24, r24
    1d6a:	49 f0       	breq	.+18     	; 0x1d7e <cmd_add_integer+0x30>
			cmd = cmd->nx;
    1d6c:	0a 80       	ldd	r0, Y+2	; 0x02
    1d6e:	db 81       	ldd	r29, Y+3	; 0x03
    1d70:	c0 2d       	mov	r28, r0
}

cmdObj_t *cmd_add_integer(char *token, const uint32_t value)// add an integer object to the body
{
	cmdObj_t *cmd = cmd_body;
	for (uint8_t i=0; i<CMD_BODY_LEN; i++) {
    1d72:	9f 5f       	subi	r25, 0xFF	; 255
    1d74:	90 31       	cpi	r25, 0x10	; 16
    1d76:	b9 f7       	brne	.-18     	; 0x1d66 <cmd_add_integer+0x18>
    1d78:	c0 e0       	ldi	r28, 0x00	; 0
    1d7a:	d0 e0       	ldi	r29, 0x00	; 0
    1d7c:	11 c0       	rjmp	.+34     	; 0x1da0 <cmd_add_integer+0x52>
		if (cmd->type != TYPE_EMPTY) {
			cmd = cmd->nx;
			continue;
		}
		strncpy(cmd->token, token, CMD_TOKEN_LEN);
    1d7e:	ce 01       	movw	r24, r28
    1d80:	0b 96       	adiw	r24, 0x0b	; 11
    1d82:	b9 01       	movw	r22, r18
    1d84:	45 e0       	ldi	r20, 0x05	; 5
    1d86:	50 e0       	ldi	r21, 0x00	; 0
    1d88:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <strncpy>
		cmd->value = (double) value;
    1d8c:	c8 01       	movw	r24, r16
    1d8e:	b7 01       	movw	r22, r14
    1d90:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__floatunsisf>
    1d94:	6f 83       	std	Y+7, r22	; 0x07
    1d96:	78 87       	std	Y+8, r23	; 0x08
    1d98:	89 87       	std	Y+9, r24	; 0x09
    1d9a:	9a 87       	std	Y+10, r25	; 0x0a
		cmd->type = TYPE_INTEGER;
    1d9c:	83 e0       	ldi	r24, 0x03	; 3
    1d9e:	8e 83       	std	Y+6, r24	; 0x06
		return (cmd);
	}
	return (NULL);
}
    1da0:	ce 01       	movw	r24, r28
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	0f 91       	pop	r16
    1daa:	ff 90       	pop	r15
    1dac:	ef 90       	pop	r14
    1dae:	08 95       	ret

00001db0 <cmd_copy_string>:
	strcpy(cmd->token, "r");
	return (cmd_body);						// this is a convenience for calling routines
}

stat_t cmd_copy_string(cmdObj_t *cmd, const char *src)
{
    1db0:	ef 92       	push	r14
    1db2:	ff 92       	push	r15
    1db4:	0f 93       	push	r16
    1db6:	1f 93       	push	r17
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	ec 01       	movw	r28, r24
    1dbe:	f6 2e       	mov	r15, r22
    1dc0:	e7 2e       	mov	r14, r23
	if ((cmdStr.wp + strlen(src)) > CMD_SHARED_STRING_LEN) { return (STAT_BUFFER_FULL);}
    1dc2:	80 91 26 04 	lds	r24, 0x0426
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a6 2f       	mov	r26, r22
    1dca:	b7 2f       	mov	r27, r23
    1dcc:	fd 01       	movw	r30, r26
    1dce:	01 90       	ld	r0, Z+
    1dd0:	00 20       	and	r0, r0
    1dd2:	e9 f7       	brne	.-6      	; 0x1dce <cmd_copy_string+0x1e>
    1dd4:	31 97       	sbiw	r30, 0x01	; 1
    1dd6:	ea 1b       	sub	r30, r26
    1dd8:	fb 0b       	sbc	r31, r27
    1dda:	e8 0f       	add	r30, r24
    1ddc:	f9 1f       	adc	r31, r25
    1dde:	e1 35       	cpi	r30, 0x51	; 81
    1de0:	f1 05       	cpc	r31, r1
    1de2:	10 f0       	brcs	.+4      	; 0x1de8 <cmd_copy_string+0x38>
    1de4:	8d e0       	ldi	r24, 0x0D	; 13
    1de6:	18 c0       	rjmp	.+48     	; 0x1e18 <cmd_copy_string+0x68>
	char *dst = &cmdStr.string[cmdStr.wp];
    1de8:	8c 01       	movw	r16, r24
    1dea:	09 5d       	subi	r16, 0xD9	; 217
    1dec:	1b 4f       	sbci	r17, 0xFB	; 251
	strcpy(dst, src);						// copy string to current head position
    1dee:	c8 01       	movw	r24, r16
    1df0:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <strcpy>
	cmdStr.wp += strlen(src)+1;				// advance head for next string
    1df4:	ef 2d       	mov	r30, r15
    1df6:	fe 2d       	mov	r31, r14
    1df8:	df 01       	movw	r26, r30
    1dfa:	0d 90       	ld	r0, X+
    1dfc:	00 20       	and	r0, r0
    1dfe:	e9 f7       	brne	.-6      	; 0x1dfa <cmd_copy_string+0x4a>
    1e00:	11 97       	sbiw	r26, 0x01	; 1
    1e02:	ae 1b       	sub	r26, r30
    1e04:	bf 0b       	sbc	r27, r31
    1e06:	80 91 26 04 	lds	r24, 0x0426
    1e0a:	8f 5f       	subi	r24, 0xFF	; 255
    1e0c:	8a 0f       	add	r24, r26
    1e0e:	80 93 26 04 	sts	0x0426, r24
	cmd->stringp = (char (*)[])dst;
    1e12:	1e 8b       	std	Y+22, r17	; 0x16
    1e14:	0d 8b       	std	Y+21, r16	; 0x15
    1e16:	80 e0       	ldi	r24, 0x00	; 0
	return (STAT_OK);
}
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	ff 90       	pop	r15
    1e22:	ef 90       	pop	r14
    1e24:	08 95       	ret

00001e26 <cmd_copy_string_P>:

stat_t cmd_copy_string_P(cmdObj_t *cmd, const char *src_P)
{
    1e26:	ef 92       	push	r14
    1e28:	ff 92       	push	r15
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	c0 55       	subi	r28, 0x50	; 80
    1e38:	d0 40       	sbci	r29, 0x00	; 0
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	8c 01       	movw	r16, r24
	char buf[CMD_SHARED_STRING_LEN];
	strncpy_P(buf, src_P, CMD_SHARED_STRING_LEN);
    1e46:	7e 01       	movw	r14, r28
    1e48:	08 94       	sec
    1e4a:	e1 1c       	adc	r14, r1
    1e4c:	f1 1c       	adc	r15, r1
    1e4e:	c7 01       	movw	r24, r14
    1e50:	40 e5       	ldi	r20, 0x50	; 80
    1e52:	50 e0       	ldi	r21, 0x00	; 0
    1e54:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <strncpy_P>
	return (cmd_copy_string(cmd, buf));
    1e58:	c8 01       	movw	r24, r16
    1e5a:	b7 01       	movw	r22, r14
    1e5c:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <cmd_copy_string>
}
    1e60:	c0 5b       	subi	r28, 0xB0	; 176
    1e62:	df 4f       	sbci	r29, 0xFF	; 255
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	cd bf       	out	0x3d, r28	; 61
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	1f 91       	pop	r17
    1e74:	0f 91       	pop	r16
    1e76:	ff 90       	pop	r15
    1e78:	ef 90       	pop	r14
    1e7a:	08 95       	ret

00001e7c <cmd_reset_list>:
	return (cmd);
}

cmdObj_t *cmd_reset_list()					// clear the header and response body
{
	cmdStr.wp = 0;							// reset the shared string
    1e7c:	10 92 26 04 	sts	0x0426, r1
    1e80:	e8 e6       	ldi	r30, 0x68	; 104
    1e82:	f4 e0       	ldi	r31, 0x04	; 4
	cmdObj_t *cmd = cmd_list;				// set up linked list and initialize elements	
	for (uint8_t i=0; i<CMD_LIST_LEN; i++, cmd++) {
		cmd->pv = (cmd-1);					// the ends are bogus & corrected later
		cmd->nx = (cmd+1);
		cmd->index = 0;
		cmd->depth = 1;						// header and footer are corrected later
    1e84:	21 e0       	ldi	r18, 0x01	; 1
cmdObj_t *cmd_reset_list()					// clear the header and response body
{
	cmdStr.wp = 0;							// reset the shared string
	cmdObj_t *cmd = cmd_list;				// set up linked list and initialize elements	
	for (uint8_t i=0; i<CMD_LIST_LEN; i++, cmd++) {
		cmd->pv = (cmd-1);					// the ends are bogus & corrected later
    1e86:	f0 8f       	std	Z+24, r31	; 0x18
    1e88:	e7 8b       	std	Z+23, r30	; 0x17
		cmd->nx = (cmd+1);
    1e8a:	cf 01       	movw	r24, r30
    1e8c:	8e 96       	adiw	r24, 0x2e	; 46
    1e8e:	92 8f       	std	Z+26, r25	; 0x1a
    1e90:	81 8f       	std	Z+25, r24	; 0x19
		cmd->index = 0;
    1e92:	13 8e       	std	Z+27, r1	; 0x1b
		cmd->depth = 1;						// header and footer are corrected later
    1e94:	24 8f       	std	Z+28, r18	; 0x1c
		cmd->type = TYPE_EMPTY;
    1e96:	15 8e       	std	Z+29, r1	; 0x1d
		cmd->token[0] = NUL;
    1e98:	12 a2       	std	Z+34, r1	; 0x22
    1e9a:	77 96       	adiw	r30, 0x17	; 23

cmdObj_t *cmd_reset_list()					// clear the header and response body
{
	cmdStr.wp = 0;							// reset the shared string
	cmdObj_t *cmd = cmd_list;				// set up linked list and initialize elements	
	for (uint8_t i=0; i<CMD_LIST_LEN; i++, cmd++) {
    1e9c:	86 e0       	ldi	r24, 0x06	; 6
    1e9e:	e6 30       	cpi	r30, 0x06	; 6
    1ea0:	f8 07       	cpc	r31, r24
    1ea2:	89 f7       	brne	.-30     	; 0x1e86 <cmd_reset_list+0xa>
		cmd->index = 0;
		cmd->depth = 1;						// header and footer are corrected later
		cmd->type = TYPE_EMPTY;
		cmd->token[0] = NUL;
	}
	(--cmd)->nx = NULL;
    1ea4:	13 82       	std	Z+3, r1	; 0x03
    1ea6:	12 82       	std	Z+2, r1	; 0x02
	cmd = cmd_list;							// setup response header element ('r')
	cmd->pv = NULL;
    1ea8:	10 92 80 04 	sts	0x0480, r1
    1eac:	10 92 7f 04 	sts	0x047F, r1
	cmd->depth = 0;
    1eb0:	10 92 84 04 	sts	0x0484, r1
	cmd->type = TYPE_PARENT;
    1eb4:	87 e0       	ldi	r24, 0x07	; 7
    1eb6:	80 93 85 04 	sts	0x0485, r24
	strcpy(cmd->token, "r");
    1eba:	8a e8       	ldi	r24, 0x8A	; 138
    1ebc:	94 e0       	ldi	r25, 0x04	; 4
    1ebe:	6a e3       	ldi	r22, 0x3A	; 58
    1ec0:	72 e0       	ldi	r23, 0x02	; 2
    1ec2:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <strcpy>
	return (cmd_body);						// this is a convenience for calling routines
}
    1ec6:	86 e9       	ldi	r24, 0x96	; 150
    1ec8:	94 e0       	ldi	r25, 0x04	; 4
    1eca:	08 95       	ret

00001ecc <cmd_get>:
	ritorno(cmd_index_lt_max(cmd->index));	// validate index or return
	return (((fptrCmd)(pgm_read_word(&cfgArray[cmd->index].set)))(cmd));
}

stat_t cmd_get(cmdObj_t *cmd)
{
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	ec 01       	movw	r28, r24
	ritorno(cmd_index_lt_max(cmd->index));	// validate index or return
    1ed2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed4:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <cmd_index_lt_max>
    1ed8:	80 93 5f 03 	sts	0x035F, r24
    1edc:	88 23       	and	r24, r24
    1ede:	69 f4       	brne	.+26     	; 0x1efa <cmd_get+0x2e>
	return (((fptrCmd)(pgm_read_word(&cfgArray[cmd->index].get)))(cmd));
    1ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee2:	95 e1       	ldi	r25, 0x15	; 21
    1ee4:	89 9f       	mul	r24, r25
    1ee6:	c0 01       	movw	r24, r0
    1ee8:	11 24       	eor	r1, r1
    1eea:	80 5a       	subi	r24, 0xA0	; 160
    1eec:	9e 4f       	sbci	r25, 0xFE	; 254
    1eee:	fc 01       	movw	r30, r24
    1ef0:	25 91       	lpm	r18, Z+
    1ef2:	34 91       	lpm	r19, Z+
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	f9 01       	movw	r30, r18
    1ef8:	09 95       	icall
}
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	08 95       	ret

00001f00 <cmd_set>:
 * cmd_get() 	- Build a cmdObj with the values from the target & return the value
 *			   	  Populate cmd body with single valued elements or groups (iterates)
 * cmd_persist()- persist value to NVM. Takes special cases into account
 */
stat_t cmd_set(cmdObj_t *cmd)
{
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	ec 01       	movw	r28, r24
	ritorno(cmd_index_lt_max(cmd->index));	// validate index or return
    1f06:	8c 81       	ldd	r24, Y+4	; 0x04
    1f08:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <cmd_index_lt_max>
    1f0c:	80 93 5f 03 	sts	0x035F, r24
    1f10:	88 23       	and	r24, r24
    1f12:	69 f4       	brne	.+26     	; 0x1f2e <cmd_set+0x2e>
	return (((fptrCmd)(pgm_read_word(&cfgArray[cmd->index].set)))(cmd));
    1f14:	8c 81       	ldd	r24, Y+4	; 0x04
    1f16:	95 e1       	ldi	r25, 0x15	; 21
    1f18:	89 9f       	mul	r24, r25
    1f1a:	c0 01       	movw	r24, r0
    1f1c:	11 24       	eor	r1, r1
    1f1e:	8e 59       	subi	r24, 0x9E	; 158
    1f20:	9e 4f       	sbci	r25, 0xFE	; 254
    1f22:	fc 01       	movw	r30, r24
    1f24:	25 91       	lpm	r18, Z+
    1f26:	34 91       	lpm	r19, Z+
    1f28:	ce 01       	movw	r24, r28
    1f2a:	f9 01       	movw	r30, r18
    1f2c:	09 95       	icall
}
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	08 95       	ret

00001f34 <cmd_get_cmdObj>:
 *	due to the cast to a double. Sometimes it's better to load an integer as a 
 *	string if all you want to do is display it.
 */

void cmd_get_cmdObj(cmdObj_t *cmd)
{
    1f34:	df 92       	push	r13
    1f36:	ef 92       	push	r14
    1f38:	ff 92       	push	r15
    1f3a:	0f 93       	push	r16
    1f3c:	1f 93       	push	r17
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	ec 01       	movw	r28, r24
	if (cmd_index_lt_max(cmd->index)) { return;}
    1f44:	8c 81       	ldd	r24, Y+4	; 0x04
    1f46:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <cmd_index_lt_max>
    1f4a:	88 23       	and	r24, r24
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <cmd_get_cmdObj+0x1c>
    1f4e:	49 c0       	rjmp	.+146    	; 0x1fe2 <cmd_get_cmdObj+0xae>
	index_t tmp = cmd->index;
    1f50:	0c 81       	ldd	r16, Y+4	; 0x04
	cmd_reset_obj(cmd);
    1f52:	ce 01       	movw	r24, r28
    1f54:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <cmd_reset_obj>
	cmd->index = tmp;
    1f58:	0c 83       	std	Y+4, r16	; 0x04

	strcpy_P(cmd->group, cfgArray[cmd->index].group); // group field is always terminated
    1f5a:	91 e1       	ldi	r25, 0x11	; 17
    1f5c:	e9 2e       	mov	r14, r25
    1f5e:	f1 2c       	mov	r15, r1
    1f60:	ec 0e       	add	r14, r28
    1f62:	fd 1e       	adc	r15, r29
    1f64:	85 e1       	ldi	r24, 0x15	; 21
    1f66:	d8 2e       	mov	r13, r24
    1f68:	0d 9d       	mul	r16, r13
    1f6a:	80 01       	movw	r16, r0
    1f6c:	11 24       	eor	r1, r1
    1f6e:	0b 5a       	subi	r16, 0xAB	; 171
    1f70:	1e 4f       	sbci	r17, 0xFE	; 254
    1f72:	c7 01       	movw	r24, r14
    1f74:	b8 01       	movw	r22, r16
    1f76:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <strcpy_P>
	strcpy_P(cmd->token, cfgArray[cmd->index].token); // token field is always terminated
    1f7a:	8e 01       	movw	r16, r28
    1f7c:	05 5f       	subi	r16, 0xF5	; 245
    1f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f80:	6c 81       	ldd	r22, Y+4	; 0x04
    1f82:	6d 9d       	mul	r22, r13
    1f84:	b0 01       	movw	r22, r0
    1f86:	11 24       	eor	r1, r1
    1f88:	67 5a       	subi	r22, 0xA7	; 167
    1f8a:	7e 4f       	sbci	r23, 0xFE	; 254
    1f8c:	c8 01       	movw	r24, r16
    1f8e:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <strcpy_P>

	// special processing for system groups and stripping tokens for groups
	if (cmd->group[0] != NUL) {
    1f92:	89 89       	ldd	r24, Y+17	; 0x11
    1f94:	88 23       	and	r24, r24
    1f96:	c1 f0       	breq	.+48     	; 0x1fc8 <cmd_get_cmdObj+0x94>
		if (pgm_read_byte(&cfgArray[cmd->index].flags) & F_NOSTRIP) {
    1f98:	ec 81       	ldd	r30, Y+4	; 0x04
    1f9a:	ed 9d       	mul	r30, r13
    1f9c:	f0 01       	movw	r30, r0
    1f9e:	11 24       	eor	r1, r1
    1fa0:	e1 5a       	subi	r30, 0xA1	; 161
    1fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa4:	e4 91       	lpm	r30, Z+
    1fa6:	e2 ff       	sbrs	r30, 2
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <cmd_get_cmdObj+0x7a>
			cmd->group[0] = NUL;
    1faa:	19 8a       	std	Y+17, r1	; 0x11
    1fac:	0d c0       	rjmp	.+26     	; 0x1fc8 <cmd_get_cmdObj+0x94>
		} else {
			strcpy(cmd->token, &cmd->token[strlen(cmd->group)]); // strip group from the token
    1fae:	f7 01       	movw	r30, r14
    1fb0:	01 90       	ld	r0, Z+
    1fb2:	00 20       	and	r0, r0
    1fb4:	e9 f7       	brne	.-6      	; 0x1fb0 <cmd_get_cmdObj+0x7c>
    1fb6:	ee 19       	sub	r30, r14
    1fb8:	ff 09       	sbc	r31, r15
    1fba:	3a 96       	adiw	r30, 0x0a	; 10
    1fbc:	ec 0f       	add	r30, r28
    1fbe:	fd 1f       	adc	r31, r29
    1fc0:	c8 01       	movw	r24, r16
    1fc2:	bf 01       	movw	r22, r30
    1fc4:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <strcpy>
		}
	}
	((fptrCmd)(pgm_read_word(&cfgArray[cmd->index].get)))(cmd);	// populate the value
    1fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fca:	95 e1       	ldi	r25, 0x15	; 21
    1fcc:	89 9f       	mul	r24, r25
    1fce:	c0 01       	movw	r24, r0
    1fd0:	11 24       	eor	r1, r1
    1fd2:	80 5a       	subi	r24, 0xA0	; 160
    1fd4:	9e 4f       	sbci	r25, 0xFE	; 254
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	25 91       	lpm	r18, Z+
    1fda:	34 91       	lpm	r19, Z+
    1fdc:	ce 01       	movw	r24, r28
    1fde:	f9 01       	movw	r30, r18
    1fe0:	09 95       	icall
}
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ff 90       	pop	r15
    1fec:	ef 90       	pop	r14
    1fee:	df 90       	pop	r13
    1ff0:	08 95       	ret

00001ff2 <cmd_get_index>:
 * 
 * cmd_get_index() is the most expensive routine in the whole config. It does a linear table scan 
 * of the PROGMEM strings, which of course could be further optimized with indexes or hashing.
 */
index_t cmd_get_index(const char *group, const char *token)
{
    1ff2:	ef 92       	push	r14
    1ff4:	ff 92       	push	r15
    1ff6:	0f 93       	push	r16
    1ff8:	1f 93       	push	r17
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <cmd_get_index+0xe>
    2000:	00 d0       	rcall	.+0      	; 0x2002 <cmd_get_index+0x10>
    2002:	00 d0       	rcall	.+0      	; 0x2004 <cmd_get_index+0x12>
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	9c 01       	movw	r18, r24
    200a:	7b 01       	movw	r14, r22
	char c;
	char str[CMD_TOKEN_LEN+1];
	strcpy(str, group);
    200c:	8e 01       	movw	r16, r28
    200e:	0f 5f       	subi	r16, 0xFF	; 255
    2010:	1f 4f       	sbci	r17, 0xFF	; 255
    2012:	c8 01       	movw	r24, r16
    2014:	b9 01       	movw	r22, r18
    2016:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <strcpy>
	strcat(str, token);
    201a:	c8 01       	movw	r24, r16
    201c:	b7 01       	movw	r22, r14
    201e:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <strcat>
    2022:	00 e0       	ldi	r16, 0x00	; 0

//	for (index_t i=0; i<CMD_INDEX_MAX; i++) {
	for (index_t i=0; cmd_index_lt_max(i); i++) {
		if ((c = (char)pgm_read_byte(&cfgArray[i].token[0])) != str[0]) {	// 1st character mismatch 
    2024:	25 e1       	ldi	r18, 0x15	; 21
    2026:	e2 2e       	mov	r14, r18
    2028:	f1 2c       	mov	r15, r1
    202a:	56 c0       	rjmp	.+172    	; 0x20d8 <cmd_get_index+0xe6>
    202c:	40 2f       	mov	r20, r16
    202e:	50 e0       	ldi	r21, 0x00	; 0
    2030:	4e 9d       	mul	r20, r14
    2032:	90 01       	movw	r18, r0
    2034:	4f 9d       	mul	r20, r15
    2036:	30 0d       	add	r19, r0
    2038:	5e 9d       	mul	r21, r14
    203a:	30 0d       	add	r19, r0
    203c:	11 24       	eor	r1, r1
    203e:	f9 01       	movw	r30, r18
    2040:	e7 5a       	subi	r30, 0xA7	; 167
    2042:	fe 4f       	sbci	r31, 0xFE	; 254
    2044:	e4 91       	lpm	r30, Z+
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	e8 17       	cp	r30, r24
    204a:	09 f0       	breq	.+2      	; 0x204e <cmd_get_index+0x5c>
    204c:	44 c0       	rjmp	.+136    	; 0x20d6 <cmd_get_index+0xe4>
			continue;
		}
		if ((c = (char)pgm_read_byte(&cfgArray[i].token[1])) == NUL) {
    204e:	f9 01       	movw	r30, r18
    2050:	e6 5a       	subi	r30, 0xA6	; 166
    2052:	fe 4f       	sbci	r31, 0xFE	; 254
    2054:	e4 91       	lpm	r30, Z+
    2056:	ee 23       	and	r30, r30
    2058:	21 f4       	brne	.+8      	; 0x2062 <cmd_get_index+0x70>
			if (str[1] == NUL) return(i);									// one character match
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	88 23       	and	r24, r24
    205e:	09 f4       	brne	.+2      	; 0x2062 <cmd_get_index+0x70>
    2060:	42 c0       	rjmp	.+132    	; 0x20e6 <cmd_get_index+0xf4>
		}
		if (c != str[1]) continue;											// 2nd character mismatch
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	e8 17       	cp	r30, r24
    2066:	09 f0       	breq	.+2      	; 0x206a <cmd_get_index+0x78>
    2068:	36 c0       	rjmp	.+108    	; 0x20d6 <cmd_get_index+0xe4>
		if ((c = (char)pgm_read_byte(&cfgArray[i].token[2])) == NUL) {
    206a:	4e 9d       	mul	r20, r14
    206c:	f0 01       	movw	r30, r0
    206e:	4f 9d       	mul	r20, r15
    2070:	f0 0d       	add	r31, r0
    2072:	5e 9d       	mul	r21, r14
    2074:	f0 0d       	add	r31, r0
    2076:	11 24       	eor	r1, r1
    2078:	e5 5a       	subi	r30, 0xA5	; 165
    207a:	fe 4f       	sbci	r31, 0xFE	; 254
    207c:	94 91       	lpm	r25, Z+
    207e:	99 23       	and	r25, r25
    2080:	19 f4       	brne	.+6      	; 0x2088 <cmd_get_index+0x96>
			if (str[2] == NUL) return(i);									// two character match
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	88 23       	and	r24, r24
    2086:	79 f1       	breq	.+94     	; 0x20e6 <cmd_get_index+0xf4>
		}
		if (c != str[2]) continue;											// 3rd character mismatch
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	98 17       	cp	r25, r24
    208c:	21 f5       	brne	.+72     	; 0x20d6 <cmd_get_index+0xe4>
		if ((c = (char)pgm_read_byte(&cfgArray[i].token[3])) == NUL) {
    208e:	4e 9d       	mul	r20, r14
    2090:	f0 01       	movw	r30, r0
    2092:	4f 9d       	mul	r20, r15
    2094:	f0 0d       	add	r31, r0
    2096:	5e 9d       	mul	r21, r14
    2098:	f0 0d       	add	r31, r0
    209a:	11 24       	eor	r1, r1
    209c:	e4 5a       	subi	r30, 0xA4	; 164
    209e:	fe 4f       	sbci	r31, 0xFE	; 254
    20a0:	94 91       	lpm	r25, Z+
    20a2:	99 23       	and	r25, r25
    20a4:	19 f4       	brne	.+6      	; 0x20ac <cmd_get_index+0xba>
			if (str[3] == NUL) return(i);									// three character match
    20a6:	8c 81       	ldd	r24, Y+4	; 0x04
    20a8:	88 23       	and	r24, r24
    20aa:	e9 f0       	breq	.+58     	; 0x20e6 <cmd_get_index+0xf4>
		}
		if (c != str[3]) continue;											// 4th character mismatch
    20ac:	8c 81       	ldd	r24, Y+4	; 0x04
    20ae:	98 17       	cp	r25, r24
    20b0:	91 f4       	brne	.+36     	; 0x20d6 <cmd_get_index+0xe4>
		if ((c = (char)pgm_read_byte(&cfgArray[i].token[4])) == NUL) {
    20b2:	4e 9d       	mul	r20, r14
    20b4:	f0 01       	movw	r30, r0
    20b6:	4f 9d       	mul	r20, r15
    20b8:	f0 0d       	add	r31, r0
    20ba:	5e 9d       	mul	r21, r14
    20bc:	f0 0d       	add	r31, r0
    20be:	11 24       	eor	r1, r1
    20c0:	e3 5a       	subi	r30, 0xA3	; 163
    20c2:	fe 4f       	sbci	r31, 0xFE	; 254
    20c4:	94 91       	lpm	r25, Z+
    20c6:	99 23       	and	r25, r25
    20c8:	19 f4       	brne	.+6      	; 0x20d0 <cmd_get_index+0xde>
			if (str[4] == NUL) return(i);									// four character match
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	88 23       	and	r24, r24
    20ce:	59 f0       	breq	.+22     	; 0x20e6 <cmd_get_index+0xf4>
		}
		if (c != str[4]) continue;											// 5th character mismatch
    20d0:	8d 81       	ldd	r24, Y+5	; 0x05
    20d2:	98 17       	cp	r25, r24
    20d4:	41 f0       	breq	.+16     	; 0x20e6 <cmd_get_index+0xf4>
	char str[CMD_TOKEN_LEN+1];
	strcpy(str, group);
	strcat(str, token);

//	for (index_t i=0; i<CMD_INDEX_MAX; i++) {
	for (index_t i=0; cmd_index_lt_max(i); i++) {
    20d6:	0f 5f       	subi	r16, 0xFF	; 255
    20d8:	80 2f       	mov	r24, r16
    20da:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <cmd_index_lt_max>
    20de:	88 23       	and	r24, r24
    20e0:	09 f0       	breq	.+2      	; 0x20e4 <cmd_get_index+0xf2>
    20e2:	a4 cf       	rjmp	.-184    	; 0x202c <cmd_get_index+0x3a>
    20e4:	0f ef       	ldi	r16, 0xFF	; 255
		}
		if (c != str[4]) continue;											// 5th character mismatch
		return (i);															// five character match
	}
	return (NO_MATCH);
}
    20e6:	80 2f       	mov	r24, r16
    20e8:	26 96       	adiw	r28, 0x06	; 6
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	1f 91       	pop	r17
    20fa:	0f 91       	pop	r16
    20fc:	ff 90       	pop	r15
    20fe:	ef 90       	pop	r14
    2100:	08 95       	ret

00002102 <cmd_add_string>:
	}
	return (NULL);
}

cmdObj_t *cmd_add_string(char *token, const char *string)	// add a string object to the body
{
    2102:	ef 92       	push	r14
    2104:	ff 92       	push	r15
    2106:	0f 93       	push	r16
    2108:	1f 93       	push	r17
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	9c 01       	movw	r18, r24
    2110:	7b 01       	movw	r14, r22
    2112:	c6 e9       	ldi	r28, 0x96	; 150
    2114:	d4 e0       	ldi	r29, 0x04	; 4
    2116:	90 e0       	ldi	r25, 0x00	; 0
	cmdObj_t *cmd = cmd_body;
	for (uint8_t i=0; i<CMD_BODY_LEN; i++) {
		if (cmd->type != TYPE_EMPTY) {
    2118:	8e 81       	ldd	r24, Y+6	; 0x06
    211a:	88 23       	and	r24, r24
    211c:	39 f0       	breq	.+14     	; 0x212c <cmd_add_string+0x2a>
			cmd = cmd->nx;
    211e:	0a 80       	ldd	r0, Y+2	; 0x02
    2120:	db 81       	ldd	r29, Y+3	; 0x03
    2122:	c0 2d       	mov	r28, r0
}

cmdObj_t *cmd_add_string(char *token, const char *string)	// add a string object to the body
{
	cmdObj_t *cmd = cmd_body;
	for (uint8_t i=0; i<CMD_BODY_LEN; i++) {
    2124:	9f 5f       	subi	r25, 0xFF	; 255
    2126:	90 31       	cpi	r25, 0x10	; 16
    2128:	b9 f7       	brne	.-18     	; 0x2118 <cmd_add_string+0x16>
    212a:	18 c0       	rjmp	.+48     	; 0x215c <cmd_add_string+0x5a>
		if (cmd->type != TYPE_EMPTY) {
			cmd = cmd->nx;
			continue;
		}
		strncpy(cmd->token, token, CMD_TOKEN_LEN);
    212c:	8e 01       	movw	r16, r28
    212e:	05 5f       	subi	r16, 0xF5	; 245
    2130:	1f 4f       	sbci	r17, 0xFF	; 255
    2132:	c8 01       	movw	r24, r16
    2134:	b9 01       	movw	r22, r18
    2136:	45 e0       	ldi	r20, 0x05	; 5
    2138:	50 e0       	ldi	r21, 0x00	; 0
    213a:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <strncpy>
		if (cmd_copy_string(cmd, string) != STAT_OK) { return (NULL);}
    213e:	ce 01       	movw	r24, r28
    2140:	b7 01       	movw	r22, r14
    2142:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <cmd_copy_string>
    2146:	88 23       	and	r24, r24
    2148:	49 f4       	brne	.+18     	; 0x215c <cmd_add_string+0x5a>
		cmd->index = cmd_get_index("", cmd->token);
    214a:	8c e3       	ldi	r24, 0x3C	; 60
    214c:	92 e0       	ldi	r25, 0x02	; 2
    214e:	b8 01       	movw	r22, r16
    2150:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <cmd_get_index>
    2154:	8c 83       	std	Y+4, r24	; 0x04
		cmd->type = TYPE_STRING;
    2156:	85 e0       	ldi	r24, 0x05	; 5
    2158:	8e 83       	std	Y+6, r24	; 0x06
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <cmd_add_string+0x5e>
		return (cmd);
    215c:	c0 e0       	ldi	r28, 0x00	; 0
    215e:	d0 e0       	ldi	r29, 0x00	; 0
	}
	return (NULL);
}
    2160:	ce 01       	movw	r24, r28
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	1f 91       	pop	r17
    2168:	0f 91       	pop	r16
    216a:	ff 90       	pop	r15
    216c:	ef 90       	pop	r14
    216e:	08 95       	ret

00002170 <cmd_add_message_P>:
{
	return(cmd_add_string("msg", string));
}

cmdObj_t *cmd_add_message_P(const char *string)	// conditionally add a message object to the body
{
    2170:	0f 93       	push	r16
    2172:	1f 93       	push	r17
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	c0 55       	subi	r28, 0x50	; 80
    217e:	d0 40       	sbci	r29, 0x00	; 0
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
	char message[CMD_MESSAGE_LEN]; 
	sprintf_P(message, string);
    218a:	00 d0       	rcall	.+0      	; 0x218c <cmd_add_message_P+0x1c>
    218c:	00 d0       	rcall	.+0      	; 0x218e <cmd_add_message_P+0x1e>
    218e:	8e 01       	movw	r16, r28
    2190:	0f 5f       	subi	r16, 0xFF	; 255
    2192:	1f 4f       	sbci	r17, 0xFF	; 255
    2194:	ed b7       	in	r30, 0x3d	; 61
    2196:	fe b7       	in	r31, 0x3e	; 62
    2198:	12 83       	std	Z+2, r17	; 0x02
    219a:	01 83       	std	Z+1, r16	; 0x01
    219c:	94 83       	std	Z+4, r25	; 0x04
    219e:	83 83       	std	Z+3, r24	; 0x03
    21a0:	0e 94 04 20 	call	0x4008	; 0x4008 <sprintf_P>
	return(cmd_add_string("msg", message));
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	8d e3       	ldi	r24, 0x3D	; 61
    21ae:	92 e0       	ldi	r25, 0x02	; 2
    21b0:	b8 01       	movw	r22, r16
    21b2:	0e 94 81 10 	call	0x2102	; 0x2102 <cmd_add_string>
}
    21b6:	c0 5b       	subi	r28, 0xB0	; 176
    21b8:	df 4f       	sbci	r29, 0xFF	; 255
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	08 95       	ret

000021ce <cmd_add_message>:
	sprintf_P(message, string);
	return(cmd_add_string(token, message));
}

cmdObj_t *cmd_add_message(const char *string)	// conditionally add a message object to the body
{
    21ce:	bc 01       	movw	r22, r24
	return(cmd_add_string("msg", string));
    21d0:	8d e3       	ldi	r24, 0x3D	; 61
    21d2:	92 e0       	ldi	r25, 0x02	; 2
    21d4:	0e 94 81 10 	call	0x2102	; 0x2102 <cmd_add_string>
}
    21d8:	08 95       	ret

000021da <cmd_add_string_P>:
	}
	return (NULL);
}

cmdObj_t *cmd_add_string_P(char *token, const char *string)
{
    21da:	ef 92       	push	r14
    21dc:	ff 92       	push	r15
    21de:	0f 93       	push	r16
    21e0:	1f 93       	push	r17
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	c0 55       	subi	r28, 0x50	; 80
    21ec:	d0 40       	sbci	r29, 0x00	; 0
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	8c 01       	movw	r16, r24
	char message[CMD_MESSAGE_LEN]; 
	sprintf_P(message, string);
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <cmd_add_string_P+0x22>
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <cmd_add_string_P+0x24>
    21fe:	7e 01       	movw	r14, r28
    2200:	08 94       	sec
    2202:	e1 1c       	adc	r14, r1
    2204:	f1 1c       	adc	r15, r1
    2206:	ed b7       	in	r30, 0x3d	; 61
    2208:	fe b7       	in	r31, 0x3e	; 62
    220a:	f2 82       	std	Z+2, r15	; 0x02
    220c:	e1 82       	std	Z+1, r14	; 0x01
    220e:	74 83       	std	Z+4, r23	; 0x04
    2210:	63 83       	std	Z+3, r22	; 0x03
    2212:	0e 94 04 20 	call	0x4008	; 0x4008 <sprintf_P>
	return(cmd_add_string(token, message));
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	c8 01       	movw	r24, r16
    2220:	b7 01       	movw	r22, r14
    2222:	0e 94 81 10 	call	0x2102	; 0x2102 <cmd_add_string>
}
    2226:	c0 5b       	subi	r28, 0xB0	; 176
    2228:	df 4f       	sbci	r29, 0xFF	; 255
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	1f 91       	pop	r17
    223a:	0f 91       	pop	r16
    223c:	ff 90       	pop	r15
    223e:	ef 90       	pop	r14
    2240:	08 95       	ret

00002242 <cmd_add_object>:
	strncpy_P(buf, src_P, CMD_SHARED_STRING_LEN);
	return (cmd_copy_string(cmd, buf));
}

cmdObj_t *cmd_add_object(char *token)		// add an object to the body using a token
{
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	bc 01       	movw	r22, r24
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	c6 e9       	ldi	r28, 0x96	; 150
    224c:	d4 e0       	ldi	r29, 0x04	; 4
	cmdObj_t *cmd = cmd_body;
	for (uint8_t i=0; i<CMD_BODY_LEN; i++) {
		if (cmd->type != TYPE_EMPTY) {
    224e:	8e 81       	ldd	r24, Y+6	; 0x06
    2250:	88 23       	and	r24, r24
    2252:	39 f0       	breq	.+14     	; 0x2262 <cmd_add_object+0x20>
			cmd = cmd->nx;
    2254:	0a 80       	ldd	r0, Y+2	; 0x02
    2256:	db 81       	ldd	r29, Y+3	; 0x03
    2258:	c0 2d       	mov	r28, r0
}

cmdObj_t *cmd_add_object(char *token)		// add an object to the body using a token
{
	cmdObj_t *cmd = cmd_body;
	for (uint8_t i=0; i<CMD_BODY_LEN; i++) {
    225a:	9f 5f       	subi	r25, 0xFF	; 255
    225c:	90 31       	cpi	r25, 0x10	; 16
    225e:	b9 f7       	brne	.-18     	; 0x224e <cmd_add_object+0xc>
    2260:	0b c0       	rjmp	.+22     	; 0x2278 <cmd_add_object+0x36>
		if (cmd->type != TYPE_EMPTY) {
			cmd = cmd->nx;
			continue;
		}
		// load the index from the token or die trying
		if ((cmd->index = cmd_get_index("",token)) == NO_MATCH) { return (NULL);}
    2262:	8c e3       	ldi	r24, 0x3C	; 60
    2264:	92 e0       	ldi	r25, 0x02	; 2
    2266:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <cmd_get_index>
    226a:	8c 83       	std	Y+4, r24	; 0x04
    226c:	8f 3f       	cpi	r24, 0xFF	; 255
    226e:	21 f0       	breq	.+8      	; 0x2278 <cmd_add_object+0x36>
		cmd_get_cmdObj(cmd);				// populate the object from the index
    2270:	ce 01       	movw	r24, r28
    2272:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <cmd_get_cmdObj>
    2276:	02 c0       	rjmp	.+4      	; 0x227c <cmd_add_object+0x3a>
		return (cmd);
    2278:	c0 e0       	ldi	r28, 0x00	; 0
    227a:	d0 e0       	ldi	r29, 0x00	; 0
	}
	return (NULL);
}
    227c:	ce 01       	movw	r24, r28
    227e:	df 91       	pop	r29
    2280:	cf 91       	pop	r28
    2282:	08 95       	ret

00002284 <cmd_group_is_prefixed>:
 *
 *	This little function deals with the fact that some groups don't use the parent 
 *	token as a prefix to the child elements; SR being a good example.
 */
uint8_t cmd_group_is_prefixed(char *group)
{
    2284:	bc 01       	movw	r22, r24
	if (strstr("sr",group) != NULL) {	// you can extend like this: "sr,sys,xyzzy"
    2286:	81 e4       	ldi	r24, 0x41	; 65
    2288:	92 e0       	ldi	r25, 0x02	; 2
    228a:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <strstr>
    228e:	9c 01       	movw	r18, r24
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	23 2b       	or	r18, r19
    2294:	09 f4       	brne	.+2      	; 0x2298 <cmd_group_is_prefixed+0x14>
    2296:	81 e0       	ldi	r24, 0x01	; 1
		return (false);
	}
	return (true);
}
    2298:	08 95       	ret

0000229a <_get_grp>:
 *	The sys group is an exception where the childern carry a blank group field, 
 *	even though the sys parent is labeled as a TYPE_PARENT.
 */

stat_t _get_grp(cmdObj_t *cmd)
{
    229a:	af 92       	push	r10
    229c:	bf 92       	push	r11
    229e:	cf 92       	push	r12
    22a0:	df 92       	push	r13
    22a2:	ef 92       	push	r14
    22a4:	ff 92       	push	r15
    22a6:	0f 93       	push	r16
    22a8:	1f 93       	push	r17
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <_get_grp+0x16>
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <_get_grp+0x18>
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	8c 01       	movw	r16, r24
	char *parent_group = cmd->token;		// token in the parent cmd object is the group
    22b8:	4b e0       	ldi	r20, 0x0B	; 11
    22ba:	c4 2e       	mov	r12, r20
    22bc:	d1 2c       	mov	r13, r1
    22be:	c8 0e       	add	r12, r24
    22c0:	d9 1e       	adc	r13, r25
	char group[CMD_GROUP_LEN+1];			// group string retrieved from cfgArray child
	cmd->type = TYPE_PARENT;				// make first object the parent 
    22c2:	87 e0       	ldi	r24, 0x07	; 7
    22c4:	f8 01       	movw	r30, r16
    22c6:	86 83       	std	Z+6, r24	; 0x06
    22c8:	ff 24       	eor	r15, r15
//	for (index_t i=0; i<=CMD_INDEX_END_SINGLES; i++) {
	for (index_t i=0; cmd_index_is_single(i); i++) {
		strcpy_P(group, cfgArray[i].group);  // don't need strncpy as it's always terminated
    22ca:	35 e1       	ldi	r19, 0x15	; 21
    22cc:	e3 2e       	mov	r14, r19
    22ce:	5e 01       	movw	r10, r28
    22d0:	08 94       	sec
    22d2:	a1 1c       	adc	r10, r1
    22d4:	b1 1c       	adc	r11, r1
    22d6:	16 c0       	rjmp	.+44     	; 0x2304 <_get_grp+0x6a>
    22d8:	fe 9c       	mul	r15, r14
    22da:	b0 01       	movw	r22, r0
    22dc:	11 24       	eor	r1, r1
    22de:	6b 5a       	subi	r22, 0xAB	; 171
    22e0:	7e 4f       	sbci	r23, 0xFE	; 254
    22e2:	c5 01       	movw	r24, r10
    22e4:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <strcpy_P>
		if (strcmp(parent_group, group) != 0) continue;
    22e8:	c6 01       	movw	r24, r12
    22ea:	b5 01       	movw	r22, r10
    22ec:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <strcmp>
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	39 f4       	brne	.+14     	; 0x2302 <_get_grp+0x68>
		(++cmd)->index = i;
    22f4:	09 5e       	subi	r16, 0xE9	; 233
    22f6:	1f 4f       	sbci	r17, 0xFF	; 255
    22f8:	f8 01       	movw	r30, r16
    22fa:	f4 82       	std	Z+4, r15	; 0x04
		cmd_get_cmdObj(cmd);
    22fc:	c8 01       	movw	r24, r16
    22fe:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <cmd_get_cmdObj>
{
	char *parent_group = cmd->token;		// token in the parent cmd object is the group
	char group[CMD_GROUP_LEN+1];			// group string retrieved from cfgArray child
	cmd->type = TYPE_PARENT;				// make first object the parent 
//	for (index_t i=0; i<=CMD_INDEX_END_SINGLES; i++) {
	for (index_t i=0; cmd_index_is_single(i); i++) {
    2302:	f3 94       	inc	r15
    2304:	8f 2d       	mov	r24, r15
    2306:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <cmd_index_is_single>
    230a:	88 23       	and	r24, r24
    230c:	29 f7       	brne	.-54     	; 0x22d8 <_get_grp+0x3e>
		if (strcmp(parent_group, group) != 0) continue;
		(++cmd)->index = i;
		cmd_get_cmdObj(cmd);
	}
	return (STAT_OK);
}
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	1f 91       	pop	r17
    231c:	0f 91       	pop	r16
    231e:	ff 90       	pop	r15
    2320:	ef 90       	pop	r14
    2322:	df 90       	pop	r13
    2324:	cf 90       	pop	r12
    2326:	bf 90       	pop	r11
    2328:	af 90       	pop	r10
    232a:	08 95       	ret

0000232c <cmd_persist>:
}

void cmd_persist(cmdObj_t *cmd)
{
#ifdef __ENABLE_PERSISTENCE	
	if (cmd_index_lt_groups(cmd->index) == false) return;
    232c:	fc 01       	movw	r30, r24
    232e:	84 81       	ldd	r24, Z+4	; 0x04
    2330:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <cmd_index_lt_groups>
	if (pgm_read_byte(&cfgArray[cmd->index].flags) & F_PERSIST) {
		cmd_write_NVM_value(cmd);
	}
#endif
	return;
}
    2334:	08 95       	ret

00002336 <_set_grp>:
 *
 *	This function serves JSON mode only as text mode shouldn't call it.
 */

stat_t _set_grp(cmdObj_t *cmd)
{
    2336:	1f 93       	push	r17
    2338:	cf 93       	push	r28
    233a:	df 93       	push	r29
    233c:	ec 01       	movw	r28, r24
	if (kc.comm_mode == TEXT_MODE) return (STAT_UNRECOGNIZED_COMMAND);
    233e:	80 91 da 02 	lds	r24, 0x02DA
    2342:	88 23       	and	r24, r24
    2344:	11 f4       	brne	.+4      	; 0x234a <_set_grp+0x14>
    2346:	88 e2       	ldi	r24, 0x28	; 40
    2348:	19 c0       	rjmp	.+50     	; 0x237c <_set_grp+0x46>
    234a:	10 e0       	ldi	r17, 0x00	; 0
	for (uint8_t i=0; i<CMD_MAX_OBJECTS; i++) {
		if ((cmd = cmd->nx) == NULL) break;
    234c:	0a 80       	ldd	r0, Y+2	; 0x02
    234e:	db 81       	ldd	r29, Y+3	; 0x03
    2350:	c0 2d       	mov	r28, r0
    2352:	20 97       	sbiw	r28, 0x00	; 0
    2354:	91 f0       	breq	.+36     	; 0x237a <_set_grp+0x44>
		if (cmd->type == TYPE_EMPTY) break;
    2356:	8e 81       	ldd	r24, Y+6	; 0x06
    2358:	88 23       	and	r24, r24
    235a:	79 f0       	breq	.+30     	; 0x237a <_set_grp+0x44>
		else if (cmd->type == TYPE_NULL)	// NULL means GET the value
    235c:	81 30       	cpi	r24, 0x01	; 1
    235e:	21 f4       	brne	.+8      	; 0x2368 <_set_grp+0x32>
			cmd_get(cmd);
    2360:	ce 01       	movw	r24, r28
    2362:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <cmd_get>
    2366:	06 c0       	rjmp	.+12     	; 0x2374 <_set_grp+0x3e>
		else {
			cmd_set(cmd);
    2368:	ce 01       	movw	r24, r28
    236a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <cmd_set>
			cmd_persist(cmd);
    236e:	ce 01       	movw	r24, r28
    2370:	0e 94 96 11 	call	0x232c	; 0x232c <cmd_persist>
 */

stat_t _set_grp(cmdObj_t *cmd)
{
	if (kc.comm_mode == TEXT_MODE) return (STAT_UNRECOGNIZED_COMMAND);
	for (uint8_t i=0; i<CMD_MAX_OBJECTS; i++) {
    2374:	1f 5f       	subi	r17, 0xFF	; 255
    2376:	1f 30       	cpi	r17, 0x0F	; 15
    2378:	49 f7       	brne	.-46     	; 0x234c <_set_grp+0x16>
    237a:	80 e0       	ldi	r24, 0x00	; 0
			cmd_set(cmd);
			cmd_persist(cmd);
		}
	}
	return (STAT_OK);
}
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	1f 91       	pop	r17
    2382:	08 95       	ret

00002384 <cfg_init>:
 *
 *	You can assume the cfg struct has been zeroed by a hard reset. 
 *	Do not clear it as the version and build numbers have already been set by tg_init()
 */
void cfg_init()
{
    2384:	df 92       	push	r13
    2386:	ef 92       	push	r14
    2388:	ff 92       	push	r15
    238a:	0f 93       	push	r16
    238c:	1f 93       	push	r17
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
	cmdObj_t *cmd = cmd_reset_list();
    2392:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <cmd_reset_list>
    2396:	ec 01       	movw	r28, r24
	kc.comm_mode = JSON_MODE;				// initial value until EEPROM is read
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	80 93 da 02 	sts	0x02DA, r24
//	kc.nvm_base_addr = NVM_BASE_ADDR;
//	kc.nvm_profile_base = cfg.nvm_base_addr;
	cmd->value = true;
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	a0 e8       	ldi	r26, 0x80	; 128
    23a4:	bf e3       	ldi	r27, 0x3F	; 63
    23a6:	8f 83       	std	Y+7, r24	; 0x07
    23a8:	98 87       	std	Y+8, r25	; 0x08
    23aa:	a9 87       	std	Y+9, r26	; 0x09
    23ac:	ba 87       	std	Y+10, r27	; 0x0a

static stat_t _set_defa(cmdObj_t *cmd) 
{
	if (cmd->value != true) { return (STAT_OK);}	// failsafe. Must set true or no action occurs
//	rpt_print_initializing_message();
	for (cmd->index=0; cmd_index_is_single(cmd->index); cmd->index++) {
    23ae:	1c 82       	std	Y+4, r1	; 0x04
		if (pgm_read_byte(&cfgArray[cmd->index].flags) & F_INITIALIZE) {
			cmd->value = (double)pgm_read_float(&cfgArray[cmd->index].def_value);
			strcpy_P(cmd->token, cfgArray[cmd->index].token);
    23b0:	8e 01       	movw	r16, r28
    23b2:	05 5f       	subi	r16, 0xF5	; 245
    23b4:	1f 4f       	sbci	r17, 0xFF	; 255
static stat_t _set_defa(cmdObj_t *cmd) 
{
	if (cmd->value != true) { return (STAT_OK);}	// failsafe. Must set true or no action occurs
//	rpt_print_initializing_message();
	for (cmd->index=0; cmd_index_is_single(cmd->index); cmd->index++) {
		if (pgm_read_byte(&cfgArray[cmd->index].flags) & F_INITIALIZE) {
    23b6:	65 e1       	ldi	r22, 0x15	; 21
    23b8:	e6 2e       	mov	r14, r22
    23ba:	f1 2c       	mov	r15, r1
			cmd->value = (double)pgm_read_float(&cfgArray[cmd->index].def_value);
			strcpy_P(cmd->token, cfgArray[cmd->index].token);
    23bc:	55 e1       	ldi	r21, 0x15	; 21
    23be:	d5 2e       	mov	r13, r21
    23c0:	2c c0       	rjmp	.+88     	; 0x241a <cfg_init+0x96>
static stat_t _set_defa(cmdObj_t *cmd) 
{
	if (cmd->value != true) { return (STAT_OK);}	// failsafe. Must set true or no action occurs
//	rpt_print_initializing_message();
	for (cmd->index=0; cmd_index_is_single(cmd->index); cmd->index++) {
		if (pgm_read_byte(&cfgArray[cmd->index].flags) & F_INITIALIZE) {
    23c2:	4c 81       	ldd	r20, Y+4	; 0x04
    23c4:	84 2f       	mov	r24, r20
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	8e 9d       	mul	r24, r14
    23ca:	90 01       	movw	r18, r0
    23cc:	8f 9d       	mul	r24, r15
    23ce:	30 0d       	add	r19, r0
    23d0:	9e 9d       	mul	r25, r14
    23d2:	30 0d       	add	r19, r0
    23d4:	11 24       	eor	r1, r1
    23d6:	f9 01       	movw	r30, r18
    23d8:	e1 5a       	subi	r30, 0xA1	; 161
    23da:	fe 4f       	sbci	r31, 0xFE	; 254
    23dc:	e4 91       	lpm	r30, Z+
    23de:	e0 ff       	sbrs	r30, 0
    23e0:	19 c0       	rjmp	.+50     	; 0x2414 <cfg_init+0x90>
			cmd->value = (double)pgm_read_float(&cfgArray[cmd->index].def_value);
    23e2:	f9 01       	movw	r30, r18
    23e4:	ea 59       	subi	r30, 0x9A	; 154
    23e6:	fe 4f       	sbci	r31, 0xFE	; 254
    23e8:	85 91       	lpm	r24, Z+
    23ea:	95 91       	lpm	r25, Z+
    23ec:	a5 91       	lpm	r26, Z+
    23ee:	b4 91       	lpm	r27, Z+
    23f0:	8f 83       	std	Y+7, r24	; 0x07
    23f2:	98 87       	std	Y+8, r25	; 0x08
    23f4:	a9 87       	std	Y+9, r26	; 0x09
    23f6:	ba 87       	std	Y+10, r27	; 0x0a
			strcpy_P(cmd->token, cfgArray[cmd->index].token);
    23f8:	4d 9d       	mul	r20, r13
    23fa:	b0 01       	movw	r22, r0
    23fc:	11 24       	eor	r1, r1
    23fe:	67 5a       	subi	r22, 0xA7	; 167
    2400:	7e 4f       	sbci	r23, 0xFE	; 254
    2402:	c8 01       	movw	r24, r16
    2404:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <strcpy_P>
			cmd_set(cmd);
    2408:	ce 01       	movw	r24, r28
    240a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <cmd_set>
			cmd_persist(cmd);
    240e:	ce 01       	movw	r24, r28
    2410:	0e 94 96 11 	call	0x232c	; 0x232c <cmd_persist>

static stat_t _set_defa(cmdObj_t *cmd) 
{
	if (cmd->value != true) { return (STAT_OK);}	// failsafe. Must set true or no action occurs
//	rpt_print_initializing_message();
	for (cmd->index=0; cmd_index_is_single(cmd->index); cmd->index++) {
    2414:	8c 81       	ldd	r24, Y+4	; 0x04
    2416:	8f 5f       	subi	r24, 0xFF	; 255
    2418:	8c 83       	std	Y+4, r24	; 0x04
    241a:	8c 81       	ldd	r24, Y+4	; 0x04
    241c:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <cmd_index_is_single>
    2420:	88 23       	and	r24, r24
    2422:	79 f6       	brne	.-98     	; 0x23c2 <cfg_init+0x3e>
	kc.comm_mode = JSON_MODE;				// initial value until EEPROM is read
//	kc.nvm_base_addr = NVM_BASE_ADDR;
//	kc.nvm_profile_base = cfg.nvm_base_addr;
	cmd->value = true;
	_set_defa(cmd);		// this subroutine called from here and from the $defa=1 command
}
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	ff 90       	pop	r15
    242e:	ef 90       	pop	r14
    2430:	df 90       	pop	r13
    2432:	08 95       	ret

00002434 <json_serialize>:
 *	  - If a JSON object is empty represent it as {}
 *	    --- OR ---
 *	  - If a JSON object is empty omit the object altogether (no curlies)
 */
uint16_t json_serialize(cmdObj_t *cmd, char *out_buf)
{
    2434:	2f 92       	push	r2
    2436:	3f 92       	push	r3
    2438:	4f 92       	push	r4
    243a:	5f 92       	push	r5
    243c:	6f 92       	push	r6
    243e:	7f 92       	push	r7
    2440:	8f 92       	push	r8
    2442:	9f 92       	push	r9
    2444:	af 92       	push	r10
    2446:	bf 92       	push	r11
    2448:	cf 92       	push	r12
    244a:	df 92       	push	r13
    244c:	ef 92       	push	r14
    244e:	ff 92       	push	r15
    2450:	0f 93       	push	r16
    2452:	1f 93       	push	r17
    2454:	cf 93       	push	r28
    2456:	df 93       	push	r29
    2458:	8c 01       	movw	r16, r24
    245a:	6b 01       	movw	r12, r22
	char *str = out_buf;
	int8_t initial_depth = cmd->depth;
    245c:	dc 01       	movw	r26, r24
    245e:	15 96       	adiw	r26, 0x05	; 5
    2460:	ec 90       	ld	r14, X
	int8_t prev_depth = 0;
	uint8_t need_a_comma = false;

	*str++ = '{'; 								// write opening curly
    2462:	eb 01       	movw	r28, r22
    2464:	8b e7       	ldi	r24, 0x7B	; 123
    2466:	89 93       	st	Y+, r24
    2468:	ff 24       	eor	r15, r15
    246a:	90 e0       	ldi	r25, 0x00	; 0
	while (true) {
		if (cmd->type != TYPE_EMPTY) {
			if (need_a_comma) { *str++ = ',';}
			need_a_comma = true;
			str += sprintf(str, "\"%s\":", cmd->token);
    246c:	54 e4       	ldi	r21, 0x44	; 68
    246e:	25 2e       	mov	r2, r21
    2470:	52 e0       	ldi	r21, 0x02	; 2
    2472:	35 2e       	mov	r3, r21
			if (cmd->type == TYPE_NULL)	{ str += sprintf(str, "\"\"");}
			else if (cmd->type == TYPE_INTEGER)	{ str += sprintf(str, "%1.0f", cmd->value);}
			else if (cmd->type == TYPE_FLOAT)	{ str += sprintf(str, "%0.3f", cmd->value);}
			else if (cmd->type == TYPE_STRING)	{ str += sprintf(str, "\"%s\"",*cmd->stringp);}
			else if (cmd->type == TYPE_ARRAY)	{ str += sprintf(str, "[%s]",  *cmd->stringp);}
    2474:	4e e5       	ldi	r20, 0x5E	; 94
    2476:	44 2e       	mov	r4, r20
    2478:	42 e0       	ldi	r20, 0x02	; 2
    247a:	54 2e       	mov	r5, r20
			need_a_comma = true;
			str += sprintf(str, "\"%s\":", cmd->token);
			if (cmd->type == TYPE_NULL)	{ str += sprintf(str, "\"\"");}
			else if (cmd->type == TYPE_INTEGER)	{ str += sprintf(str, "%1.0f", cmd->value);}
			else if (cmd->type == TYPE_FLOAT)	{ str += sprintf(str, "%0.3f", cmd->value);}
			else if (cmd->type == TYPE_STRING)	{ str += sprintf(str, "\"%s\"",*cmd->stringp);}
    247c:	39 e5       	ldi	r19, 0x59	; 89
    247e:	63 2e       	mov	r6, r19
    2480:	32 e0       	ldi	r19, 0x02	; 2
    2482:	73 2e       	mov	r7, r19
			if (need_a_comma) { *str++ = ',';}
			need_a_comma = true;
			str += sprintf(str, "\"%s\":", cmd->token);
			if (cmd->type == TYPE_NULL)	{ str += sprintf(str, "\"\"");}
			else if (cmd->type == TYPE_INTEGER)	{ str += sprintf(str, "%1.0f", cmd->value);}
			else if (cmd->type == TYPE_FLOAT)	{ str += sprintf(str, "%0.3f", cmd->value);}
    2484:	23 e5       	ldi	r18, 0x53	; 83
    2486:	82 2e       	mov	r8, r18
    2488:	22 e0       	ldi	r18, 0x02	; 2
    248a:	92 2e       	mov	r9, r18
		if (cmd->type != TYPE_EMPTY) {
			if (need_a_comma) { *str++ = ',';}
			need_a_comma = true;
			str += sprintf(str, "\"%s\":", cmd->token);
			if (cmd->type == TYPE_NULL)	{ str += sprintf(str, "\"\"");}
			else if (cmd->type == TYPE_INTEGER)	{ str += sprintf(str, "%1.0f", cmd->value);}
    248c:	8d e4       	ldi	r24, 0x4D	; 77
    248e:	a8 2e       	mov	r10, r24
    2490:	82 e0       	ldi	r24, 0x02	; 2
    2492:	b8 2e       	mov	r11, r24
	int8_t prev_depth = 0;
	uint8_t need_a_comma = false;

	*str++ = '{'; 								// write opening curly
	while (true) {
		if (cmd->type != TYPE_EMPTY) {
    2494:	f8 01       	movw	r30, r16
    2496:	86 81       	ldd	r24, Z+6	; 0x06
    2498:	88 23       	and	r24, r24
    249a:	09 f4       	brne	.+2      	; 0x249e <json_serialize+0x6a>
    249c:	cb c0       	rjmp	.+406    	; 0x2634 <json_serialize+0x200>
			if (need_a_comma) { *str++ = ',';}
    249e:	99 23       	and	r25, r25
    24a0:	11 f0       	breq	.+4      	; 0x24a6 <json_serialize+0x72>
    24a2:	fc e2       	ldi	r31, 0x2C	; 44
    24a4:	f9 93       	st	Y+, r31
			need_a_comma = true;
			str += sprintf(str, "\"%s\":", cmd->token);
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <json_serialize+0x74>
    24a8:	00 d0       	rcall	.+0      	; 0x24aa <json_serialize+0x76>
    24aa:	00 d0       	rcall	.+0      	; 0x24ac <json_serialize+0x78>
    24ac:	ed b7       	in	r30, 0x3d	; 61
    24ae:	fe b7       	in	r31, 0x3e	; 62
    24b0:	31 96       	adiw	r30, 0x01	; 1
    24b2:	ad b7       	in	r26, 0x3d	; 61
    24b4:	be b7       	in	r27, 0x3e	; 62
    24b6:	12 96       	adiw	r26, 0x02	; 2
    24b8:	dc 93       	st	X, r29
    24ba:	ce 93       	st	-X, r28
    24bc:	11 97       	sbiw	r26, 0x01	; 1
    24be:	33 82       	std	Z+3, r3	; 0x03
    24c0:	22 82       	std	Z+2, r2	; 0x02
    24c2:	05 5f       	subi	r16, 0xF5	; 245
    24c4:	1f 4f       	sbci	r17, 0xFF	; 255
    24c6:	15 83       	std	Z+5, r17	; 0x05
    24c8:	04 83       	std	Z+4, r16	; 0x04
    24ca:	0b 50       	subi	r16, 0x0B	; 11
    24cc:	10 40       	sbci	r17, 0x00	; 0
    24ce:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <sprintf>
    24d2:	c8 0f       	add	r28, r24
    24d4:	d9 1f       	adc	r29, r25
			if (cmd->type == TYPE_NULL)	{ str += sprintf(str, "\"\"");}
    24d6:	f8 01       	movw	r30, r16
    24d8:	86 81       	ldd	r24, Z+6	; 0x06
    24da:	2d b7       	in	r18, 0x3d	; 61
    24dc:	3e b7       	in	r19, 0x3e	; 62
    24de:	2a 5f       	subi	r18, 0xFA	; 250
    24e0:	3f 4f       	sbci	r19, 0xFF	; 255
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	3e bf       	out	0x3e, r19	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	2d bf       	out	0x3d, r18	; 61
    24ec:	81 30       	cpi	r24, 0x01	; 1
    24ee:	39 f4       	brne	.+14     	; 0x24fe <json_serialize+0xca>
    24f0:	ce 01       	movw	r24, r28
    24f2:	6a e4       	ldi	r22, 0x4A	; 74
    24f4:	72 e0       	ldi	r23, 0x02	; 2
    24f6:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <strcpy>
    24fa:	22 96       	adiw	r28, 0x02	; 2
    24fc:	92 c0       	rjmp	.+292    	; 0x2622 <json_serialize+0x1ee>
			else if (cmd->type == TYPE_INTEGER)	{ str += sprintf(str, "%1.0f", cmd->value);}
    24fe:	83 30       	cpi	r24, 0x03	; 3
    2500:	a1 f4       	brne	.+40     	; 0x252a <json_serialize+0xf6>
    2502:	8d b7       	in	r24, 0x3d	; 61
    2504:	9e b7       	in	r25, 0x3e	; 62
    2506:	08 97       	sbiw	r24, 0x08	; 8
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	f8 94       	cli
    250c:	9e bf       	out	0x3e, r25	; 62
    250e:	0f be       	out	0x3f, r0	; 63
    2510:	8d bf       	out	0x3d, r24	; 61
    2512:	ed b7       	in	r30, 0x3d	; 61
    2514:	fe b7       	in	r31, 0x3e	; 62
    2516:	31 96       	adiw	r30, 0x01	; 1
    2518:	ad b7       	in	r26, 0x3d	; 61
    251a:	be b7       	in	r27, 0x3e	; 62
    251c:	12 96       	adiw	r26, 0x02	; 2
    251e:	dc 93       	st	X, r29
    2520:	ce 93       	st	-X, r28
    2522:	11 97       	sbiw	r26, 0x01	; 1
    2524:	b3 82       	std	Z+3, r11	; 0x03
    2526:	a2 82       	std	Z+2, r10	; 0x02
    2528:	16 c0       	rjmp	.+44     	; 0x2556 <json_serialize+0x122>
			else if (cmd->type == TYPE_FLOAT)	{ str += sprintf(str, "%0.3f", cmd->value);}
    252a:	84 30       	cpi	r24, 0x04	; 4
    252c:	61 f5       	brne	.+88     	; 0x2586 <json_serialize+0x152>
    252e:	2d b7       	in	r18, 0x3d	; 61
    2530:	3e b7       	in	r19, 0x3e	; 62
    2532:	28 50       	subi	r18, 0x08	; 8
    2534:	30 40       	sbci	r19, 0x00	; 0
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	3e bf       	out	0x3e, r19	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	2d bf       	out	0x3d, r18	; 61
    2540:	ed b7       	in	r30, 0x3d	; 61
    2542:	fe b7       	in	r31, 0x3e	; 62
    2544:	31 96       	adiw	r30, 0x01	; 1
    2546:	ad b7       	in	r26, 0x3d	; 61
    2548:	be b7       	in	r27, 0x3e	; 62
    254a:	12 96       	adiw	r26, 0x02	; 2
    254c:	dc 93       	st	X, r29
    254e:	ce 93       	st	-X, r28
    2550:	11 97       	sbiw	r26, 0x01	; 1
    2552:	93 82       	std	Z+3, r9	; 0x03
    2554:	82 82       	std	Z+2, r8	; 0x02
    2556:	d8 01       	movw	r26, r16
    2558:	17 96       	adiw	r26, 0x07	; 7
    255a:	2d 91       	ld	r18, X+
    255c:	3d 91       	ld	r19, X+
    255e:	4d 91       	ld	r20, X+
    2560:	5c 91       	ld	r21, X
    2562:	1a 97       	sbiw	r26, 0x0a	; 10
    2564:	24 83       	std	Z+4, r18	; 0x04
    2566:	35 83       	std	Z+5, r19	; 0x05
    2568:	46 83       	std	Z+6, r20	; 0x06
    256a:	57 83       	std	Z+7, r21	; 0x07
    256c:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <sprintf>
    2570:	c8 0f       	add	r28, r24
    2572:	d9 1f       	adc	r29, r25
    2574:	ed b7       	in	r30, 0x3d	; 61
    2576:	fe b7       	in	r31, 0x3e	; 62
    2578:	38 96       	adiw	r30, 0x08	; 8
    257a:	0f b6       	in	r0, 0x3f	; 63
    257c:	f8 94       	cli
    257e:	fe bf       	out	0x3e, r31	; 62
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	ed bf       	out	0x3d, r30	; 61
    2584:	4e c0       	rjmp	.+156    	; 0x2622 <json_serialize+0x1ee>
			else if (cmd->type == TYPE_STRING)	{ str += sprintf(str, "\"%s\"",*cmd->stringp);}
    2586:	85 30       	cpi	r24, 0x05	; 5
    2588:	79 f4       	brne	.+30     	; 0x25a8 <json_serialize+0x174>
    258a:	00 d0       	rcall	.+0      	; 0x258c <json_serialize+0x158>
    258c:	00 d0       	rcall	.+0      	; 0x258e <json_serialize+0x15a>
    258e:	00 d0       	rcall	.+0      	; 0x2590 <json_serialize+0x15c>
    2590:	ed b7       	in	r30, 0x3d	; 61
    2592:	fe b7       	in	r31, 0x3e	; 62
    2594:	31 96       	adiw	r30, 0x01	; 1
    2596:	ad b7       	in	r26, 0x3d	; 61
    2598:	be b7       	in	r27, 0x3e	; 62
    259a:	12 96       	adiw	r26, 0x02	; 2
    259c:	dc 93       	st	X, r29
    259e:	ce 93       	st	-X, r28
    25a0:	11 97       	sbiw	r26, 0x01	; 1
    25a2:	73 82       	std	Z+3, r7	; 0x03
    25a4:	62 82       	std	Z+2, r6	; 0x02
    25a6:	10 c0       	rjmp	.+32     	; 0x25c8 <json_serialize+0x194>
			else if (cmd->type == TYPE_ARRAY)	{ str += sprintf(str, "[%s]",  *cmd->stringp);}
    25a8:	86 30       	cpi	r24, 0x06	; 6
    25aa:	e9 f4       	brne	.+58     	; 0x25e6 <json_serialize+0x1b2>
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <json_serialize+0x17a>
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <json_serialize+0x17c>
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <json_serialize+0x17e>
    25b2:	ed b7       	in	r30, 0x3d	; 61
    25b4:	fe b7       	in	r31, 0x3e	; 62
    25b6:	31 96       	adiw	r30, 0x01	; 1
    25b8:	ad b7       	in	r26, 0x3d	; 61
    25ba:	be b7       	in	r27, 0x3e	; 62
    25bc:	12 96       	adiw	r26, 0x02	; 2
    25be:	dc 93       	st	X, r29
    25c0:	ce 93       	st	-X, r28
    25c2:	11 97       	sbiw	r26, 0x01	; 1
    25c4:	53 82       	std	Z+3, r5	; 0x03
    25c6:	42 82       	std	Z+2, r4	; 0x02
    25c8:	d8 01       	movw	r26, r16
    25ca:	55 96       	adiw	r26, 0x15	; 21
    25cc:	8d 91       	ld	r24, X+
    25ce:	9c 91       	ld	r25, X
    25d0:	56 97       	sbiw	r26, 0x16	; 22
    25d2:	95 83       	std	Z+5, r25	; 0x05
    25d4:	84 83       	std	Z+4, r24	; 0x04
    25d6:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <sprintf>
    25da:	c8 0f       	add	r28, r24
    25dc:	d9 1f       	adc	r29, r25
    25de:	ed b7       	in	r30, 0x3d	; 61
    25e0:	fe b7       	in	r31, 0x3e	; 62
    25e2:	36 96       	adiw	r30, 0x06	; 6
    25e4:	ca cf       	rjmp	.-108    	; 0x257a <json_serialize+0x146>
			else if (cmd->type == TYPE_BOOL) 	{
    25e6:	82 30       	cpi	r24, 0x02	; 2
    25e8:	e1 f4       	brne	.+56     	; 0x2622 <json_serialize+0x1ee>
				if (cmd->value == false) { str += sprintf(str, "false");}
    25ea:	d8 01       	movw	r26, r16
    25ec:	17 96       	adiw	r26, 0x07	; 7
    25ee:	6d 91       	ld	r22, X+
    25f0:	7d 91       	ld	r23, X+
    25f2:	8d 91       	ld	r24, X+
    25f4:	9c 91       	ld	r25, X
    25f6:	1a 97       	sbiw	r26, 0x0a	; 10
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e0       	ldi	r20, 0x00	; 0
    25fe:	50 e0       	ldi	r21, 0x00	; 0
    2600:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__cmpsf2>
    2604:	88 23       	and	r24, r24
    2606:	39 f4       	brne	.+14     	; 0x2616 <json_serialize+0x1e2>
    2608:	ce 01       	movw	r24, r28
    260a:	63 e6       	ldi	r22, 0x63	; 99
    260c:	72 e0       	ldi	r23, 0x02	; 2
    260e:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <strcpy>
    2612:	25 96       	adiw	r28, 0x05	; 5
    2614:	06 c0       	rjmp	.+12     	; 0x2622 <json_serialize+0x1ee>
				else { str += sprintf(str, "true"); }
    2616:	ce 01       	movw	r24, r28
    2618:	69 e6       	ldi	r22, 0x69	; 105
    261a:	72 e0       	ldi	r23, 0x02	; 2
    261c:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <strcpy>
    2620:	24 96       	adiw	r28, 0x04	; 4
			}
			if (cmd->type == TYPE_PARENT) { 
    2622:	f8 01       	movw	r30, r16
    2624:	86 81       	ldd	r24, Z+6	; 0x06
    2626:	87 30       	cpi	r24, 0x07	; 7
    2628:	11 f0       	breq	.+4      	; 0x262e <json_serialize+0x1fa>
    262a:	91 e0       	ldi	r25, 0x01	; 1
    262c:	03 c0       	rjmp	.+6      	; 0x2634 <json_serialize+0x200>
				*str++ = '{';
    262e:	fb e7       	ldi	r31, 0x7B	; 123
    2630:	f9 93       	st	Y+, r31
    2632:	90 e0       	ldi	r25, 0x00	; 0
				need_a_comma = false;
			}
		}
		if ((cmd = cmd->nx) == NULL) { break;}	// end of the list
    2634:	d8 01       	movw	r26, r16
    2636:	12 96       	adiw	r26, 0x02	; 2
    2638:	0d 91       	ld	r16, X+
    263a:	1c 91       	ld	r17, X
    263c:	13 97       	sbiw	r26, 0x03	; 3
    263e:	01 15       	cp	r16, r1
    2640:	11 05       	cpc	r17, r1
    2642:	19 f4       	brne	.+6      	; 0x264a <json_serialize+0x216>
    2644:	8f 2d       	mov	r24, r15
			*str++ = '}';						// and close the level
		}
		prev_depth = cmd->depth;
	}
	// closing curlies and NEWLINE
	while (prev_depth-- > initial_depth) { *str++ = '}';}
    2646:	9d e7       	ldi	r25, 0x7D	; 125
    2648:	0d c0       	rjmp	.+26     	; 0x2664 <json_serialize+0x230>
				*str++ = '{';
				need_a_comma = false;
			}
		}
		if ((cmd = cmd->nx) == NULL) { break;}	// end of the list
		if (cmd->depth < prev_depth) {
    264a:	f8 01       	movw	r30, r16
    264c:	85 81       	ldd	r24, Z+5	; 0x05
    264e:	8f 15       	cp	r24, r15
    2650:	1c f4       	brge	.+6      	; 0x2658 <json_serialize+0x224>
			need_a_comma = true;
			*str++ = '}';						// and close the level
    2652:	fd e7       	ldi	r31, 0x7D	; 125
    2654:	f9 93       	st	Y+, r31
    2656:	91 e0       	ldi	r25, 0x01	; 1
		}
		prev_depth = cmd->depth;
    2658:	d8 01       	movw	r26, r16
    265a:	15 96       	adiw	r26, 0x05	; 5
    265c:	fc 90       	ld	r15, X
    265e:	1a cf       	rjmp	.-460    	; 0x2494 <json_serialize+0x60>
	}
	// closing curlies and NEWLINE
	while (prev_depth-- > initial_depth) { *str++ = '}';}
    2660:	99 93       	st	Y+, r25
    2662:	81 50       	subi	r24, 0x01	; 1
    2664:	e8 16       	cp	r14, r24
    2666:	e4 f3       	brlt	.-8      	; 0x2660 <json_serialize+0x22c>
	str += sprintf(str, "}\n");	// using sprintf for this last one ensures a NUL termination
    2668:	ce 01       	movw	r24, r28
    266a:	6e e6       	ldi	r22, 0x6E	; 110
    266c:	72 e0       	ldi	r23, 0x02	; 2
    266e:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <strcpy>
    2672:	9e 01       	movw	r18, r28
    2674:	2e 5f       	subi	r18, 0xFE	; 254
    2676:	3f 4f       	sbci	r19, 0xFF	; 255
    2678:	2c 19       	sub	r18, r12
    267a:	3d 09       	sbc	r19, r13
	return (str - out_buf);
}
    267c:	c9 01       	movw	r24, r18
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	ff 90       	pop	r15
    2688:	ef 90       	pop	r14
    268a:	df 90       	pop	r13
    268c:	cf 90       	pop	r12
    268e:	bf 90       	pop	r11
    2690:	af 90       	pop	r10
    2692:	9f 90       	pop	r9
    2694:	8f 90       	pop	r8
    2696:	7f 90       	pop	r7
    2698:	6f 90       	pop	r6
    269a:	5f 90       	pop	r5
    269c:	4f 90       	pop	r4
    269e:	3f 90       	pop	r3
    26a0:	2f 90       	pop	r2
    26a2:	08 95       	ret

000026a4 <json_print_object>:
 *	Ignores JSON verbosity settings and everything else - just serializes the list & prints
 *	Useful for reports and other simple output.
 *	Object list should be terminated by cmd->nx == NULL
 */
void json_print_object(cmdObj_t *cmd)
{
    26a4:	0f 93       	push	r16
    26a6:	1f 93       	push	r17
	json_serialize(cmd, kc.buf);
    26a8:	0f ed       	ldi	r16, 0xDF	; 223
    26aa:	12 e0       	ldi	r17, 0x02	; 2
    26ac:	b8 01       	movw	r22, r16
    26ae:	0e 94 1a 12 	call	0x2434	; 0x2434 <json_serialize>
	fprintf(stderr, "%s", kc.buf);
    26b2:	60 91 7e 06 	lds	r22, 0x067E
    26b6:	70 91 7f 06 	lds	r23, 0x067F
    26ba:	c8 01       	movw	r24, r16
    26bc:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <fputs>
}
    26c0:	1f 91       	pop	r17
    26c2:	0f 91       	pop	r16
    26c4:	08 95       	ret

000026c6 <json_print_response>:
 */
#define MAX_TAIL_LEN 8

void json_print_response(uint8_t status)
{
	json_print_object(cmd_list);
    26c6:	8f e7       	ldi	r24, 0x7F	; 127
    26c8:	94 e0       	ldi	r25, 0x04	; 4
    26ca:	0e 94 52 13 	call	0x26a4	; 0x26a4 <json_print_object>
}
    26ce:	08 95       	ret

000026d0 <_json_parser_kernal>:
	cmd_print_list(status, TEXT_NO_PRINT, JSON_RESPONSE_FORMAT);
//	rpt_request_status_report();	// generate an incremental status report if there are system state changes
}

stat_t _json_parser_kernal(char *str)
{
    26d0:	2f 92       	push	r2
    26d2:	3f 92       	push	r3
    26d4:	4f 92       	push	r4
    26d6:	5f 92       	push	r5
    26d8:	6f 92       	push	r6
    26da:	7f 92       	push	r7
    26dc:	8f 92       	push	r8
    26de:	9f 92       	push	r9
    26e0:	af 92       	push	r10
    26e2:	bf 92       	push	r11
    26e4:	cf 92       	push	r12
    26e6:	df 92       	push	r13
    26e8:	ef 92       	push	r14
    26ea:	ff 92       	push	r15
    26ec:	0f 93       	push	r16
    26ee:	1f 93       	push	r17
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	29 97       	sbiw	r28, 0x09	; 9
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	f8 94       	cli
    26fe:	de bf       	out	0x3e, r29	; 62
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	cd bf       	out	0x3d, r28	; 61
    2704:	7c 01       	movw	r14, r24
	uint8_t status;
	int8_t depth;
	cmdObj_t *cmd = cmd_body;
	char group[CMD_GROUP_LEN+1] = {""};			// group identifier - starts as NUL
    2706:	80 91 71 02 	lds	r24, 0x0271
    270a:	90 91 72 02 	lds	r25, 0x0272
    270e:	a0 91 73 02 	lds	r26, 0x0273
    2712:	b0 91 74 02 	lds	r27, 0x0274
    2716:	8e 83       	std	Y+6, r24	; 0x06
    2718:	9f 83       	std	Y+7, r25	; 0x07
    271a:	a8 87       	std	Y+8, r26	; 0x08
    271c:	b9 87       	std	Y+9, r27	; 0x09
static stat_t _normalize_json_string(char *str, uint16_t size)
{
	char *wr;								// write pointer
	uint8_t in_comment = false;

	if (strlen(str) > size) return (STAT_INPUT_EXCEEDS_MAX_LENGTH);
    271e:	f7 01       	movw	r30, r14
    2720:	01 90       	ld	r0, Z+
    2722:	00 20       	and	r0, r0
    2724:	e9 f7       	brne	.-6      	; 0x2720 <_json_parser_kernal+0x50>
    2726:	31 97       	sbiw	r30, 0x01	; 1
    2728:	ee 19       	sub	r30, r14
    272a:	ff 09       	sbc	r31, r15
    272c:	e1 38       	cpi	r30, 0x81	; 129
    272e:	f1 05       	cpc	r31, r1
    2730:	10 f0       	brcs	.+4      	; 0x2736 <_json_parser_kernal+0x66>
    2732:	1b e2       	ldi	r17, 0x2B	; 43
    2734:	25 c0       	rjmp	.+74     	; 0x2780 <_json_parser_kernal+0xb0>
    2736:	87 01       	movw	r16, r14
    2738:	67 01       	movw	r12, r14
    273a:	bb 24       	eor	r11, r11
    273c:	1a c0       	rjmp	.+52     	; 0x2772 <_json_parser_kernal+0xa2>

	for (wr = str; *str != NUL; str++) {
		if (!in_comment) {					// normal processing
    273e:	bb 20       	and	r11, r11
    2740:	69 f4       	brne	.+26     	; 0x275c <_json_parser_kernal+0x8c>
			if (*str == '(') in_comment = true;
    2742:	88 32       	cpi	r24, 0x28	; 40
    2744:	19 f4       	brne	.+6      	; 0x274c <_json_parser_kernal+0x7c>
    2746:	bb 24       	eor	r11, r11
    2748:	b3 94       	inc	r11
    274a:	04 c0       	rjmp	.+8      	; 0x2754 <_json_parser_kernal+0x84>
			if ((*str <= ' ') || (*str == DEL)) continue; // toss ctrls, WS & DEL
    274c:	81 32       	cpi	r24, 0x21	; 33
    274e:	70 f0       	brcs	.+28     	; 0x276c <_json_parser_kernal+0x9c>
    2750:	8f 37       	cpi	r24, 0x7F	; 127
    2752:	61 f0       	breq	.+24     	; 0x276c <_json_parser_kernal+0x9c>
			*wr++ = tolower(*str);
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	0e 94 75 1e 	call	0x3cea	; 0x3cea <tolower>
    275a:	05 c0       	rjmp	.+10     	; 0x2766 <_json_parser_kernal+0x96>
    275c:	bb 24       	eor	r11, r11
    275e:	89 32       	cpi	r24, 0x29	; 41
    2760:	11 f0       	breq	.+4      	; 0x2766 <_json_parser_kernal+0x96>
    2762:	bb 24       	eor	r11, r11
    2764:	b3 94       	inc	r11
		} else {							// Gcode comment processing	
			if (*str == ')') in_comment = false;
			*wr++ = *str;
    2766:	f8 01       	movw	r30, r16
    2768:	81 93       	st	Z+, r24
    276a:	8f 01       	movw	r16, r30
	char *wr;								// write pointer
	uint8_t in_comment = false;

	if (strlen(str) > size) return (STAT_INPUT_EXCEEDS_MAX_LENGTH);

	for (wr = str; *str != NUL; str++) {
    276c:	08 94       	sec
    276e:	c1 1c       	adc	r12, r1
    2770:	d1 1c       	adc	r13, r1
    2772:	f6 01       	movw	r30, r12
    2774:	80 81       	ld	r24, Z
    2776:	88 23       	and	r24, r24
    2778:	11 f7       	brne	.-60     	; 0x273e <_json_parser_kernal+0x6e>
		} else {							// Gcode comment processing	
			if (*str == ')') in_comment = false;
			*wr++ = *str;
		}
	}
	*wr = NUL;
    277a:	f8 01       	movw	r30, r16
    277c:	10 82       	st	Z, r1
    277e:	10 e0       	ldi	r17, 0x00	; 0
	int8_t depth;
	cmdObj_t *cmd = cmd_body;
	char group[CMD_GROUP_LEN+1] = {""};			// group identifier - starts as NUL
	int8_t i = CMD_BODY_LEN;

	ritorno(_normalize_json_string(str, JSON_OUTPUT_STRING_MAX));	// return if error
    2780:	10 93 5f 03 	sts	0x035F, r17
    2784:	11 23       	and	r17, r17
    2786:	09 f0       	breq	.+2      	; 0x278a <_json_parser_kernal+0xba>
    2788:	3e c1       	rjmp	.+636    	; 0x2a06 <_json_parser_kernal+0x336>
    278a:	06 e9       	ldi	r16, 0x96	; 150
    278c:	14 e0       	ldi	r17, 0x04	; 4
    278e:	e0 e1       	ldi	r30, 0x10	; 16
    2790:	ce 2e       	mov	r12, r30
	(*pstr)++;										// advance to start of value field

	// nulls (gets)
	if ((**pstr == 'n') || ((**pstr == '\"') && (*(*pstr+1) == '\"'))) { // process null value
		cmd->type = TYPE_NULL;
		cmd->value = TYPE_NULL;
    2792:	0f 2e       	mov	r0, r31
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	6f 2e       	mov	r6, r31
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	7f 2e       	mov	r7, r31
    279c:	f0 e8       	ldi	r31, 0x80	; 128
    279e:	8f 2e       	mov	r8, r31
    27a0:	ff e3       	ldi	r31, 0x3F	; 63
    27a2:	9f 2e       	mov	r9, r31
    27a4:	f0 2d       	mov	r31, r0
	} else if (**pstr == 't') { 
		cmd->type = TYPE_BOOL;
		cmd->value = true;
	} else if (**pstr == 'f') { 
		cmd->type = TYPE_BOOL;
		cmd->value = false;
    27a6:	0f 2e       	mov	r0, r31
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	2f 2e       	mov	r2, r31
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	3f 2e       	mov	r3, r31
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	4f 2e       	mov	r4, r31
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	5f 2e       	mov	r5, r31
    27b8:	f0 2d       	mov	r31, r0

	ritorno(_normalize_json_string(str, JSON_OUTPUT_STRING_MAX));	// return if error

	// parse the JSON command into the cmd body
	do {
		if (--i == 0) { return (STAT_JSON_TOO_MANY_PAIRS); }			// length error
    27ba:	ca 94       	dec	r12
    27bc:	11 f4       	brne	.+4      	; 0x27c2 <_json_parser_kernal+0xf2>
    27be:	11 e3       	ldi	r17, 0x31	; 49
    27c0:	22 c1       	rjmp	.+580    	; 0x2a06 <_json_parser_kernal+0x336>
 *	cfgArray.
 */
static stat_t _get_nv_pair_strict(cmdObj_t *cmd, char **pstr, int8_t *depth)
{
	char *tmp;
	char terminators[] = {"},"};
    27c2:	de 01       	movw	r26, r28
    27c4:	13 96       	adiw	r26, 0x03	; 3
    27c6:	e5 e7       	ldi	r30, 0x75	; 117
    27c8:	f2 e0       	ldi	r31, 0x02	; 2
    27ca:	83 e0       	ldi	r24, 0x03	; 3
    27cc:	01 90       	ld	r0, Z+
    27ce:	0d 92       	st	X+, r0
    27d0:	81 50       	subi	r24, 0x01	; 1
    27d2:	e1 f7       	brne	.-8      	; 0x27cc <_json_parser_kernal+0xfc>

	cmd_reset_obj(cmd);								// wipes the object and sets the depth
    27d4:	c8 01       	movw	r24, r16
    27d6:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <cmd_reset_obj>

	// --- Process name part ---
	// find leading and trailing name quotes and set pointers.
	if ((*pstr = strchr(*pstr, '\"')) == NULL) { return (STAT_JSON_SYNTAX_ERROR);}
    27da:	c7 01       	movw	r24, r14
    27dc:	62 e2       	ldi	r22, 0x22	; 34
    27de:	70 e0       	ldi	r23, 0x00	; 0
    27e0:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <strchr>
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	09 f4       	brne	.+2      	; 0x27ea <_json_parser_kernal+0x11a>
    27e8:	2b c1       	rjmp	.+598    	; 0x2a40 <_json_parser_kernal+0x370>
	if ((tmp = strchr(++(*pstr), '\"')) == NULL) { return (STAT_JSON_SYNTAX_ERROR);}
    27ea:	7c 01       	movw	r14, r24
    27ec:	08 94       	sec
    27ee:	e1 1c       	adc	r14, r1
    27f0:	f1 1c       	adc	r15, r1
    27f2:	c7 01       	movw	r24, r14
    27f4:	62 e2       	ldi	r22, 0x22	; 34
    27f6:	70 e0       	ldi	r23, 0x00	; 0
    27f8:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <strchr>
    27fc:	fc 01       	movw	r30, r24
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	09 f4       	brne	.+2      	; 0x2804 <_json_parser_kernal+0x134>
    2802:	1e c1       	rjmp	.+572    	; 0x2a40 <_json_parser_kernal+0x370>
    2804:	9a 83       	std	Y+2, r25	; 0x02
    2806:	89 83       	std	Y+1, r24	; 0x01
	*tmp = NUL;
    2808:	10 82       	st	Z, r1
	strncpy(cmd->token, *pstr, CMD_TOKEN_LEN);		// copy the string to the token
    280a:	7b e0       	ldi	r23, 0x0B	; 11
    280c:	a7 2e       	mov	r10, r23
    280e:	b1 2c       	mov	r11, r1
    2810:	a0 0e       	add	r10, r16
    2812:	b1 1e       	adc	r11, r17
    2814:	c5 01       	movw	r24, r10
    2816:	b7 01       	movw	r22, r14
    2818:	45 e0       	ldi	r20, 0x05	; 5
    281a:	50 e0       	ldi	r21, 0x00	; 0
    281c:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <strncpy>

	// --- Process value part ---  (organized from most to least encountered)
	*pstr = ++tmp;
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	9a 83       	std	Y+2, r25	; 0x02
    2828:	89 83       	std	Y+1, r24	; 0x01
	if ((*pstr = strchr(*pstr, ':')) == NULL) return (STAT_JSON_SYNTAX_ERROR);
    282a:	6a e3       	ldi	r22, 0x3A	; 58
    282c:	70 e0       	ldi	r23, 0x00	; 0
    282e:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <strchr>
    2832:	fc 01       	movw	r30, r24
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	09 f4       	brne	.+2      	; 0x283a <_json_parser_kernal+0x16a>
    2838:	03 c1       	rjmp	.+518    	; 0x2a40 <_json_parser_kernal+0x370>
	(*pstr)++;										// advance to start of value field
    283a:	7c 01       	movw	r14, r24
    283c:	08 94       	sec
    283e:	e1 1c       	adc	r14, r1
    2840:	f1 1c       	adc	r15, r1

	// nulls (gets)
	if ((**pstr == 'n') || ((**pstr == '\"') && (*(*pstr+1) == '\"'))) { // process null value
    2842:	21 81       	ldd	r18, Z+1	; 0x01
    2844:	2e 36       	cpi	r18, 0x6E	; 110
    2846:	31 f0       	breq	.+12     	; 0x2854 <_json_parser_kernal+0x184>
    2848:	22 32       	cpi	r18, 0x22	; 34
    284a:	31 f4       	brne	.+12     	; 0x2858 <_json_parser_kernal+0x188>
    284c:	f7 01       	movw	r30, r14
    284e:	81 81       	ldd	r24, Z+1	; 0x01
    2850:	82 32       	cpi	r24, 0x22	; 34
    2852:	11 f4       	brne	.+4      	; 0x2858 <_json_parser_kernal+0x188>
		cmd->type = TYPE_NULL;
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	4f c0       	rjmp	.+158    	; 0x28f6 <_json_parser_kernal+0x226>
		cmd->value = TYPE_NULL;
	
	// numbers
	} else if (isdigit(**pstr) || (**pstr == '-')) {// value is a number
    2858:	82 2f       	mov	r24, r18
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	c0 97       	sbiw	r24, 0x30	; 48
    285e:	0a 97       	sbiw	r24, 0x0a	; 10
    2860:	10 f0       	brcs	.+4      	; 0x2866 <_json_parser_kernal+0x196>
    2862:	2d 32       	cpi	r18, 0x2D	; 45
    2864:	b1 f4       	brne	.+44     	; 0x2892 <_json_parser_kernal+0x1c2>
		cmd->value = strtod(*pstr, &tmp);			// tmp is the end pointer
    2866:	c7 01       	movw	r24, r14
    2868:	be 01       	movw	r22, r28
    286a:	6f 5f       	subi	r22, 0xFF	; 255
    286c:	7f 4f       	sbci	r23, 0xFF	; 255
    286e:	0e 94 35 1c 	call	0x386a	; 0x386a <strtod>
    2872:	f8 01       	movw	r30, r16
    2874:	67 83       	std	Z+7, r22	; 0x07
    2876:	70 87       	std	Z+8, r23	; 0x08
    2878:	81 87       	std	Z+9, r24	; 0x09
    287a:	92 87       	std	Z+10, r25	; 0x0a
		if(tmp == *pstr) { return (STAT_BAD_NUMBER_FORMAT);}
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	9a 81       	ldd	r25, Y+2	; 0x02
    2880:	8e 15       	cp	r24, r14
    2882:	9f 05       	cpc	r25, r15
    2884:	11 f4       	brne	.+4      	; 0x288a <_json_parser_kernal+0x1ba>
    2886:	1a e2       	ldi	r17, 0x2A	; 42
    2888:	be c0       	rjmp	.+380    	; 0x2a06 <_json_parser_kernal+0x336>
		cmd->type = TYPE_FLOAT;
    288a:	84 e0       	ldi	r24, 0x04	; 4
    288c:	f8 01       	movw	r30, r16
    288e:	86 83       	std	Z+6, r24	; 0x06
    2890:	54 c0       	rjmp	.+168    	; 0x293a <_json_parser_kernal+0x26a>

	// object parent
	} else if (**pstr == '{') { 
    2892:	2b 37       	cpi	r18, 0x7B	; 123
    2894:	39 f4       	brne	.+14     	; 0x28a4 <_json_parser_kernal+0x1d4>
		cmd->type = TYPE_PARENT;
    2896:	87 e0       	ldi	r24, 0x07	; 7
    2898:	f8 01       	movw	r30, r16
    289a:	86 83       	std	Z+6, r24	; 0x06
//		*depth += 1;								// cmd_reset_obj() sets the next object's level so this is redundant
		(*pstr)++;
    289c:	08 94       	sec
    289e:	e1 1c       	adc	r14, r1
    28a0:	f1 1c       	adc	r15, r1
    28a2:	cb c0       	rjmp	.+406    	; 0x2a3a <_json_parser_kernal+0x36a>
		return(STAT_EAGAIN);							// signal that there is more to parse

	// strings
	} else if (**pstr == '\"') { 					// value is a string
    28a4:	22 32       	cpi	r18, 0x22	; 34
    28a6:	21 f5       	brne	.+72     	; 0x28f0 <_json_parser_kernal+0x220>
		(*pstr)++;
    28a8:	08 94       	sec
    28aa:	e1 1c       	adc	r14, r1
    28ac:	f1 1c       	adc	r15, r1
		cmd->type = TYPE_STRING;
    28ae:	85 e0       	ldi	r24, 0x05	; 5
    28b0:	f8 01       	movw	r30, r16
    28b2:	86 83       	std	Z+6, r24	; 0x06
		if ((tmp = strchr(*pstr, '\"')) == NULL) { return (STAT_JSON_SYNTAX_ERROR);} // find the end of the string
    28b4:	c7 01       	movw	r24, r14
    28b6:	62 e2       	ldi	r22, 0x22	; 34
    28b8:	70 e0       	ldi	r23, 0x00	; 0
    28ba:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <strchr>
    28be:	fc 01       	movw	r30, r24
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	09 f4       	brne	.+2      	; 0x28c6 <_json_parser_kernal+0x1f6>
    28c4:	bd c0       	rjmp	.+378    	; 0x2a40 <_json_parser_kernal+0x370>
    28c6:	9a 83       	std	Y+2, r25	; 0x02
    28c8:	89 83       	std	Y+1, r24	; 0x01
		*tmp = NUL;
    28ca:	10 82       	st	Z, r1
		ritorno(cmd_copy_string(cmd, *pstr));
    28cc:	c8 01       	movw	r24, r16
    28ce:	b7 01       	movw	r22, r14
    28d0:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <cmd_copy_string>
    28d4:	d8 2e       	mov	r13, r24
    28d6:	80 93 5f 03 	sts	0x035F, r24
    28da:	88 23       	and	r24, r24
    28dc:	09 f0       	breq	.+2      	; 0x28e0 <_json_parser_kernal+0x210>
    28de:	48 c0       	rjmp	.+144    	; 0x2970 <_json_parser_kernal+0x2a0>
		*pstr = ++tmp;
    28e0:	e9 80       	ldd	r14, Y+1	; 0x01
    28e2:	fa 80       	ldd	r15, Y+2	; 0x02
    28e4:	08 94       	sec
    28e6:	e1 1c       	adc	r14, r1
    28e8:	f1 1c       	adc	r15, r1
    28ea:	fa 82       	std	Y+2, r15	; 0x02
    28ec:	e9 82       	std	Y+1, r14	; 0x01
    28ee:	25 c0       	rjmp	.+74     	; 0x293a <_json_parser_kernal+0x26a>

	// boolean true/false
	} else if (**pstr == 't') { 
    28f0:	24 37       	cpi	r18, 0x74	; 116
    28f2:	41 f4       	brne	.+16     	; 0x2904 <_json_parser_kernal+0x234>
		cmd->type = TYPE_BOOL;
    28f4:	82 e0       	ldi	r24, 0x02	; 2
    28f6:	f8 01       	movw	r30, r16
    28f8:	86 83       	std	Z+6, r24	; 0x06
		cmd->value = true;
    28fa:	67 82       	std	Z+7, r6	; 0x07
    28fc:	70 86       	std	Z+8, r7	; 0x08
    28fe:	81 86       	std	Z+9, r8	; 0x09
    2900:	92 86       	std	Z+10, r9	; 0x0a
    2902:	1b c0       	rjmp	.+54     	; 0x293a <_json_parser_kernal+0x26a>
	} else if (**pstr == 'f') { 
    2904:	26 36       	cpi	r18, 0x66	; 102
    2906:	41 f4       	brne	.+16     	; 0x2918 <_json_parser_kernal+0x248>
		cmd->type = TYPE_BOOL;
    2908:	82 e0       	ldi	r24, 0x02	; 2
    290a:	f8 01       	movw	r30, r16
    290c:	86 83       	std	Z+6, r24	; 0x06
		cmd->value = false;
    290e:	27 82       	std	Z+7, r2	; 0x07
    2910:	30 86       	std	Z+8, r3	; 0x08
    2912:	41 86       	std	Z+9, r4	; 0x09
    2914:	52 86       	std	Z+10, r5	; 0x0a
    2916:	11 c0       	rjmp	.+34     	; 0x293a <_json_parser_kernal+0x26a>

	// arrays
	} else if (**pstr == '[') {
    2918:	2b 35       	cpi	r18, 0x5B	; 91
    291a:	09 f0       	breq	.+2      	; 0x291e <_json_parser_kernal+0x24e>
    291c:	91 c0       	rjmp	.+290    	; 0x2a40 <_json_parser_kernal+0x370>
		cmd->type = TYPE_ARRAY;
    291e:	86 e0       	ldi	r24, 0x06	; 6
    2920:	f8 01       	movw	r30, r16
    2922:	86 83       	std	Z+6, r24	; 0x06
		ritorno(cmd_copy_string(cmd, *pstr));		// copy array into string for error displays
    2924:	c8 01       	movw	r24, r16
    2926:	b7 01       	movw	r22, r14
    2928:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <cmd_copy_string>
    292c:	d8 2e       	mov	r13, r24
    292e:	80 93 5f 03 	sts	0x035F, r24
    2932:	88 23       	and	r24, r24
    2934:	e9 f4       	brne	.+58     	; 0x2970 <_json_parser_kernal+0x2a0>
    2936:	1f e2       	ldi	r17, 0x2F	; 47
    2938:	66 c0       	rjmp	.+204    	; 0x2a06 <_json_parser_kernal+0x336>

	// general error condition
	} else { return (STAT_JSON_SYNTAX_ERROR); }			// ill-formed JSON

	// process comma separators and end curlies
	if ((*pstr = strpbrk(*pstr, terminators)) == NULL) { // advance to terminator or err out
    293a:	c7 01       	movw	r24, r14
    293c:	be 01       	movw	r22, r28
    293e:	6d 5f       	subi	r22, 0xFD	; 253
    2940:	7f 4f       	sbci	r23, 0xFF	; 255
    2942:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <strpbrk>
    2946:	fc 01       	movw	r30, r24
    2948:	7c 01       	movw	r14, r24
    294a:	00 97       	sbiw	r24, 0x00	; 0
    294c:	09 f4       	brne	.+2      	; 0x2950 <_json_parser_kernal+0x280>
    294e:	78 c0       	rjmp	.+240    	; 0x2a40 <_json_parser_kernal+0x370>
		return (STAT_JSON_SYNTAX_ERROR);
	}
	if (**pstr == '}') { 
    2950:	80 81       	ld	r24, Z
    2952:	8d 37       	cpi	r24, 0x7D	; 125
    2954:	19 f4       	brne	.+6      	; 0x295c <_json_parser_kernal+0x28c>
		*depth -= 1;							// pop up a nesting level
		(*pstr)++;								// advance to comma or whatever follows
    2956:	08 94       	sec
    2958:	e1 1c       	adc	r14, r1
    295a:	f1 1c       	adc	r15, r1
	}
	if (**pstr == ',') { return (STAT_EAGAIN);}	// signal that there is more to parse
    295c:	f7 01       	movw	r30, r14
    295e:	80 81       	ld	r24, Z
    2960:	8c 32       	cpi	r24, 0x2C	; 44
    2962:	09 f4       	brne	.+2      	; 0x2966 <_json_parser_kernal+0x296>
    2964:	6a c0       	rjmp	.+212    	; 0x2a3a <_json_parser_kernal+0x36a>

	(*pstr)++;
    2966:	08 94       	sec
    2968:	e1 1c       	adc	r14, r1
    296a:	f1 1c       	adc	r15, r1
    296c:	dd 24       	eor	r13, r13
    296e:	05 c0       	rjmp	.+10     	; 0x297a <_json_parser_kernal+0x2aa>
	ritorno(_normalize_json_string(str, JSON_OUTPUT_STRING_MAX));	// return if error

	// parse the JSON command into the cmd body
	do {
		if (--i == 0) { return (STAT_JSON_TOO_MANY_PAIRS); }			// length error
		if ((status = _get_nv_pair_strict(cmd, &str, &depth)) > STAT_EAGAIN) { // erred out
    2970:	f2 e0       	ldi	r31, 0x02	; 2
    2972:	fd 15       	cp	r31, r13
    2974:	10 f4       	brcc	.+4      	; 0x297a <_json_parser_kernal+0x2aa>
    2976:	1d 2d       	mov	r17, r13
    2978:	46 c0       	rjmp	.+140    	; 0x2a06 <_json_parser_kernal+0x336>
			return (status);
		}
		// propagate the group from previous NV pair (if relevant)
		if (group[0] != NUL) {
    297a:	8e 81       	ldd	r24, Y+6	; 0x06
    297c:	88 23       	and	r24, r24
    297e:	49 f0       	breq	.+18     	; 0x2992 <_json_parser_kernal+0x2c2>
			strncpy(cmd->group, group, CMD_GROUP_LEN);// copy the parent's group to this child
    2980:	c8 01       	movw	r24, r16
    2982:	41 96       	adiw	r24, 0x11	; 17
    2984:	be 01       	movw	r22, r28
    2986:	6a 5f       	subi	r22, 0xFA	; 250
    2988:	7f 4f       	sbci	r23, 0xFF	; 255
    298a:	43 e0       	ldi	r20, 0x03	; 3
    298c:	50 e0       	ldi	r21, 0x00	; 0
    298e:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <strncpy>
		}
		// validate the token and get the index
		if ((cmd->index = cmd_get_index(cmd->group, cmd->token)) == NO_MATCH) { 
    2992:	c8 01       	movw	r24, r16
    2994:	41 96       	adiw	r24, 0x11	; 17
    2996:	b5 01       	movw	r22, r10
    2998:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <cmd_get_index>
    299c:	f8 01       	movw	r30, r16
    299e:	84 83       	std	Z+4, r24	; 0x04
    29a0:	8f 3f       	cpi	r24, 0xFF	; 255
    29a2:	11 f4       	brne	.+4      	; 0x29a8 <_json_parser_kernal+0x2d8>
    29a4:	18 e2       	ldi	r17, 0x28	; 40
    29a6:	2f c0       	rjmp	.+94     	; 0x2a06 <_json_parser_kernal+0x336>
			return (STAT_UNRECOGNIZED_COMMAND);
		}
		if ((cmd_index_is_group(cmd->index)) && (cmd_group_is_prefixed(cmd->token))) {
    29a8:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <cmd_index_is_group>
    29ac:	88 23       	and	r24, r24
    29ae:	61 f0       	breq	.+24     	; 0x29c8 <_json_parser_kernal+0x2f8>
    29b0:	c5 01       	movw	r24, r10
    29b2:	0e 94 42 11 	call	0x2284	; 0x2284 <cmd_group_is_prefixed>
    29b6:	88 23       	and	r24, r24
    29b8:	39 f0       	breq	.+14     	; 0x29c8 <_json_parser_kernal+0x2f8>
			strncpy(group, cmd->token, CMD_GROUP_LEN);// record the group ID
    29ba:	ce 01       	movw	r24, r28
    29bc:	06 96       	adiw	r24, 0x06	; 6
    29be:	b5 01       	movw	r22, r10
    29c0:	43 e0       	ldi	r20, 0x03	; 3
    29c2:	50 e0       	ldi	r21, 0x00	; 0
    29c4:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <strncpy>
		}
		cmd = cmd->nx;
    29c8:	f8 01       	movw	r30, r16
    29ca:	02 81       	ldd	r16, Z+2	; 0x02
    29cc:	13 81       	ldd	r17, Z+3	; 0x03
	} while (status != STAT_OK);					// breaks when parsing is complete
    29ce:	dd 20       	and	r13, r13
    29d0:	09 f0       	breq	.+2      	; 0x29d4 <_json_parser_kernal+0x304>
    29d2:	f3 ce       	rjmp	.-538    	; 0x27ba <_json_parser_kernal+0xea>

	// execute the command
	cmd = cmd_body;
	if (cmd->type == TYPE_NULL){				// means GET the value
    29d4:	80 91 9c 04 	lds	r24, 0x049C
    29d8:	81 30       	cpi	r24, 0x01	; 1
    29da:	41 f4       	brne	.+16     	; 0x29ec <_json_parser_kernal+0x31c>
		ritorno(cmd_get(cmd));					// ritorno returns w/status on any errors
    29dc:	86 e9       	ldi	r24, 0x96	; 150
    29de:	94 e0       	ldi	r25, 0x04	; 4
    29e0:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <cmd_get>
    29e4:	18 2f       	mov	r17, r24
    29e6:	80 93 5f 03 	sts	0x035F, r24
    29ea:	0d c0       	rjmp	.+26     	; 0x2a06 <_json_parser_kernal+0x336>
	} else {
		ritorno(cmd_set(cmd));					// set value or call a function (e.g. gcode)
    29ec:	86 e9       	ldi	r24, 0x96	; 150
    29ee:	94 e0       	ldi	r25, 0x04	; 4
    29f0:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <cmd_set>
    29f4:	18 2f       	mov	r17, r24
    29f6:	80 93 5f 03 	sts	0x035F, r24
    29fa:	88 23       	and	r24, r24
    29fc:	21 f4       	brne	.+8      	; 0x2a06 <_json_parser_kernal+0x336>
		cmd_persist(cmd);
    29fe:	86 e9       	ldi	r24, 0x96	; 150
    2a00:	94 e0       	ldi	r25, 0x04	; 4
    2a02:	0e 94 96 11 	call	0x232c	; 0x232c <cmd_persist>
	}
	return (STAT_OK);								// only successful commands exit through this point
}
    2a06:	81 2f       	mov	r24, r17
    2a08:	29 96       	adiw	r28, 0x09	; 9
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	1f 91       	pop	r17
    2a1a:	0f 91       	pop	r16
    2a1c:	ff 90       	pop	r15
    2a1e:	ef 90       	pop	r14
    2a20:	df 90       	pop	r13
    2a22:	cf 90       	pop	r12
    2a24:	bf 90       	pop	r11
    2a26:	af 90       	pop	r10
    2a28:	9f 90       	pop	r9
    2a2a:	8f 90       	pop	r8
    2a2c:	7f 90       	pop	r7
    2a2e:	6f 90       	pop	r6
    2a30:	5f 90       	pop	r5
    2a32:	4f 90       	pop	r4
    2a34:	3f 90       	pop	r3
    2a36:	2f 90       	pop	r2
    2a38:	08 95       	ret
	cmd = cmd_body;
	if (cmd->type == TYPE_NULL){				// means GET the value
		ritorno(cmd_get(cmd));					// ritorno returns w/status on any errors
	} else {
		ritorno(cmd_set(cmd));					// set value or call a function (e.g. gcode)
		cmd_persist(cmd);
    2a3a:	62 e0       	ldi	r22, 0x02	; 2
    2a3c:	d6 2e       	mov	r13, r22
    2a3e:	9d cf       	rjmp	.-198    	; 0x297a <_json_parser_kernal+0x2aa>
    2a40:	10 e3       	ldi	r17, 0x30	; 48
    2a42:	e1 cf       	rjmp	.-62     	; 0x2a06 <_json_parser_kernal+0x336>

00002a44 <json_parser>:
 *	  _json_parser_kernal() does index validation and group handling and executes sets and gets
 *		in an application agnostic way. It should work for other apps than TinyG 
 */

void json_parser(char *str)
{
    2a44:	0f 93       	push	r16
    2a46:	1f 93       	push	r17
    2a48:	8c 01       	movw	r16, r24
	cmd_reset_list();				// get a fresh cmdObj list
    2a4a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <cmd_reset_list>
	uint8_t status = _json_parser_kernal(str);
    2a4e:	c8 01       	movw	r24, r16
    2a50:	0e 94 68 13 	call	0x26d0	; 0x26d0 <_json_parser_kernal>
	cmd_print_list(status, TEXT_NO_PRINT, JSON_RESPONSE_FORMAT);
    2a54:	60 e0       	ldi	r22, 0x00	; 0
    2a56:	42 e0       	ldi	r20, 0x02	; 2
    2a58:	0e 94 67 0e 	call	0x1cce	; 0x1cce <cmd_print_list>
//	rpt_request_status_report();	// generate an incremental status report if there are system state changes
}
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	08 95       	ret

00002a62 <xio_init_file>:
 *	xio_init_file() - general purpose FILE device initialization (shared)
 *					  requires open() to be performed to complete the device init
 */
xioDev_t *xio_init_file(uint8_t dev)
{
	file0.dev = dev;	// overwite the structure initialization value in case it was wrong
    2a62:	80 93 78 02 	sts	0x0278, r24
	return (&file0);
}
    2a66:	88 e7       	ldi	r24, 0x78	; 120
    2a68:	92 e0       	ldi	r25, 0x02	; 2
    2a6a:	08 95       	ret

00002a6c <xio_putc_pgm>:
 *  Always returns error. You cannot write to program memory
 */
int xio_putc_pgm(const char c, FILE *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    2a6c:	8f ef       	ldi	r24, 0xFF	; 255
    2a6e:	9f ef       	ldi	r25, 0xFF	; 255
    2a70:	08 95       	ret

00002a72 <xio_gets_pgm>:
 *
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */
int xio_gets_pgm(xioDev_t *d, char *buf, const int size)
{
    2a72:	0f 93       	push	r16
    2a74:	1f 93       	push	r17
    2a76:	cf 93       	push	r28
    2a78:	df 93       	push	r29
    2a7a:	ec 01       	movw	r28, r24
	if ((PGMx->filebase_P) == 0) {		// return error if no file is open
    2a7c:	e9 89       	ldd	r30, Y+17	; 0x11
    2a7e:	fa 89       	ldd	r31, Y+18	; 0x12
    2a80:	84 85       	ldd	r24, Z+12	; 0x0c
    2a82:	95 85       	ldd	r25, Z+13	; 0x0d
    2a84:	89 2b       	or	r24, r25
    2a86:	19 f4       	brne	.+6      	; 0x2a8e <xio_gets_pgm+0x1c>
    2a88:	29 e0       	ldi	r18, 0x09	; 9
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	16 c0       	rjmp	.+44     	; 0x2aba <xio_gets_pgm+0x48>
		return (XIO_FILE_NOT_OPEN);
	}
	if (fgets(buf, size, &d->stream) == NULL) {
    2a8e:	8e 01       	movw	r16, r28
    2a90:	0d 5e       	subi	r16, 0xED	; 237
    2a92:	1f 4f       	sbci	r17, 0xFF	; 255
    2a94:	cb 01       	movw	r24, r22
    2a96:	ba 01       	movw	r22, r20
    2a98:	a8 01       	movw	r20, r16
    2a9a:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <fgets>
    2a9e:	89 2b       	or	r24, r25
    2aa0:	19 f0       	breq	.+6      	; 0x2aa8 <xio_gets_pgm+0x36>
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	09 c0       	rjmp	.+18     	; 0x2aba <xio_gets_pgm+0x48>
		PGMx->filebase_P = NULL;
    2aa8:	e9 89       	ldd	r30, Y+17	; 0x11
    2aaa:	fa 89       	ldd	r31, Y+18	; 0x12
    2aac:	15 86       	std	Z+13, r1	; 0x0d
    2aae:	14 86       	std	Z+12, r1	; 0x0c
//		clearerr(&PGM.file);
		clearerr(&d->stream);
    2ab0:	c8 01       	movw	r24, r16
    2ab2:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clearerr>
    2ab6:	28 e0       	ldi	r18, 0x08	; 8
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
		return (XIO_EOF);
	}
	return (XIO_OK);
}
    2aba:	c9 01       	movw	r24, r18
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	08 95       	ret

00002ac6 <xio_getc_pgm>:
 *  ECHO behaviors
 *		- if ECHO is enabled echo character to stdout
 *		- echo all line termination chars as newlines ('\n')
 */
int xio_getc_pgm(FILE *stream)
{
    2ac6:	1f 93       	push	r17
    2ac8:	cf 93       	push	r28
    2aca:	df 93       	push	r29
	char c;
	xioDev_t *d = (xioDev_t *)stream->udata;
    2acc:	fc 01       	movw	r30, r24
    2ace:	c4 85       	ldd	r28, Z+12	; 0x0c
    2ad0:	d5 85       	ldd	r29, Z+13	; 0x0d

	if (d->flag_eof) { return (_FDEV_EOF);}
    2ad2:	8e a1       	ldd	r24, Y+38	; 0x26
    2ad4:	88 23       	and	r24, r24
    2ad6:	19 f0       	breq	.+6      	; 0x2ade <xio_getc_pgm+0x18>
    2ad8:	2e ef       	ldi	r18, 0xFE	; 254
    2ada:	3f ef       	ldi	r19, 0xFF	; 255
    2adc:	30 c0       	rjmp	.+96     	; 0x2b3e <xio_getc_pgm+0x78>
	if ((c = pgm_read_byte(&PGMx->filebase_P[PGMx->rd_offset])) == NUL) {
    2ade:	e9 89       	ldd	r30, Y+17	; 0x11
    2ae0:	fa 89       	ldd	r31, Y+18	; 0x12
    2ae2:	84 85       	ldd	r24, Z+12	; 0x0c
    2ae4:	95 85       	ldd	r25, Z+13	; 0x0d
    2ae6:	20 81       	ld	r18, Z
    2ae8:	31 81       	ldd	r19, Z+1	; 0x01
    2aea:	82 0f       	add	r24, r18
    2aec:	93 1f       	adc	r25, r19
    2aee:	fc 01       	movw	r30, r24
    2af0:	14 91       	lpm	r17, Z+
    2af2:	11 23       	and	r17, r17
    2af4:	11 f4       	brne	.+4      	; 0x2afa <xio_getc_pgm+0x34>
		d->flag_eof = true;
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	8e a3       	std	Y+38, r24	; 0x26
	}
	++(PGMx->rd_offset);
    2afa:	e9 89       	ldd	r30, Y+17	; 0x11
    2afc:	fa 89       	ldd	r31, Y+18	; 0x12
    2afe:	80 81       	ld	r24, Z
    2b00:	91 81       	ldd	r25, Z+1	; 0x01
    2b02:	a2 81       	ldd	r26, Z+2	; 0x02
    2b04:	b3 81       	ldd	r27, Z+3	; 0x03
    2b06:	01 96       	adiw	r24, 0x01	; 1
    2b08:	a1 1d       	adc	r26, r1
    2b0a:	b1 1d       	adc	r27, r1
    2b0c:	80 83       	st	Z, r24
    2b0e:	91 83       	std	Z+1, r25	; 0x01
    2b10:	a2 83       	std	Z+2, r26	; 0x02
    2b12:	b3 83       	std	Z+3, r27	; 0x03

	// processing is simple if not in LINEMODE
	if (d->flag_linemode == false) {
    2b14:	8b a1       	ldd	r24, Y+35	; 0x23
    2b16:	88 23       	and	r24, r24
    2b18:	29 f0       	breq	.+10     	; 0x2b24 <xio_getc_pgm+0x5e>
		if (d->flag_echo) putchar(c);		// conditional echo
		return (c);
	}
	// now do the LINEMODE stuff
	if (c == NUL) {							// perform newline substitutions
    2b1a:	11 23       	and	r17, r17
    2b1c:	11 f0       	breq	.+4      	; 0x2b22 <xio_getc_pgm+0x5c>
		c = '\n';
	} else if (c == '\r') {
    2b1e:	1d 30       	cpi	r17, 0x0D	; 13
    2b20:	09 f4       	brne	.+2      	; 0x2b24 <xio_getc_pgm+0x5e>
    2b22:	1a e0       	ldi	r17, 0x0A	; 10
		c = '\n';
	}
	if (d->flag_echo) putchar(c);			// conditional echo
    2b24:	8a a1       	ldd	r24, Y+34	; 0x22
    2b26:	88 23       	and	r24, r24
    2b28:	41 f0       	breq	.+16     	; 0x2b3a <xio_getc_pgm+0x74>
    2b2a:	60 91 7c 06 	lds	r22, 0x067C
    2b2e:	70 91 7d 06 	lds	r23, 0x067D
    2b32:	81 2f       	mov	r24, r17
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
	return (c);
    2b3a:	21 2f       	mov	r18, r17
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
}
    2b3e:	c9 01       	movw	r24, r18
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	1f 91       	pop	r17
    2b46:	08 95       	ret

00002b48 <xio_open_pgm>:
 *
 *	OK, so this is not really a UNIX open() except for its moral equivalent
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */
FILE *xio_open_pgm(const uint8_t dev, const char *addr, const flags_t flags)
{
    2b48:	ef 92       	push	r14
    2b4a:	ff 92       	push	r15
    2b4c:	0f 93       	push	r16
    2b4e:	1f 93       	push	r17
    2b50:	7b 01       	movw	r14, r22
	xioDev_t *d = ds[dev];			// convenience device struct pointer
    2b52:	e8 2f       	mov	r30, r24
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	ee 0f       	add	r30, r30
    2b58:	ff 1f       	adc	r31, r31
    2b5a:	e0 5e       	subi	r30, 0xE0	; 224
    2b5c:	fb 4f       	sbci	r31, 0xFB	; 251
    2b5e:	00 81       	ld	r16, Z
    2b60:	11 81       	ldd	r17, Z+1	; 0x01
	xio_reset_device(d, flags);
    2b62:	c8 01       	movw	r24, r16
    2b64:	ba 01       	movw	r22, r20
    2b66:	0e 94 56 04 	call	0x8ac	; 0x8ac <xio_reset_device>
//	((xioFile_t *)(d->x))->filebase_P = (PROGMEM const char *)addr;	// might want to range check this
//	((xioFile_t *)(d->x))->max_offset = PGM_ADDR_MAX;
	PGMx->filebase_P = (PROGMEM const char *)addr;	// might want to range check this
    2b6a:	d8 01       	movw	r26, r16
    2b6c:	51 96       	adiw	r26, 0x11	; 17
    2b6e:	ed 91       	ld	r30, X+
    2b70:	fc 91       	ld	r31, X
    2b72:	52 97       	sbiw	r26, 0x12	; 18
    2b74:	f5 86       	std	Z+13, r15	; 0x0d
    2b76:	e4 86       	std	Z+12, r14	; 0x0c
	PGMx->max_offset = PGM_ADDR_MAX;
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	90 e4       	ldi	r25, 0x40	; 64
    2b7c:	a0 e0       	ldi	r26, 0x00	; 0
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	80 87       	std	Z+8, r24	; 0x08
    2b82:	91 87       	std	Z+9, r25	; 0x09
    2b84:	a2 87       	std	Z+10, r26	; 0x0a
    2b86:	b3 87       	std	Z+11, r27	; 0x0b
    2b88:	0d 5e       	subi	r16, 0xED	; 237
    2b8a:	1f 4f       	sbci	r17, 0xFF	; 255
	return (&d->stream);			// return stdio FILE reference
}
    2b8c:	c8 01       	movw	r24, r16
    2b8e:	1f 91       	pop	r17
    2b90:	0f 91       	pop	r16
    2b92:	ff 90       	pop	r15
    2b94:	ef 90       	pop	r14
    2b96:	08 95       	ret

00002b98 <cmd_index_lt_max>:
#define CMD_INDEX_END_SINGLES		(CMD_INDEX_MAX - CMD_COUNT_UBER_GROUPS - CMD_COUNT_GROUPS)
#define CMD_INDEX_START_GROUPS		(CMD_INDEX_MAX - CMD_COUNT_UBER_GROUPS - CMD_COUNT_GROUPS)
#define CMD_INDEX_START_UBER_GROUPS (CMD_INDEX_MAX - CMD_COUNT_UBER_GROUPS)

//index_t cmd_get_max_index() { return (CMD_INDEX_MAX);}
uint8_t cmd_index_lt_max(index_t index) { return ((index < CMD_INDEX_MAX) ? true : false);}
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	8a 31       	cpi	r24, 0x1A	; 26
    2b9c:	08 f4       	brcc	.+2      	; 0x2ba0 <cmd_index_lt_max+0x8>
    2b9e:	91 e0       	ldi	r25, 0x01	; 1
    2ba0:	89 2f       	mov	r24, r25
    2ba2:	08 95       	ret

00002ba4 <cmd_index_is_single>:
uint8_t cmd_index_is_single(index_t index) { return ((index <= CMD_INDEX_END_SINGLES) ? true : false);}
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	87 31       	cpi	r24, 0x17	; 23
    2ba8:	08 f4       	brcc	.+2      	; 0x2bac <cmd_index_is_single+0x8>
    2baa:	91 e0       	ldi	r25, 0x01	; 1
    2bac:	89 2f       	mov	r24, r25
    2bae:	08 95       	ret

00002bb0 <cmd_index_is_group>:
uint8_t cmd_index_is_group(index_t index) { return (((index >= CMD_INDEX_START_GROUPS) && (index < CMD_INDEX_START_UBER_GROUPS)) ? true : false);}
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	86 51       	subi	r24, 0x16	; 22
    2bb4:	84 30       	cpi	r24, 0x04	; 4
    2bb6:	08 f4       	brcc	.+2      	; 0x2bba <cmd_index_is_group+0xa>
    2bb8:	91 e0       	ldi	r25, 0x01	; 1
    2bba:	89 2f       	mov	r24, r25
    2bbc:	08 95       	ret

00002bbe <cmd_index_lt_groups>:
uint8_t cmd_index_lt_groups(index_t index) { return ((index <= CMD_INDEX_START_GROUPS) ? true : false);}
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	87 31       	cpi	r24, 0x17	; 23
    2bc2:	08 f4       	brcc	.+2      	; 0x2bc6 <cmd_index_lt_groups+0x8>
    2bc4:	91 e0       	ldi	r25, 0x01	; 1
    2bc6:	89 2f       	mov	r24, r25
    2bc8:	08 95       	ret

00002bca <vfprintf>:
    2bca:	a1 e1       	ldi	r26, 0x11	; 17
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	eb ee       	ldi	r30, 0xEB	; 235
    2bd0:	f5 e1       	ldi	r31, 0x15	; 21
    2bd2:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__prologue_saves__>
    2bd6:	3c 01       	movw	r6, r24
    2bd8:	7f 87       	std	Y+15, r23	; 0x0f
    2bda:	6e 87       	std	Y+14, r22	; 0x0e
    2bdc:	6a 01       	movw	r12, r20
    2bde:	fc 01       	movw	r30, r24
    2be0:	17 82       	std	Z+7, r1	; 0x07
    2be2:	16 82       	std	Z+6, r1	; 0x06
    2be4:	83 81       	ldd	r24, Z+3	; 0x03
    2be6:	81 fd       	sbrc	r24, 1
    2be8:	03 c0       	rjmp	.+6      	; 0x2bf0 <vfprintf+0x26>
    2bea:	6f ef       	ldi	r22, 0xFF	; 255
    2bec:	7f ef       	ldi	r23, 0xFF	; 255
    2bee:	6f c3       	rjmp	.+1758   	; 0x32ce <vfprintf+0x704>
    2bf0:	9e 01       	movw	r18, r28
    2bf2:	2f 5f       	subi	r18, 0xFF	; 255
    2bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf6:	39 8b       	std	Y+17, r19	; 0x11
    2bf8:	28 8b       	std	Y+16, r18	; 0x10
    2bfa:	f3 01       	movw	r30, r6
    2bfc:	23 81       	ldd	r18, Z+3	; 0x03
    2bfe:	ee 85       	ldd	r30, Y+14	; 0x0e
    2c00:	ff 85       	ldd	r31, Y+15	; 0x0f
    2c02:	23 fd       	sbrc	r18, 3
    2c04:	85 91       	lpm	r24, Z+
    2c06:	23 ff       	sbrs	r18, 3
    2c08:	81 91       	ld	r24, Z+
    2c0a:	ff 87       	std	Y+15, r31	; 0x0f
    2c0c:	ee 87       	std	Y+14, r30	; 0x0e
    2c0e:	88 23       	and	r24, r24
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <vfprintf+0x4a>
    2c12:	5a c3       	rjmp	.+1716   	; 0x32c8 <vfprintf+0x6fe>
    2c14:	85 32       	cpi	r24, 0x25	; 37
    2c16:	51 f4       	brne	.+20     	; 0x2c2c <vfprintf+0x62>
    2c18:	ee 85       	ldd	r30, Y+14	; 0x0e
    2c1a:	ff 85       	ldd	r31, Y+15	; 0x0f
    2c1c:	23 fd       	sbrc	r18, 3
    2c1e:	85 91       	lpm	r24, Z+
    2c20:	23 ff       	sbrs	r18, 3
    2c22:	81 91       	ld	r24, Z+
    2c24:	ff 87       	std	Y+15, r31	; 0x0f
    2c26:	ee 87       	std	Y+14, r30	; 0x0e
    2c28:	85 32       	cpi	r24, 0x25	; 37
    2c2a:	29 f4       	brne	.+10     	; 0x2c36 <vfprintf+0x6c>
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	b3 01       	movw	r22, r6
    2c30:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    2c34:	e2 cf       	rjmp	.-60     	; 0x2bfa <vfprintf+0x30>
    2c36:	98 2f       	mov	r25, r24
    2c38:	10 e0       	ldi	r17, 0x00	; 0
    2c3a:	88 24       	eor	r8, r8
    2c3c:	99 24       	eor	r9, r9
    2c3e:	10 32       	cpi	r17, 0x20	; 32
    2c40:	b0 f4       	brcc	.+44     	; 0x2c6e <vfprintf+0xa4>
    2c42:	9b 32       	cpi	r25, 0x2B	; 43
    2c44:	69 f0       	breq	.+26     	; 0x2c60 <vfprintf+0x96>
    2c46:	9c 32       	cpi	r25, 0x2C	; 44
    2c48:	28 f4       	brcc	.+10     	; 0x2c54 <vfprintf+0x8a>
    2c4a:	90 32       	cpi	r25, 0x20	; 32
    2c4c:	51 f0       	breq	.+20     	; 0x2c62 <vfprintf+0x98>
    2c4e:	93 32       	cpi	r25, 0x23	; 35
    2c50:	71 f4       	brne	.+28     	; 0x2c6e <vfprintf+0xa4>
    2c52:	0b c0       	rjmp	.+22     	; 0x2c6a <vfprintf+0xa0>
    2c54:	9d 32       	cpi	r25, 0x2D	; 45
    2c56:	39 f0       	breq	.+14     	; 0x2c66 <vfprintf+0x9c>
    2c58:	90 33       	cpi	r25, 0x30	; 48
    2c5a:	49 f4       	brne	.+18     	; 0x2c6e <vfprintf+0xa4>
    2c5c:	11 60       	ori	r17, 0x01	; 1
    2c5e:	28 c0       	rjmp	.+80     	; 0x2cb0 <vfprintf+0xe6>
    2c60:	12 60       	ori	r17, 0x02	; 2
    2c62:	14 60       	ori	r17, 0x04	; 4
    2c64:	25 c0       	rjmp	.+74     	; 0x2cb0 <vfprintf+0xe6>
    2c66:	18 60       	ori	r17, 0x08	; 8
    2c68:	23 c0       	rjmp	.+70     	; 0x2cb0 <vfprintf+0xe6>
    2c6a:	10 61       	ori	r17, 0x10	; 16
    2c6c:	21 c0       	rjmp	.+66     	; 0x2cb0 <vfprintf+0xe6>
    2c6e:	17 fd       	sbrc	r17, 7
    2c70:	2a c0       	rjmp	.+84     	; 0x2cc6 <vfprintf+0xfc>
    2c72:	89 2f       	mov	r24, r25
    2c74:	80 53       	subi	r24, 0x30	; 48
    2c76:	8a 30       	cpi	r24, 0x0A	; 10
    2c78:	78 f4       	brcc	.+30     	; 0x2c98 <vfprintf+0xce>
    2c7a:	16 ff       	sbrs	r17, 6
    2c7c:	06 c0       	rjmp	.+12     	; 0x2c8a <vfprintf+0xc0>
    2c7e:	fa e0       	ldi	r31, 0x0A	; 10
    2c80:	9f 9e       	mul	r9, r31
    2c82:	90 2c       	mov	r9, r0
    2c84:	11 24       	eor	r1, r1
    2c86:	98 0e       	add	r9, r24
    2c88:	13 c0       	rjmp	.+38     	; 0x2cb0 <vfprintf+0xe6>
    2c8a:	3a e0       	ldi	r19, 0x0A	; 10
    2c8c:	83 9e       	mul	r8, r19
    2c8e:	80 2c       	mov	r8, r0
    2c90:	11 24       	eor	r1, r1
    2c92:	88 0e       	add	r8, r24
    2c94:	10 62       	ori	r17, 0x20	; 32
    2c96:	0c c0       	rjmp	.+24     	; 0x2cb0 <vfprintf+0xe6>
    2c98:	9e 32       	cpi	r25, 0x2E	; 46
    2c9a:	21 f4       	brne	.+8      	; 0x2ca4 <vfprintf+0xda>
    2c9c:	16 fd       	sbrc	r17, 6
    2c9e:	14 c3       	rjmp	.+1576   	; 0x32c8 <vfprintf+0x6fe>
    2ca0:	10 64       	ori	r17, 0x40	; 64
    2ca2:	06 c0       	rjmp	.+12     	; 0x2cb0 <vfprintf+0xe6>
    2ca4:	9c 36       	cpi	r25, 0x6C	; 108
    2ca6:	11 f4       	brne	.+4      	; 0x2cac <vfprintf+0xe2>
    2ca8:	10 68       	ori	r17, 0x80	; 128
    2caa:	02 c0       	rjmp	.+4      	; 0x2cb0 <vfprintf+0xe6>
    2cac:	98 36       	cpi	r25, 0x68	; 104
    2cae:	59 f4       	brne	.+22     	; 0x2cc6 <vfprintf+0xfc>
    2cb0:	ee 85       	ldd	r30, Y+14	; 0x0e
    2cb2:	ff 85       	ldd	r31, Y+15	; 0x0f
    2cb4:	23 fd       	sbrc	r18, 3
    2cb6:	95 91       	lpm	r25, Z+
    2cb8:	23 ff       	sbrs	r18, 3
    2cba:	91 91       	ld	r25, Z+
    2cbc:	ff 87       	std	Y+15, r31	; 0x0f
    2cbe:	ee 87       	std	Y+14, r30	; 0x0e
    2cc0:	99 23       	and	r25, r25
    2cc2:	09 f0       	breq	.+2      	; 0x2cc6 <vfprintf+0xfc>
    2cc4:	bc cf       	rjmp	.-136    	; 0x2c3e <vfprintf+0x74>
    2cc6:	89 2f       	mov	r24, r25
    2cc8:	85 54       	subi	r24, 0x45	; 69
    2cca:	83 30       	cpi	r24, 0x03	; 3
    2ccc:	20 f4       	brcc	.+8      	; 0x2cd6 <vfprintf+0x10c>
    2cce:	81 2f       	mov	r24, r17
    2cd0:	80 61       	ori	r24, 0x10	; 16
    2cd2:	90 5e       	subi	r25, 0xE0	; 224
    2cd4:	07 c0       	rjmp	.+14     	; 0x2ce4 <vfprintf+0x11a>
    2cd6:	89 2f       	mov	r24, r25
    2cd8:	85 56       	subi	r24, 0x65	; 101
    2cda:	83 30       	cpi	r24, 0x03	; 3
    2cdc:	08 f0       	brcs	.+2      	; 0x2ce0 <vfprintf+0x116>
    2cde:	9f c1       	rjmp	.+830    	; 0x301e <vfprintf+0x454>
    2ce0:	81 2f       	mov	r24, r17
    2ce2:	8f 7e       	andi	r24, 0xEF	; 239
    2ce4:	86 fd       	sbrc	r24, 6
    2ce6:	02 c0       	rjmp	.+4      	; 0x2cec <vfprintf+0x122>
    2ce8:	76 e0       	ldi	r23, 0x06	; 6
    2cea:	97 2e       	mov	r9, r23
    2cec:	6f e3       	ldi	r22, 0x3F	; 63
    2cee:	f6 2e       	mov	r15, r22
    2cf0:	f8 22       	and	r15, r24
    2cf2:	95 36       	cpi	r25, 0x65	; 101
    2cf4:	19 f4       	brne	.+6      	; 0x2cfc <vfprintf+0x132>
    2cf6:	f0 e4       	ldi	r31, 0x40	; 64
    2cf8:	ff 2a       	or	r15, r31
    2cfa:	07 c0       	rjmp	.+14     	; 0x2d0a <vfprintf+0x140>
    2cfc:	96 36       	cpi	r25, 0x66	; 102
    2cfe:	19 f4       	brne	.+6      	; 0x2d06 <vfprintf+0x13c>
    2d00:	20 e8       	ldi	r18, 0x80	; 128
    2d02:	f2 2a       	or	r15, r18
    2d04:	02 c0       	rjmp	.+4      	; 0x2d0a <vfprintf+0x140>
    2d06:	91 10       	cpse	r9, r1
    2d08:	9a 94       	dec	r9
    2d0a:	f7 fe       	sbrs	r15, 7
    2d0c:	0a c0       	rjmp	.+20     	; 0x2d22 <vfprintf+0x158>
    2d0e:	3b e3       	ldi	r19, 0x3B	; 59
    2d10:	39 15       	cp	r19, r9
    2d12:	18 f4       	brcc	.+6      	; 0x2d1a <vfprintf+0x150>
    2d14:	5c e3       	ldi	r21, 0x3C	; 60
    2d16:	b5 2e       	mov	r11, r21
    2d18:	02 c0       	rjmp	.+4      	; 0x2d1e <vfprintf+0x154>
    2d1a:	b9 2c       	mov	r11, r9
    2d1c:	b3 94       	inc	r11
    2d1e:	27 e0       	ldi	r18, 0x07	; 7
    2d20:	09 c0       	rjmp	.+18     	; 0x2d34 <vfprintf+0x16a>
    2d22:	47 e0       	ldi	r20, 0x07	; 7
    2d24:	49 15       	cp	r20, r9
    2d26:	20 f4       	brcc	.+8      	; 0x2d30 <vfprintf+0x166>
    2d28:	bb 24       	eor	r11, r11
    2d2a:	47 e0       	ldi	r20, 0x07	; 7
    2d2c:	94 2e       	mov	r9, r20
    2d2e:	f7 cf       	rjmp	.-18     	; 0x2d1e <vfprintf+0x154>
    2d30:	29 2d       	mov	r18, r9
    2d32:	bb 24       	eor	r11, r11
    2d34:	c6 01       	movw	r24, r12
    2d36:	04 96       	adiw	r24, 0x04	; 4
    2d38:	9d 87       	std	Y+13, r25	; 0x0d
    2d3a:	8c 87       	std	Y+12, r24	; 0x0c
    2d3c:	f6 01       	movw	r30, r12
    2d3e:	60 81       	ld	r22, Z
    2d40:	71 81       	ldd	r23, Z+1	; 0x01
    2d42:	82 81       	ldd	r24, Z+2	; 0x02
    2d44:	93 81       	ldd	r25, Z+3	; 0x03
    2d46:	ae 01       	movw	r20, r28
    2d48:	4f 5f       	subi	r20, 0xFF	; 255
    2d4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d4c:	0b 2d       	mov	r16, r11
    2d4e:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__ftoa_engine>
    2d52:	6c 01       	movw	r12, r24
    2d54:	09 81       	ldd	r16, Y+1	; 0x01
    2d56:	20 2e       	mov	r2, r16
    2d58:	33 24       	eor	r3, r3
    2d5a:	00 ff       	sbrs	r16, 0
    2d5c:	04 c0       	rjmp	.+8      	; 0x2d66 <vfprintf+0x19c>
    2d5e:	03 fd       	sbrc	r16, 3
    2d60:	02 c0       	rjmp	.+4      	; 0x2d66 <vfprintf+0x19c>
    2d62:	1d e2       	ldi	r17, 0x2D	; 45
    2d64:	09 c0       	rjmp	.+18     	; 0x2d78 <vfprintf+0x1ae>
    2d66:	f1 fe       	sbrs	r15, 1
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <vfprintf+0x1a4>
    2d6a:	1b e2       	ldi	r17, 0x2B	; 43
    2d6c:	05 c0       	rjmp	.+10     	; 0x2d78 <vfprintf+0x1ae>
    2d6e:	f2 fc       	sbrc	r15, 2
    2d70:	02 c0       	rjmp	.+4      	; 0x2d76 <vfprintf+0x1ac>
    2d72:	10 e0       	ldi	r17, 0x00	; 0
    2d74:	01 c0       	rjmp	.+2      	; 0x2d78 <vfprintf+0x1ae>
    2d76:	10 e2       	ldi	r17, 0x20	; 32
    2d78:	c1 01       	movw	r24, r2
    2d7a:	8c 70       	andi	r24, 0x0C	; 12
    2d7c:	90 70       	andi	r25, 0x00	; 0
    2d7e:	89 2b       	or	r24, r25
    2d80:	b9 f1       	breq	.+110    	; 0x2df0 <vfprintf+0x226>
    2d82:	11 23       	and	r17, r17
    2d84:	11 f4       	brne	.+4      	; 0x2d8a <vfprintf+0x1c0>
    2d86:	83 e0       	ldi	r24, 0x03	; 3
    2d88:	01 c0       	rjmp	.+2      	; 0x2d8c <vfprintf+0x1c2>
    2d8a:	84 e0       	ldi	r24, 0x04	; 4
    2d8c:	88 15       	cp	r24, r8
    2d8e:	10 f0       	brcs	.+4      	; 0x2d94 <vfprintf+0x1ca>
    2d90:	88 24       	eor	r8, r8
    2d92:	0a c0       	rjmp	.+20     	; 0x2da8 <vfprintf+0x1de>
    2d94:	88 1a       	sub	r8, r24
    2d96:	f3 fc       	sbrc	r15, 3
    2d98:	07 c0       	rjmp	.+14     	; 0x2da8 <vfprintf+0x1de>
    2d9a:	80 e2       	ldi	r24, 0x20	; 32
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	b3 01       	movw	r22, r6
    2da0:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    2da4:	8a 94       	dec	r8
    2da6:	c9 f7       	brne	.-14     	; 0x2d9a <vfprintf+0x1d0>
    2da8:	11 23       	and	r17, r17
    2daa:	29 f0       	breq	.+10     	; 0x2db6 <vfprintf+0x1ec>
    2dac:	81 2f       	mov	r24, r17
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	b3 01       	movw	r22, r6
    2db2:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    2db6:	23 fe       	sbrs	r2, 3
    2db8:	03 c0       	rjmp	.+6      	; 0x2dc0 <vfprintf+0x1f6>
    2dba:	08 e6       	ldi	r16, 0x68	; 104
    2dbc:	10 e0       	ldi	r17, 0x00	; 0
    2dbe:	0e c0       	rjmp	.+28     	; 0x2ddc <vfprintf+0x212>
    2dc0:	0c e6       	ldi	r16, 0x6C	; 108
    2dc2:	10 e0       	ldi	r17, 0x00	; 0
    2dc4:	0b c0       	rjmp	.+22     	; 0x2ddc <vfprintf+0x212>
    2dc6:	e1 14       	cp	r14, r1
    2dc8:	f1 04       	cpc	r15, r1
    2dca:	09 f0       	breq	.+2      	; 0x2dce <vfprintf+0x204>
    2dcc:	80 52       	subi	r24, 0x20	; 32
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	b3 01       	movw	r22, r6
    2dd2:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    2dd6:	0f 5f       	subi	r16, 0xFF	; 255
    2dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dda:	05 c0       	rjmp	.+10     	; 0x2de6 <vfprintf+0x21c>
    2ddc:	ef 2c       	mov	r14, r15
    2dde:	ff 24       	eor	r15, r15
    2de0:	f0 e1       	ldi	r31, 0x10	; 16
    2de2:	ef 22       	and	r14, r31
    2de4:	ff 24       	eor	r15, r15
    2de6:	f8 01       	movw	r30, r16
    2de8:	84 91       	lpm	r24, Z+
    2dea:	88 23       	and	r24, r24
    2dec:	61 f7       	brne	.-40     	; 0x2dc6 <vfprintf+0x1fc>
    2dee:	14 c1       	rjmp	.+552    	; 0x3018 <vfprintf+0x44e>
    2df0:	f7 fe       	sbrs	r15, 7
    2df2:	12 c0       	rjmp	.+36     	; 0x2e18 <vfprintf+0x24e>
    2df4:	bc 0c       	add	r11, r12
    2df6:	24 fe       	sbrs	r2, 4
    2df8:	04 c0       	rjmp	.+8      	; 0x2e02 <vfprintf+0x238>
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	81 33       	cpi	r24, 0x31	; 49
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <vfprintf+0x238>
    2e00:	ba 94       	dec	r11
    2e02:	1b 14       	cp	r1, r11
    2e04:	1c f0       	brlt	.+6      	; 0x2e0c <vfprintf+0x242>
    2e06:	bb 24       	eor	r11, r11
    2e08:	b3 94       	inc	r11
    2e0a:	2d c0       	rjmp	.+90     	; 0x2e66 <vfprintf+0x29c>
    2e0c:	f8 e0       	ldi	r31, 0x08	; 8
    2e0e:	fb 15       	cp	r31, r11
    2e10:	50 f5       	brcc	.+84     	; 0x2e66 <vfprintf+0x29c>
    2e12:	38 e0       	ldi	r19, 0x08	; 8
    2e14:	b3 2e       	mov	r11, r19
    2e16:	27 c0       	rjmp	.+78     	; 0x2e66 <vfprintf+0x29c>
    2e18:	f6 fc       	sbrc	r15, 6
    2e1a:	25 c0       	rjmp	.+74     	; 0x2e66 <vfprintf+0x29c>
    2e1c:	89 2d       	mov	r24, r9
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	8c 15       	cp	r24, r12
    2e22:	9d 05       	cpc	r25, r13
    2e24:	4c f0       	brlt	.+18     	; 0x2e38 <vfprintf+0x26e>
    2e26:	2c ef       	ldi	r18, 0xFC	; 252
    2e28:	c2 16       	cp	r12, r18
    2e2a:	2f ef       	ldi	r18, 0xFF	; 255
    2e2c:	d2 06       	cpc	r13, r18
    2e2e:	24 f0       	brlt	.+8      	; 0x2e38 <vfprintf+0x26e>
    2e30:	30 e8       	ldi	r19, 0x80	; 128
    2e32:	f3 2a       	or	r15, r19
    2e34:	01 c0       	rjmp	.+2      	; 0x2e38 <vfprintf+0x26e>
    2e36:	9a 94       	dec	r9
    2e38:	99 20       	and	r9, r9
    2e3a:	49 f0       	breq	.+18     	; 0x2e4e <vfprintf+0x284>
    2e3c:	e2 e0       	ldi	r30, 0x02	; 2
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	ec 0f       	add	r30, r28
    2e42:	fd 1f       	adc	r31, r29
    2e44:	e9 0d       	add	r30, r9
    2e46:	f1 1d       	adc	r31, r1
    2e48:	80 81       	ld	r24, Z
    2e4a:	80 33       	cpi	r24, 0x30	; 48
    2e4c:	a1 f3       	breq	.-24     	; 0x2e36 <vfprintf+0x26c>
    2e4e:	f7 fe       	sbrs	r15, 7
    2e50:	0a c0       	rjmp	.+20     	; 0x2e66 <vfprintf+0x29c>
    2e52:	b9 2c       	mov	r11, r9
    2e54:	b3 94       	inc	r11
    2e56:	89 2d       	mov	r24, r9
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	c8 16       	cp	r12, r24
    2e5c:	d9 06       	cpc	r13, r25
    2e5e:	14 f0       	brlt	.+4      	; 0x2e64 <vfprintf+0x29a>
    2e60:	99 24       	eor	r9, r9
    2e62:	01 c0       	rjmp	.+2      	; 0x2e66 <vfprintf+0x29c>
    2e64:	9c 18       	sub	r9, r12
    2e66:	f7 fc       	sbrc	r15, 7
    2e68:	03 c0       	rjmp	.+6      	; 0x2e70 <vfprintf+0x2a6>
    2e6a:	25 e0       	ldi	r18, 0x05	; 5
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	09 c0       	rjmp	.+18     	; 0x2e82 <vfprintf+0x2b8>
    2e70:	1c 14       	cp	r1, r12
    2e72:	1d 04       	cpc	r1, r13
    2e74:	1c f0       	brlt	.+6      	; 0x2e7c <vfprintf+0x2b2>
    2e76:	21 e0       	ldi	r18, 0x01	; 1
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	03 c0       	rjmp	.+6      	; 0x2e82 <vfprintf+0x2b8>
    2e7c:	96 01       	movw	r18, r12
    2e7e:	2f 5f       	subi	r18, 0xFF	; 255
    2e80:	3f 4f       	sbci	r19, 0xFF	; 255
    2e82:	11 23       	and	r17, r17
    2e84:	11 f0       	breq	.+4      	; 0x2e8a <vfprintf+0x2c0>
    2e86:	2f 5f       	subi	r18, 0xFF	; 255
    2e88:	3f 4f       	sbci	r19, 0xFF	; 255
    2e8a:	99 20       	and	r9, r9
    2e8c:	29 f0       	breq	.+10     	; 0x2e98 <vfprintf+0x2ce>
    2e8e:	89 2d       	mov	r24, r9
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	01 96       	adiw	r24, 0x01	; 1
    2e94:	28 0f       	add	r18, r24
    2e96:	39 1f       	adc	r19, r25
    2e98:	88 2d       	mov	r24, r8
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	28 17       	cp	r18, r24
    2e9e:	39 07       	cpc	r19, r25
    2ea0:	14 f0       	brlt	.+4      	; 0x2ea6 <vfprintf+0x2dc>
    2ea2:	88 24       	eor	r8, r8
    2ea4:	01 c0       	rjmp	.+2      	; 0x2ea8 <vfprintf+0x2de>
    2ea6:	82 1a       	sub	r8, r18
    2ea8:	4f 2c       	mov	r4, r15
    2eaa:	55 24       	eor	r5, r5
    2eac:	c2 01       	movw	r24, r4
    2eae:	89 70       	andi	r24, 0x09	; 9
    2eb0:	90 70       	andi	r25, 0x00	; 0
    2eb2:	89 2b       	or	r24, r25
    2eb4:	39 f0       	breq	.+14     	; 0x2ec4 <vfprintf+0x2fa>
    2eb6:	08 c0       	rjmp	.+16     	; 0x2ec8 <vfprintf+0x2fe>
    2eb8:	80 e2       	ldi	r24, 0x20	; 32
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	b3 01       	movw	r22, r6
    2ebe:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    2ec2:	8a 94       	dec	r8
    2ec4:	88 20       	and	r8, r8
    2ec6:	c1 f7       	brne	.-16     	; 0x2eb8 <vfprintf+0x2ee>
    2ec8:	11 23       	and	r17, r17
    2eca:	29 f0       	breq	.+10     	; 0x2ed6 <vfprintf+0x30c>
    2ecc:	81 2f       	mov	r24, r17
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	b3 01       	movw	r22, r6
    2ed2:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    2ed6:	43 fe       	sbrs	r4, 3
    2ed8:	07 c0       	rjmp	.+14     	; 0x2ee8 <vfprintf+0x31e>
    2eda:	08 c0       	rjmp	.+16     	; 0x2eec <vfprintf+0x322>
    2edc:	80 e3       	ldi	r24, 0x30	; 48
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	b3 01       	movw	r22, r6
    2ee2:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    2ee6:	8a 94       	dec	r8
    2ee8:	88 20       	and	r8, r8
    2eea:	c1 f7       	brne	.-16     	; 0x2edc <vfprintf+0x312>
    2eec:	f7 fe       	sbrs	r15, 7
    2eee:	46 c0       	rjmp	.+140    	; 0x2f7c <vfprintf+0x3b2>
    2ef0:	86 01       	movw	r16, r12
    2ef2:	d7 fe       	sbrs	r13, 7
    2ef4:	02 c0       	rjmp	.+4      	; 0x2efa <vfprintf+0x330>
    2ef6:	00 e0       	ldi	r16, 0x00	; 0
    2ef8:	10 e0       	ldi	r17, 0x00	; 0
    2efa:	76 01       	movw	r14, r12
    2efc:	08 94       	sec
    2efe:	e1 1c       	adc	r14, r1
    2f00:	f1 1c       	adc	r15, r1
    2f02:	e0 1a       	sub	r14, r16
    2f04:	f1 0a       	sbc	r15, r17
    2f06:	41 e0       	ldi	r20, 0x01	; 1
    2f08:	50 e0       	ldi	r21, 0x00	; 0
    2f0a:	4c 0f       	add	r20, r28
    2f0c:	5d 1f       	adc	r21, r29
    2f0e:	e4 0e       	add	r14, r20
    2f10:	f5 1e       	adc	r15, r21
    2f12:	26 01       	movw	r4, r12
    2f14:	4b 18       	sub	r4, r11
    2f16:	51 08       	sbc	r5, r1
    2f18:	89 2d       	mov	r24, r9
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	aa 24       	eor	r10, r10
    2f1e:	bb 24       	eor	r11, r11
    2f20:	a8 1a       	sub	r10, r24
    2f22:	b9 0a       	sbc	r11, r25
    2f24:	5f ef       	ldi	r21, 0xFF	; 255
    2f26:	0f 3f       	cpi	r16, 0xFF	; 255
    2f28:	15 07       	cpc	r17, r21
    2f2a:	29 f4       	brne	.+10     	; 0x2f36 <vfprintf+0x36c>
    2f2c:	8e e2       	ldi	r24, 0x2E	; 46
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	b3 01       	movw	r22, r6
    2f32:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    2f36:	c0 16       	cp	r12, r16
    2f38:	d1 06       	cpc	r13, r17
    2f3a:	34 f0       	brlt	.+12     	; 0x2f48 <vfprintf+0x37e>
    2f3c:	40 16       	cp	r4, r16
    2f3e:	51 06       	cpc	r5, r17
    2f40:	1c f4       	brge	.+6      	; 0x2f48 <vfprintf+0x37e>
    2f42:	f7 01       	movw	r30, r14
    2f44:	80 81       	ld	r24, Z
    2f46:	01 c0       	rjmp	.+2      	; 0x2f4a <vfprintf+0x380>
    2f48:	80 e3       	ldi	r24, 0x30	; 48
    2f4a:	01 50       	subi	r16, 0x01	; 1
    2f4c:	10 40       	sbci	r17, 0x00	; 0
    2f4e:	08 94       	sec
    2f50:	e1 1c       	adc	r14, r1
    2f52:	f1 1c       	adc	r15, r1
    2f54:	0a 15       	cp	r16, r10
    2f56:	1b 05       	cpc	r17, r11
    2f58:	2c f0       	brlt	.+10     	; 0x2f64 <vfprintf+0x39a>
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	b3 01       	movw	r22, r6
    2f5e:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    2f62:	e0 cf       	rjmp	.-64     	; 0x2f24 <vfprintf+0x35a>
    2f64:	0c 15       	cp	r16, r12
    2f66:	1d 05       	cpc	r17, r13
    2f68:	39 f4       	brne	.+14     	; 0x2f78 <vfprintf+0x3ae>
    2f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6c:	96 33       	cpi	r25, 0x36	; 54
    2f6e:	18 f4       	brcc	.+6      	; 0x2f76 <vfprintf+0x3ac>
    2f70:	95 33       	cpi	r25, 0x35	; 53
    2f72:	11 f4       	brne	.+4      	; 0x2f78 <vfprintf+0x3ae>
    2f74:	24 fe       	sbrs	r2, 4
    2f76:	81 e3       	ldi	r24, 0x31	; 49
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	4b c0       	rjmp	.+150    	; 0x3012 <vfprintf+0x448>
    2f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7e:	81 33       	cpi	r24, 0x31	; 49
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <vfprintf+0x3ba>
    2f82:	0f 7e       	andi	r16, 0xEF	; 239
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	b3 01       	movw	r22, r6
    2f88:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    2f8c:	99 20       	and	r9, r9
    2f8e:	a1 f0       	breq	.+40     	; 0x2fb8 <vfprintf+0x3ee>
    2f90:	8e e2       	ldi	r24, 0x2E	; 46
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	b3 01       	movw	r22, r6
    2f96:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    2f9a:	12 e0       	ldi	r17, 0x02	; 2
    2f9c:	e1 e0       	ldi	r30, 0x01	; 1
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	ec 0f       	add	r30, r28
    2fa2:	fd 1f       	adc	r31, r29
    2fa4:	e1 0f       	add	r30, r17
    2fa6:	f1 1d       	adc	r31, r1
    2fa8:	1f 5f       	subi	r17, 0xFF	; 255
    2faa:	80 81       	ld	r24, Z
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	b3 01       	movw	r22, r6
    2fb0:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    2fb4:	9a 94       	dec	r9
    2fb6:	91 f7       	brne	.-28     	; 0x2f9c <vfprintf+0x3d2>
    2fb8:	44 fc       	sbrc	r4, 4
    2fba:	03 c0       	rjmp	.+6      	; 0x2fc2 <vfprintf+0x3f8>
    2fbc:	85 e6       	ldi	r24, 0x65	; 101
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	02 c0       	rjmp	.+4      	; 0x2fc6 <vfprintf+0x3fc>
    2fc2:	85 e4       	ldi	r24, 0x45	; 69
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	b3 01       	movw	r22, r6
    2fc8:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    2fcc:	d7 fc       	sbrc	r13, 7
    2fce:	05 c0       	rjmp	.+10     	; 0x2fda <vfprintf+0x410>
    2fd0:	c1 14       	cp	r12, r1
    2fd2:	d1 04       	cpc	r13, r1
    2fd4:	41 f4       	brne	.+16     	; 0x2fe6 <vfprintf+0x41c>
    2fd6:	04 ff       	sbrs	r16, 4
    2fd8:	06 c0       	rjmp	.+12     	; 0x2fe6 <vfprintf+0x41c>
    2fda:	d0 94       	com	r13
    2fdc:	c1 94       	neg	r12
    2fde:	d1 08       	sbc	r13, r1
    2fe0:	d3 94       	inc	r13
    2fe2:	8d e2       	ldi	r24, 0x2D	; 45
    2fe4:	01 c0       	rjmp	.+2      	; 0x2fe8 <vfprintf+0x41e>
    2fe6:	8b e2       	ldi	r24, 0x2B	; 43
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	b3 01       	movw	r22, r6
    2fec:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    2ff0:	80 e3       	ldi	r24, 0x30	; 48
    2ff2:	05 c0       	rjmp	.+10     	; 0x2ffe <vfprintf+0x434>
    2ff4:	8f 5f       	subi	r24, 0xFF	; 255
    2ff6:	26 ef       	ldi	r18, 0xF6	; 246
    2ff8:	3f ef       	ldi	r19, 0xFF	; 255
    2ffa:	c2 0e       	add	r12, r18
    2ffc:	d3 1e       	adc	r13, r19
    2ffe:	3a e0       	ldi	r19, 0x0A	; 10
    3000:	c3 16       	cp	r12, r19
    3002:	d1 04       	cpc	r13, r1
    3004:	bc f7       	brge	.-18     	; 0x2ff4 <vfprintf+0x42a>
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	b3 01       	movw	r22, r6
    300a:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    300e:	c6 01       	movw	r24, r12
    3010:	c0 96       	adiw	r24, 0x30	; 48
    3012:	b3 01       	movw	r22, r6
    3014:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    3018:	cc 84       	ldd	r12, Y+12	; 0x0c
    301a:	dd 84       	ldd	r13, Y+13	; 0x0d
    301c:	52 c1       	rjmp	.+676    	; 0x32c2 <vfprintf+0x6f8>
    301e:	93 36       	cpi	r25, 0x63	; 99
    3020:	31 f0       	breq	.+12     	; 0x302e <vfprintf+0x464>
    3022:	93 37       	cpi	r25, 0x73	; 115
    3024:	99 f0       	breq	.+38     	; 0x304c <vfprintf+0x482>
    3026:	93 35       	cpi	r25, 0x53	; 83
    3028:	09 f0       	breq	.+2      	; 0x302c <vfprintf+0x462>
    302a:	59 c0       	rjmp	.+178    	; 0x30de <vfprintf+0x514>
    302c:	23 c0       	rjmp	.+70     	; 0x3074 <vfprintf+0x4aa>
    302e:	f6 01       	movw	r30, r12
    3030:	80 81       	ld	r24, Z
    3032:	89 83       	std	Y+1, r24	; 0x01
    3034:	5e 01       	movw	r10, r28
    3036:	08 94       	sec
    3038:	a1 1c       	adc	r10, r1
    303a:	b1 1c       	adc	r11, r1
    303c:	22 e0       	ldi	r18, 0x02	; 2
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	c2 0e       	add	r12, r18
    3042:	d3 1e       	adc	r13, r19
    3044:	21 e0       	ldi	r18, 0x01	; 1
    3046:	e2 2e       	mov	r14, r18
    3048:	f1 2c       	mov	r15, r1
    304a:	12 c0       	rjmp	.+36     	; 0x3070 <vfprintf+0x4a6>
    304c:	f6 01       	movw	r30, r12
    304e:	a0 80       	ld	r10, Z
    3050:	b1 80       	ldd	r11, Z+1	; 0x01
    3052:	16 fd       	sbrc	r17, 6
    3054:	03 c0       	rjmp	.+6      	; 0x305c <vfprintf+0x492>
    3056:	6f ef       	ldi	r22, 0xFF	; 255
    3058:	7f ef       	ldi	r23, 0xFF	; 255
    305a:	02 c0       	rjmp	.+4      	; 0x3060 <vfprintf+0x496>
    305c:	69 2d       	mov	r22, r9
    305e:	70 e0       	ldi	r23, 0x00	; 0
    3060:	22 e0       	ldi	r18, 0x02	; 2
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	c2 0e       	add	r12, r18
    3066:	d3 1e       	adc	r13, r19
    3068:	c5 01       	movw	r24, r10
    306a:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <strnlen>
    306e:	7c 01       	movw	r14, r24
    3070:	1f 77       	andi	r17, 0x7F	; 127
    3072:	13 c0       	rjmp	.+38     	; 0x309a <vfprintf+0x4d0>
    3074:	f6 01       	movw	r30, r12
    3076:	a0 80       	ld	r10, Z
    3078:	b1 80       	ldd	r11, Z+1	; 0x01
    307a:	16 fd       	sbrc	r17, 6
    307c:	03 c0       	rjmp	.+6      	; 0x3084 <vfprintf+0x4ba>
    307e:	6f ef       	ldi	r22, 0xFF	; 255
    3080:	7f ef       	ldi	r23, 0xFF	; 255
    3082:	02 c0       	rjmp	.+4      	; 0x3088 <vfprintf+0x4be>
    3084:	69 2d       	mov	r22, r9
    3086:	70 e0       	ldi	r23, 0x00	; 0
    3088:	22 e0       	ldi	r18, 0x02	; 2
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	c2 0e       	add	r12, r18
    308e:	d3 1e       	adc	r13, r19
    3090:	c5 01       	movw	r24, r10
    3092:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <strnlen_P>
    3096:	7c 01       	movw	r14, r24
    3098:	10 68       	ori	r17, 0x80	; 128
    309a:	13 ff       	sbrs	r17, 3
    309c:	07 c0       	rjmp	.+14     	; 0x30ac <vfprintf+0x4e2>
    309e:	1b c0       	rjmp	.+54     	; 0x30d6 <vfprintf+0x50c>
    30a0:	80 e2       	ldi	r24, 0x20	; 32
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	b3 01       	movw	r22, r6
    30a6:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    30aa:	8a 94       	dec	r8
    30ac:	88 2d       	mov	r24, r8
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	e8 16       	cp	r14, r24
    30b2:	f9 06       	cpc	r15, r25
    30b4:	a8 f3       	brcs	.-22     	; 0x30a0 <vfprintf+0x4d6>
    30b6:	0f c0       	rjmp	.+30     	; 0x30d6 <vfprintf+0x50c>
    30b8:	f5 01       	movw	r30, r10
    30ba:	17 fd       	sbrc	r17, 7
    30bc:	85 91       	lpm	r24, Z+
    30be:	17 ff       	sbrs	r17, 7
    30c0:	81 91       	ld	r24, Z+
    30c2:	5f 01       	movw	r10, r30
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	b3 01       	movw	r22, r6
    30c8:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    30cc:	81 10       	cpse	r8, r1
    30ce:	8a 94       	dec	r8
    30d0:	08 94       	sec
    30d2:	e1 08       	sbc	r14, r1
    30d4:	f1 08       	sbc	r15, r1
    30d6:	e1 14       	cp	r14, r1
    30d8:	f1 04       	cpc	r15, r1
    30da:	71 f7       	brne	.-36     	; 0x30b8 <vfprintf+0x4ee>
    30dc:	f2 c0       	rjmp	.+484    	; 0x32c2 <vfprintf+0x6f8>
    30de:	94 36       	cpi	r25, 0x64	; 100
    30e0:	11 f0       	breq	.+4      	; 0x30e6 <vfprintf+0x51c>
    30e2:	99 36       	cpi	r25, 0x69	; 105
    30e4:	89 f5       	brne	.+98     	; 0x3148 <vfprintf+0x57e>
    30e6:	17 ff       	sbrs	r17, 7
    30e8:	08 c0       	rjmp	.+16     	; 0x30fa <vfprintf+0x530>
    30ea:	f6 01       	movw	r30, r12
    30ec:	20 81       	ld	r18, Z
    30ee:	31 81       	ldd	r19, Z+1	; 0x01
    30f0:	42 81       	ldd	r20, Z+2	; 0x02
    30f2:	53 81       	ldd	r21, Z+3	; 0x03
    30f4:	84 e0       	ldi	r24, 0x04	; 4
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	0a c0       	rjmp	.+20     	; 0x310e <vfprintf+0x544>
    30fa:	f6 01       	movw	r30, r12
    30fc:	80 81       	ld	r24, Z
    30fe:	91 81       	ldd	r25, Z+1	; 0x01
    3100:	9c 01       	movw	r18, r24
    3102:	44 27       	eor	r20, r20
    3104:	37 fd       	sbrc	r19, 7
    3106:	40 95       	com	r20
    3108:	54 2f       	mov	r21, r20
    310a:	82 e0       	ldi	r24, 0x02	; 2
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	c8 0e       	add	r12, r24
    3110:	d9 1e       	adc	r13, r25
    3112:	9f e6       	ldi	r25, 0x6F	; 111
    3114:	f9 2e       	mov	r15, r25
    3116:	f1 22       	and	r15, r17
    3118:	57 ff       	sbrs	r21, 7
    311a:	09 c0       	rjmp	.+18     	; 0x312e <vfprintf+0x564>
    311c:	50 95       	com	r21
    311e:	40 95       	com	r20
    3120:	30 95       	com	r19
    3122:	21 95       	neg	r18
    3124:	3f 4f       	sbci	r19, 0xFF	; 255
    3126:	4f 4f       	sbci	r20, 0xFF	; 255
    3128:	5f 4f       	sbci	r21, 0xFF	; 255
    312a:	90 e8       	ldi	r25, 0x80	; 128
    312c:	f9 2a       	or	r15, r25
    312e:	ca 01       	movw	r24, r20
    3130:	b9 01       	movw	r22, r18
    3132:	ae 01       	movw	r20, r28
    3134:	4f 5f       	subi	r20, 0xFF	; 255
    3136:	5f 4f       	sbci	r21, 0xFF	; 255
    3138:	2a e0       	ldi	r18, 0x0A	; 10
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	0e 94 28 20 	call	0x4050	; 0x4050 <__ultoa_invert>
    3140:	e8 2e       	mov	r14, r24
    3142:	e8 89       	ldd	r30, Y+16	; 0x10
    3144:	ee 1a       	sub	r14, r30
    3146:	41 c0       	rjmp	.+130    	; 0x31ca <vfprintf+0x600>
    3148:	95 37       	cpi	r25, 0x75	; 117
    314a:	21 f4       	brne	.+8      	; 0x3154 <vfprintf+0x58a>
    314c:	1f 7e       	andi	r17, 0xEF	; 239
    314e:	2a e0       	ldi	r18, 0x0A	; 10
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	1c c0       	rjmp	.+56     	; 0x318c <vfprintf+0x5c2>
    3154:	19 7f       	andi	r17, 0xF9	; 249
    3156:	9f 36       	cpi	r25, 0x6F	; 111
    3158:	61 f0       	breq	.+24     	; 0x3172 <vfprintf+0x5a8>
    315a:	90 37       	cpi	r25, 0x70	; 112
    315c:	20 f4       	brcc	.+8      	; 0x3166 <vfprintf+0x59c>
    315e:	98 35       	cpi	r25, 0x58	; 88
    3160:	09 f0       	breq	.+2      	; 0x3164 <vfprintf+0x59a>
    3162:	b2 c0       	rjmp	.+356    	; 0x32c8 <vfprintf+0x6fe>
    3164:	0f c0       	rjmp	.+30     	; 0x3184 <vfprintf+0x5ba>
    3166:	90 37       	cpi	r25, 0x70	; 112
    3168:	39 f0       	breq	.+14     	; 0x3178 <vfprintf+0x5ae>
    316a:	98 37       	cpi	r25, 0x78	; 120
    316c:	09 f0       	breq	.+2      	; 0x3170 <vfprintf+0x5a6>
    316e:	ac c0       	rjmp	.+344    	; 0x32c8 <vfprintf+0x6fe>
    3170:	04 c0       	rjmp	.+8      	; 0x317a <vfprintf+0x5b0>
    3172:	28 e0       	ldi	r18, 0x08	; 8
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	0a c0       	rjmp	.+20     	; 0x318c <vfprintf+0x5c2>
    3178:	10 61       	ori	r17, 0x10	; 16
    317a:	14 fd       	sbrc	r17, 4
    317c:	14 60       	ori	r17, 0x04	; 4
    317e:	20 e1       	ldi	r18, 0x10	; 16
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	04 c0       	rjmp	.+8      	; 0x318c <vfprintf+0x5c2>
    3184:	14 fd       	sbrc	r17, 4
    3186:	16 60       	ori	r17, 0x06	; 6
    3188:	20 e1       	ldi	r18, 0x10	; 16
    318a:	32 e0       	ldi	r19, 0x02	; 2
    318c:	17 ff       	sbrs	r17, 7
    318e:	08 c0       	rjmp	.+16     	; 0x31a0 <vfprintf+0x5d6>
    3190:	f6 01       	movw	r30, r12
    3192:	60 81       	ld	r22, Z
    3194:	71 81       	ldd	r23, Z+1	; 0x01
    3196:	82 81       	ldd	r24, Z+2	; 0x02
    3198:	93 81       	ldd	r25, Z+3	; 0x03
    319a:	44 e0       	ldi	r20, 0x04	; 4
    319c:	50 e0       	ldi	r21, 0x00	; 0
    319e:	08 c0       	rjmp	.+16     	; 0x31b0 <vfprintf+0x5e6>
    31a0:	f6 01       	movw	r30, r12
    31a2:	80 81       	ld	r24, Z
    31a4:	91 81       	ldd	r25, Z+1	; 0x01
    31a6:	bc 01       	movw	r22, r24
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	42 e0       	ldi	r20, 0x02	; 2
    31ae:	50 e0       	ldi	r21, 0x00	; 0
    31b0:	c4 0e       	add	r12, r20
    31b2:	d5 1e       	adc	r13, r21
    31b4:	ae 01       	movw	r20, r28
    31b6:	4f 5f       	subi	r20, 0xFF	; 255
    31b8:	5f 4f       	sbci	r21, 0xFF	; 255
    31ba:	0e 94 28 20 	call	0x4050	; 0x4050 <__ultoa_invert>
    31be:	e8 2e       	mov	r14, r24
    31c0:	58 89       	ldd	r21, Y+16	; 0x10
    31c2:	e5 1a       	sub	r14, r21
    31c4:	8f e7       	ldi	r24, 0x7F	; 127
    31c6:	f8 2e       	mov	r15, r24
    31c8:	f1 22       	and	r15, r17
    31ca:	f6 fe       	sbrs	r15, 6
    31cc:	0b c0       	rjmp	.+22     	; 0x31e4 <vfprintf+0x61a>
    31ce:	8e ef       	ldi	r24, 0xFE	; 254
    31d0:	f8 22       	and	r15, r24
    31d2:	e9 14       	cp	r14, r9
    31d4:	38 f4       	brcc	.+14     	; 0x31e4 <vfprintf+0x61a>
    31d6:	f4 fe       	sbrs	r15, 4
    31d8:	07 c0       	rjmp	.+14     	; 0x31e8 <vfprintf+0x61e>
    31da:	f2 fc       	sbrc	r15, 2
    31dc:	05 c0       	rjmp	.+10     	; 0x31e8 <vfprintf+0x61e>
    31de:	9f ee       	ldi	r25, 0xEF	; 239
    31e0:	f9 22       	and	r15, r25
    31e2:	02 c0       	rjmp	.+4      	; 0x31e8 <vfprintf+0x61e>
    31e4:	1e 2d       	mov	r17, r14
    31e6:	01 c0       	rjmp	.+2      	; 0x31ea <vfprintf+0x620>
    31e8:	19 2d       	mov	r17, r9
    31ea:	f4 fe       	sbrs	r15, 4
    31ec:	0d c0       	rjmp	.+26     	; 0x3208 <vfprintf+0x63e>
    31ee:	fe 01       	movw	r30, r28
    31f0:	ee 0d       	add	r30, r14
    31f2:	f1 1d       	adc	r31, r1
    31f4:	80 81       	ld	r24, Z
    31f6:	80 33       	cpi	r24, 0x30	; 48
    31f8:	19 f4       	brne	.+6      	; 0x3200 <vfprintf+0x636>
    31fa:	e9 ee       	ldi	r30, 0xE9	; 233
    31fc:	fe 22       	and	r15, r30
    31fe:	08 c0       	rjmp	.+16     	; 0x3210 <vfprintf+0x646>
    3200:	1f 5f       	subi	r17, 0xFF	; 255
    3202:	f2 fe       	sbrs	r15, 2
    3204:	05 c0       	rjmp	.+10     	; 0x3210 <vfprintf+0x646>
    3206:	03 c0       	rjmp	.+6      	; 0x320e <vfprintf+0x644>
    3208:	8f 2d       	mov	r24, r15
    320a:	86 78       	andi	r24, 0x86	; 134
    320c:	09 f0       	breq	.+2      	; 0x3210 <vfprintf+0x646>
    320e:	1f 5f       	subi	r17, 0xFF	; 255
    3210:	0f 2d       	mov	r16, r15
    3212:	f3 fc       	sbrc	r15, 3
    3214:	14 c0       	rjmp	.+40     	; 0x323e <vfprintf+0x674>
    3216:	f0 fe       	sbrs	r15, 0
    3218:	0f c0       	rjmp	.+30     	; 0x3238 <vfprintf+0x66e>
    321a:	18 15       	cp	r17, r8
    321c:	10 f0       	brcs	.+4      	; 0x3222 <vfprintf+0x658>
    321e:	9e 2c       	mov	r9, r14
    3220:	0b c0       	rjmp	.+22     	; 0x3238 <vfprintf+0x66e>
    3222:	9e 2c       	mov	r9, r14
    3224:	98 0c       	add	r9, r8
    3226:	91 1a       	sub	r9, r17
    3228:	18 2d       	mov	r17, r8
    322a:	06 c0       	rjmp	.+12     	; 0x3238 <vfprintf+0x66e>
    322c:	80 e2       	ldi	r24, 0x20	; 32
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	b3 01       	movw	r22, r6
    3232:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    3236:	1f 5f       	subi	r17, 0xFF	; 255
    3238:	18 15       	cp	r17, r8
    323a:	c0 f3       	brcs	.-16     	; 0x322c <vfprintf+0x662>
    323c:	04 c0       	rjmp	.+8      	; 0x3246 <vfprintf+0x67c>
    323e:	18 15       	cp	r17, r8
    3240:	10 f4       	brcc	.+4      	; 0x3246 <vfprintf+0x67c>
    3242:	81 1a       	sub	r8, r17
    3244:	01 c0       	rjmp	.+2      	; 0x3248 <vfprintf+0x67e>
    3246:	88 24       	eor	r8, r8
    3248:	04 ff       	sbrs	r16, 4
    324a:	0f c0       	rjmp	.+30     	; 0x326a <vfprintf+0x6a0>
    324c:	80 e3       	ldi	r24, 0x30	; 48
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	b3 01       	movw	r22, r6
    3252:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    3256:	02 ff       	sbrs	r16, 2
    3258:	1d c0       	rjmp	.+58     	; 0x3294 <vfprintf+0x6ca>
    325a:	01 fd       	sbrc	r16, 1
    325c:	03 c0       	rjmp	.+6      	; 0x3264 <vfprintf+0x69a>
    325e:	88 e7       	ldi	r24, 0x78	; 120
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	0e c0       	rjmp	.+28     	; 0x3280 <vfprintf+0x6b6>
    3264:	88 e5       	ldi	r24, 0x58	; 88
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	0b c0       	rjmp	.+22     	; 0x3280 <vfprintf+0x6b6>
    326a:	80 2f       	mov	r24, r16
    326c:	86 78       	andi	r24, 0x86	; 134
    326e:	91 f0       	breq	.+36     	; 0x3294 <vfprintf+0x6ca>
    3270:	01 ff       	sbrs	r16, 1
    3272:	02 c0       	rjmp	.+4      	; 0x3278 <vfprintf+0x6ae>
    3274:	8b e2       	ldi	r24, 0x2B	; 43
    3276:	01 c0       	rjmp	.+2      	; 0x327a <vfprintf+0x6b0>
    3278:	80 e2       	ldi	r24, 0x20	; 32
    327a:	f7 fc       	sbrc	r15, 7
    327c:	8d e2       	ldi	r24, 0x2D	; 45
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	b3 01       	movw	r22, r6
    3282:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    3286:	06 c0       	rjmp	.+12     	; 0x3294 <vfprintf+0x6ca>
    3288:	80 e3       	ldi	r24, 0x30	; 48
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	b3 01       	movw	r22, r6
    328e:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    3292:	9a 94       	dec	r9
    3294:	e9 14       	cp	r14, r9
    3296:	c0 f3       	brcs	.-16     	; 0x3288 <vfprintf+0x6be>
    3298:	ea 94       	dec	r14
    329a:	e1 e0       	ldi	r30, 0x01	; 1
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	ec 0f       	add	r30, r28
    32a0:	fd 1f       	adc	r31, r29
    32a2:	ee 0d       	add	r30, r14
    32a4:	f1 1d       	adc	r31, r1
    32a6:	80 81       	ld	r24, Z
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	b3 01       	movw	r22, r6
    32ac:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    32b0:	ee 20       	and	r14, r14
    32b2:	91 f7       	brne	.-28     	; 0x3298 <vfprintf+0x6ce>
    32b4:	06 c0       	rjmp	.+12     	; 0x32c2 <vfprintf+0x6f8>
    32b6:	80 e2       	ldi	r24, 0x20	; 32
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	b3 01       	movw	r22, r6
    32bc:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <fputc>
    32c0:	8a 94       	dec	r8
    32c2:	88 20       	and	r8, r8
    32c4:	c1 f7       	brne	.-16     	; 0x32b6 <vfprintf+0x6ec>
    32c6:	99 cc       	rjmp	.-1742   	; 0x2bfa <vfprintf+0x30>
    32c8:	f3 01       	movw	r30, r6
    32ca:	66 81       	ldd	r22, Z+6	; 0x06
    32cc:	77 81       	ldd	r23, Z+7	; 0x07
    32ce:	cb 01       	movw	r24, r22
    32d0:	61 96       	adiw	r28, 0x11	; 17
    32d2:	e2 e1       	ldi	r30, 0x12	; 18
    32d4:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__epilogue_restores__>

000032d8 <__subsf3>:
    32d8:	50 58       	subi	r21, 0x80	; 128

000032da <__addsf3>:
    32da:	bb 27       	eor	r27, r27
    32dc:	aa 27       	eor	r26, r26
    32de:	0e d0       	rcall	.+28     	; 0x32fc <__addsf3x>
    32e0:	70 c1       	rjmp	.+736    	; 0x35c2 <__fp_round>
    32e2:	61 d1       	rcall	.+706    	; 0x35a6 <__fp_pscA>
    32e4:	30 f0       	brcs	.+12     	; 0x32f2 <__addsf3+0x18>
    32e6:	66 d1       	rcall	.+716    	; 0x35b4 <__fp_pscB>
    32e8:	20 f0       	brcs	.+8      	; 0x32f2 <__addsf3+0x18>
    32ea:	31 f4       	brne	.+12     	; 0x32f8 <__addsf3+0x1e>
    32ec:	9f 3f       	cpi	r25, 0xFF	; 255
    32ee:	11 f4       	brne	.+4      	; 0x32f4 <__addsf3+0x1a>
    32f0:	1e f4       	brtc	.+6      	; 0x32f8 <__addsf3+0x1e>
    32f2:	56 c1       	rjmp	.+684    	; 0x35a0 <__fp_nan>
    32f4:	0e f4       	brtc	.+2      	; 0x32f8 <__addsf3+0x1e>
    32f6:	e0 95       	com	r30
    32f8:	e7 fb       	bst	r30, 7
    32fa:	4c c1       	rjmp	.+664    	; 0x3594 <__fp_inf>

000032fc <__addsf3x>:
    32fc:	e9 2f       	mov	r30, r25
    32fe:	72 d1       	rcall	.+740    	; 0x35e4 <__fp_split3>
    3300:	80 f3       	brcs	.-32     	; 0x32e2 <__addsf3+0x8>
    3302:	ba 17       	cp	r27, r26
    3304:	62 07       	cpc	r22, r18
    3306:	73 07       	cpc	r23, r19
    3308:	84 07       	cpc	r24, r20
    330a:	95 07       	cpc	r25, r21
    330c:	18 f0       	brcs	.+6      	; 0x3314 <__addsf3x+0x18>
    330e:	71 f4       	brne	.+28     	; 0x332c <__addsf3x+0x30>
    3310:	9e f5       	brtc	.+102    	; 0x3378 <__addsf3x+0x7c>
    3312:	8a c1       	rjmp	.+788    	; 0x3628 <__fp_zero>
    3314:	0e f4       	brtc	.+2      	; 0x3318 <__addsf3x+0x1c>
    3316:	e0 95       	com	r30
    3318:	0b 2e       	mov	r0, r27
    331a:	ba 2f       	mov	r27, r26
    331c:	a0 2d       	mov	r26, r0
    331e:	0b 01       	movw	r0, r22
    3320:	b9 01       	movw	r22, r18
    3322:	90 01       	movw	r18, r0
    3324:	0c 01       	movw	r0, r24
    3326:	ca 01       	movw	r24, r20
    3328:	a0 01       	movw	r20, r0
    332a:	11 24       	eor	r1, r1
    332c:	ff 27       	eor	r31, r31
    332e:	59 1b       	sub	r21, r25
    3330:	99 f0       	breq	.+38     	; 0x3358 <__addsf3x+0x5c>
    3332:	59 3f       	cpi	r21, 0xF9	; 249
    3334:	50 f4       	brcc	.+20     	; 0x334a <__addsf3x+0x4e>
    3336:	50 3e       	cpi	r21, 0xE0	; 224
    3338:	68 f1       	brcs	.+90     	; 0x3394 <__addsf3x+0x98>
    333a:	1a 16       	cp	r1, r26
    333c:	f0 40       	sbci	r31, 0x00	; 0
    333e:	a2 2f       	mov	r26, r18
    3340:	23 2f       	mov	r18, r19
    3342:	34 2f       	mov	r19, r20
    3344:	44 27       	eor	r20, r20
    3346:	58 5f       	subi	r21, 0xF8	; 248
    3348:	f3 cf       	rjmp	.-26     	; 0x3330 <__addsf3x+0x34>
    334a:	46 95       	lsr	r20
    334c:	37 95       	ror	r19
    334e:	27 95       	ror	r18
    3350:	a7 95       	ror	r26
    3352:	f0 40       	sbci	r31, 0x00	; 0
    3354:	53 95       	inc	r21
    3356:	c9 f7       	brne	.-14     	; 0x334a <__addsf3x+0x4e>
    3358:	7e f4       	brtc	.+30     	; 0x3378 <__addsf3x+0x7c>
    335a:	1f 16       	cp	r1, r31
    335c:	ba 0b       	sbc	r27, r26
    335e:	62 0b       	sbc	r22, r18
    3360:	73 0b       	sbc	r23, r19
    3362:	84 0b       	sbc	r24, r20
    3364:	ba f0       	brmi	.+46     	; 0x3394 <__addsf3x+0x98>
    3366:	91 50       	subi	r25, 0x01	; 1
    3368:	a1 f0       	breq	.+40     	; 0x3392 <__addsf3x+0x96>
    336a:	ff 0f       	add	r31, r31
    336c:	bb 1f       	adc	r27, r27
    336e:	66 1f       	adc	r22, r22
    3370:	77 1f       	adc	r23, r23
    3372:	88 1f       	adc	r24, r24
    3374:	c2 f7       	brpl	.-16     	; 0x3366 <__addsf3x+0x6a>
    3376:	0e c0       	rjmp	.+28     	; 0x3394 <__addsf3x+0x98>
    3378:	ba 0f       	add	r27, r26
    337a:	62 1f       	adc	r22, r18
    337c:	73 1f       	adc	r23, r19
    337e:	84 1f       	adc	r24, r20
    3380:	48 f4       	brcc	.+18     	; 0x3394 <__addsf3x+0x98>
    3382:	87 95       	ror	r24
    3384:	77 95       	ror	r23
    3386:	67 95       	ror	r22
    3388:	b7 95       	ror	r27
    338a:	f7 95       	ror	r31
    338c:	9e 3f       	cpi	r25, 0xFE	; 254
    338e:	08 f0       	brcs	.+2      	; 0x3392 <__addsf3x+0x96>
    3390:	b3 cf       	rjmp	.-154    	; 0x32f8 <__addsf3+0x1e>
    3392:	93 95       	inc	r25
    3394:	88 0f       	add	r24, r24
    3396:	08 f0       	brcs	.+2      	; 0x339a <__addsf3x+0x9e>
    3398:	99 27       	eor	r25, r25
    339a:	ee 0f       	add	r30, r30
    339c:	97 95       	ror	r25
    339e:	87 95       	ror	r24
    33a0:	08 95       	ret

000033a2 <__cmpsf2>:
    33a2:	d4 d0       	rcall	.+424    	; 0x354c <__fp_cmp>
    33a4:	08 f4       	brcc	.+2      	; 0x33a8 <__cmpsf2+0x6>
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	08 95       	ret

000033aa <__divsf3>:
    33aa:	0c d0       	rcall	.+24     	; 0x33c4 <__divsf3x>
    33ac:	0a c1       	rjmp	.+532    	; 0x35c2 <__fp_round>
    33ae:	02 d1       	rcall	.+516    	; 0x35b4 <__fp_pscB>
    33b0:	40 f0       	brcs	.+16     	; 0x33c2 <__divsf3+0x18>
    33b2:	f9 d0       	rcall	.+498    	; 0x35a6 <__fp_pscA>
    33b4:	30 f0       	brcs	.+12     	; 0x33c2 <__divsf3+0x18>
    33b6:	21 f4       	brne	.+8      	; 0x33c0 <__divsf3+0x16>
    33b8:	5f 3f       	cpi	r21, 0xFF	; 255
    33ba:	19 f0       	breq	.+6      	; 0x33c2 <__divsf3+0x18>
    33bc:	eb c0       	rjmp	.+470    	; 0x3594 <__fp_inf>
    33be:	51 11       	cpse	r21, r1
    33c0:	34 c1       	rjmp	.+616    	; 0x362a <__fp_szero>
    33c2:	ee c0       	rjmp	.+476    	; 0x35a0 <__fp_nan>

000033c4 <__divsf3x>:
    33c4:	0f d1       	rcall	.+542    	; 0x35e4 <__fp_split3>
    33c6:	98 f3       	brcs	.-26     	; 0x33ae <__divsf3+0x4>

000033c8 <__divsf3_pse>:
    33c8:	99 23       	and	r25, r25
    33ca:	c9 f3       	breq	.-14     	; 0x33be <__divsf3+0x14>
    33cc:	55 23       	and	r21, r21
    33ce:	b1 f3       	breq	.-20     	; 0x33bc <__divsf3+0x12>
    33d0:	95 1b       	sub	r25, r21
    33d2:	55 0b       	sbc	r21, r21
    33d4:	bb 27       	eor	r27, r27
    33d6:	aa 27       	eor	r26, r26
    33d8:	62 17       	cp	r22, r18
    33da:	73 07       	cpc	r23, r19
    33dc:	84 07       	cpc	r24, r20
    33de:	38 f0       	brcs	.+14     	; 0x33ee <__divsf3_pse+0x26>
    33e0:	9f 5f       	subi	r25, 0xFF	; 255
    33e2:	5f 4f       	sbci	r21, 0xFF	; 255
    33e4:	22 0f       	add	r18, r18
    33e6:	33 1f       	adc	r19, r19
    33e8:	44 1f       	adc	r20, r20
    33ea:	aa 1f       	adc	r26, r26
    33ec:	a9 f3       	breq	.-22     	; 0x33d8 <__divsf3_pse+0x10>
    33ee:	33 d0       	rcall	.+102    	; 0x3456 <__divsf3_pse+0x8e>
    33f0:	0e 2e       	mov	r0, r30
    33f2:	3a f0       	brmi	.+14     	; 0x3402 <__divsf3_pse+0x3a>
    33f4:	e0 e8       	ldi	r30, 0x80	; 128
    33f6:	30 d0       	rcall	.+96     	; 0x3458 <__divsf3_pse+0x90>
    33f8:	91 50       	subi	r25, 0x01	; 1
    33fa:	50 40       	sbci	r21, 0x00	; 0
    33fc:	e6 95       	lsr	r30
    33fe:	00 1c       	adc	r0, r0
    3400:	ca f7       	brpl	.-14     	; 0x33f4 <__divsf3_pse+0x2c>
    3402:	29 d0       	rcall	.+82     	; 0x3456 <__divsf3_pse+0x8e>
    3404:	fe 2f       	mov	r31, r30
    3406:	27 d0       	rcall	.+78     	; 0x3456 <__divsf3_pse+0x8e>
    3408:	66 0f       	add	r22, r22
    340a:	77 1f       	adc	r23, r23
    340c:	88 1f       	adc	r24, r24
    340e:	bb 1f       	adc	r27, r27
    3410:	26 17       	cp	r18, r22
    3412:	37 07       	cpc	r19, r23
    3414:	48 07       	cpc	r20, r24
    3416:	ab 07       	cpc	r26, r27
    3418:	b0 e8       	ldi	r27, 0x80	; 128
    341a:	09 f0       	breq	.+2      	; 0x341e <__divsf3_pse+0x56>
    341c:	bb 0b       	sbc	r27, r27
    341e:	80 2d       	mov	r24, r0
    3420:	bf 01       	movw	r22, r30
    3422:	ff 27       	eor	r31, r31
    3424:	93 58       	subi	r25, 0x83	; 131
    3426:	5f 4f       	sbci	r21, 0xFF	; 255
    3428:	2a f0       	brmi	.+10     	; 0x3434 <__divsf3_pse+0x6c>
    342a:	9e 3f       	cpi	r25, 0xFE	; 254
    342c:	51 05       	cpc	r21, r1
    342e:	68 f0       	brcs	.+26     	; 0x344a <__divsf3_pse+0x82>
    3430:	b1 c0       	rjmp	.+354    	; 0x3594 <__fp_inf>
    3432:	fb c0       	rjmp	.+502    	; 0x362a <__fp_szero>
    3434:	5f 3f       	cpi	r21, 0xFF	; 255
    3436:	ec f3       	brlt	.-6      	; 0x3432 <__divsf3_pse+0x6a>
    3438:	98 3e       	cpi	r25, 0xE8	; 232
    343a:	dc f3       	brlt	.-10     	; 0x3432 <__divsf3_pse+0x6a>
    343c:	86 95       	lsr	r24
    343e:	77 95       	ror	r23
    3440:	67 95       	ror	r22
    3442:	b7 95       	ror	r27
    3444:	f7 95       	ror	r31
    3446:	9f 5f       	subi	r25, 0xFF	; 255
    3448:	c9 f7       	brne	.-14     	; 0x343c <__divsf3_pse+0x74>
    344a:	88 0f       	add	r24, r24
    344c:	91 1d       	adc	r25, r1
    344e:	96 95       	lsr	r25
    3450:	87 95       	ror	r24
    3452:	97 f9       	bld	r25, 7
    3454:	08 95       	ret
    3456:	e1 e0       	ldi	r30, 0x01	; 1
    3458:	66 0f       	add	r22, r22
    345a:	77 1f       	adc	r23, r23
    345c:	88 1f       	adc	r24, r24
    345e:	bb 1f       	adc	r27, r27
    3460:	62 17       	cp	r22, r18
    3462:	73 07       	cpc	r23, r19
    3464:	84 07       	cpc	r24, r20
    3466:	ba 07       	cpc	r27, r26
    3468:	20 f0       	brcs	.+8      	; 0x3472 <__divsf3_pse+0xaa>
    346a:	62 1b       	sub	r22, r18
    346c:	73 0b       	sbc	r23, r19
    346e:	84 0b       	sbc	r24, r20
    3470:	ba 0b       	sbc	r27, r26
    3472:	ee 1f       	adc	r30, r30
    3474:	88 f7       	brcc	.-30     	; 0x3458 <__divsf3_pse+0x90>
    3476:	e0 95       	com	r30
    3478:	08 95       	ret

0000347a <__fixunssfsi>:
    347a:	bc d0       	rcall	.+376    	; 0x35f4 <__fp_splitA>
    347c:	88 f0       	brcs	.+34     	; 0x34a0 <__fixunssfsi+0x26>
    347e:	9f 57       	subi	r25, 0x7F	; 127
    3480:	90 f0       	brcs	.+36     	; 0x34a6 <__fixunssfsi+0x2c>
    3482:	b9 2f       	mov	r27, r25
    3484:	99 27       	eor	r25, r25
    3486:	b7 51       	subi	r27, 0x17	; 23
    3488:	a0 f0       	brcs	.+40     	; 0x34b2 <__fixunssfsi+0x38>
    348a:	d1 f0       	breq	.+52     	; 0x34c0 <__fixunssfsi+0x46>
    348c:	66 0f       	add	r22, r22
    348e:	77 1f       	adc	r23, r23
    3490:	88 1f       	adc	r24, r24
    3492:	99 1f       	adc	r25, r25
    3494:	1a f0       	brmi	.+6      	; 0x349c <__fixunssfsi+0x22>
    3496:	ba 95       	dec	r27
    3498:	c9 f7       	brne	.-14     	; 0x348c <__fixunssfsi+0x12>
    349a:	12 c0       	rjmp	.+36     	; 0x34c0 <__fixunssfsi+0x46>
    349c:	b1 30       	cpi	r27, 0x01	; 1
    349e:	81 f0       	breq	.+32     	; 0x34c0 <__fixunssfsi+0x46>
    34a0:	c3 d0       	rcall	.+390    	; 0x3628 <__fp_zero>
    34a2:	b1 e0       	ldi	r27, 0x01	; 1
    34a4:	08 95       	ret
    34a6:	c0 c0       	rjmp	.+384    	; 0x3628 <__fp_zero>
    34a8:	67 2f       	mov	r22, r23
    34aa:	78 2f       	mov	r23, r24
    34ac:	88 27       	eor	r24, r24
    34ae:	b8 5f       	subi	r27, 0xF8	; 248
    34b0:	39 f0       	breq	.+14     	; 0x34c0 <__fixunssfsi+0x46>
    34b2:	b9 3f       	cpi	r27, 0xF9	; 249
    34b4:	cc f3       	brlt	.-14     	; 0x34a8 <__fixunssfsi+0x2e>
    34b6:	86 95       	lsr	r24
    34b8:	77 95       	ror	r23
    34ba:	67 95       	ror	r22
    34bc:	b3 95       	inc	r27
    34be:	d9 f7       	brne	.-10     	; 0x34b6 <__fixunssfsi+0x3c>
    34c0:	3e f4       	brtc	.+14     	; 0x34d0 <__fixunssfsi+0x56>
    34c2:	90 95       	com	r25
    34c4:	80 95       	com	r24
    34c6:	70 95       	com	r23
    34c8:	61 95       	neg	r22
    34ca:	7f 4f       	sbci	r23, 0xFF	; 255
    34cc:	8f 4f       	sbci	r24, 0xFF	; 255
    34ce:	9f 4f       	sbci	r25, 0xFF	; 255
    34d0:	08 95       	ret

000034d2 <__floatunsisf>:
    34d2:	e8 94       	clt
    34d4:	09 c0       	rjmp	.+18     	; 0x34e8 <__floatsisf+0x12>

000034d6 <__floatsisf>:
    34d6:	97 fb       	bst	r25, 7
    34d8:	3e f4       	brtc	.+14     	; 0x34e8 <__floatsisf+0x12>
    34da:	90 95       	com	r25
    34dc:	80 95       	com	r24
    34de:	70 95       	com	r23
    34e0:	61 95       	neg	r22
    34e2:	7f 4f       	sbci	r23, 0xFF	; 255
    34e4:	8f 4f       	sbci	r24, 0xFF	; 255
    34e6:	9f 4f       	sbci	r25, 0xFF	; 255
    34e8:	99 23       	and	r25, r25
    34ea:	a9 f0       	breq	.+42     	; 0x3516 <__floatsisf+0x40>
    34ec:	f9 2f       	mov	r31, r25
    34ee:	96 e9       	ldi	r25, 0x96	; 150
    34f0:	bb 27       	eor	r27, r27
    34f2:	93 95       	inc	r25
    34f4:	f6 95       	lsr	r31
    34f6:	87 95       	ror	r24
    34f8:	77 95       	ror	r23
    34fa:	67 95       	ror	r22
    34fc:	b7 95       	ror	r27
    34fe:	f1 11       	cpse	r31, r1
    3500:	f8 cf       	rjmp	.-16     	; 0x34f2 <__floatsisf+0x1c>
    3502:	fa f4       	brpl	.+62     	; 0x3542 <__floatsisf+0x6c>
    3504:	bb 0f       	add	r27, r27
    3506:	11 f4       	brne	.+4      	; 0x350c <__floatsisf+0x36>
    3508:	60 ff       	sbrs	r22, 0
    350a:	1b c0       	rjmp	.+54     	; 0x3542 <__floatsisf+0x6c>
    350c:	6f 5f       	subi	r22, 0xFF	; 255
    350e:	7f 4f       	sbci	r23, 0xFF	; 255
    3510:	8f 4f       	sbci	r24, 0xFF	; 255
    3512:	9f 4f       	sbci	r25, 0xFF	; 255
    3514:	16 c0       	rjmp	.+44     	; 0x3542 <__floatsisf+0x6c>
    3516:	88 23       	and	r24, r24
    3518:	11 f0       	breq	.+4      	; 0x351e <__floatsisf+0x48>
    351a:	96 e9       	ldi	r25, 0x96	; 150
    351c:	11 c0       	rjmp	.+34     	; 0x3540 <__floatsisf+0x6a>
    351e:	77 23       	and	r23, r23
    3520:	21 f0       	breq	.+8      	; 0x352a <__floatsisf+0x54>
    3522:	9e e8       	ldi	r25, 0x8E	; 142
    3524:	87 2f       	mov	r24, r23
    3526:	76 2f       	mov	r23, r22
    3528:	05 c0       	rjmp	.+10     	; 0x3534 <__floatsisf+0x5e>
    352a:	66 23       	and	r22, r22
    352c:	71 f0       	breq	.+28     	; 0x354a <__floatsisf+0x74>
    352e:	96 e8       	ldi	r25, 0x86	; 134
    3530:	86 2f       	mov	r24, r22
    3532:	70 e0       	ldi	r23, 0x00	; 0
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	2a f0       	brmi	.+10     	; 0x3542 <__floatsisf+0x6c>
    3538:	9a 95       	dec	r25
    353a:	66 0f       	add	r22, r22
    353c:	77 1f       	adc	r23, r23
    353e:	88 1f       	adc	r24, r24
    3540:	da f7       	brpl	.-10     	; 0x3538 <__floatsisf+0x62>
    3542:	88 0f       	add	r24, r24
    3544:	96 95       	lsr	r25
    3546:	87 95       	ror	r24
    3548:	97 f9       	bld	r25, 7
    354a:	08 95       	ret

0000354c <__fp_cmp>:
    354c:	99 0f       	add	r25, r25
    354e:	00 08       	sbc	r0, r0
    3550:	55 0f       	add	r21, r21
    3552:	aa 0b       	sbc	r26, r26
    3554:	e0 e8       	ldi	r30, 0x80	; 128
    3556:	fe ef       	ldi	r31, 0xFE	; 254
    3558:	16 16       	cp	r1, r22
    355a:	17 06       	cpc	r1, r23
    355c:	e8 07       	cpc	r30, r24
    355e:	f9 07       	cpc	r31, r25
    3560:	c0 f0       	brcs	.+48     	; 0x3592 <__fp_cmp+0x46>
    3562:	12 16       	cp	r1, r18
    3564:	13 06       	cpc	r1, r19
    3566:	e4 07       	cpc	r30, r20
    3568:	f5 07       	cpc	r31, r21
    356a:	98 f0       	brcs	.+38     	; 0x3592 <__fp_cmp+0x46>
    356c:	62 1b       	sub	r22, r18
    356e:	73 0b       	sbc	r23, r19
    3570:	84 0b       	sbc	r24, r20
    3572:	95 0b       	sbc	r25, r21
    3574:	39 f4       	brne	.+14     	; 0x3584 <__fp_cmp+0x38>
    3576:	0a 26       	eor	r0, r26
    3578:	61 f0       	breq	.+24     	; 0x3592 <__fp_cmp+0x46>
    357a:	23 2b       	or	r18, r19
    357c:	24 2b       	or	r18, r20
    357e:	25 2b       	or	r18, r21
    3580:	21 f4       	brne	.+8      	; 0x358a <__fp_cmp+0x3e>
    3582:	08 95       	ret
    3584:	0a 26       	eor	r0, r26
    3586:	09 f4       	brne	.+2      	; 0x358a <__fp_cmp+0x3e>
    3588:	a1 40       	sbci	r26, 0x01	; 1
    358a:	a6 95       	lsr	r26
    358c:	8f ef       	ldi	r24, 0xFF	; 255
    358e:	81 1d       	adc	r24, r1
    3590:	81 1d       	adc	r24, r1
    3592:	08 95       	ret

00003594 <__fp_inf>:
    3594:	97 f9       	bld	r25, 7
    3596:	9f 67       	ori	r25, 0x7F	; 127
    3598:	80 e8       	ldi	r24, 0x80	; 128
    359a:	70 e0       	ldi	r23, 0x00	; 0
    359c:	60 e0       	ldi	r22, 0x00	; 0
    359e:	08 95       	ret

000035a0 <__fp_nan>:
    35a0:	9f ef       	ldi	r25, 0xFF	; 255
    35a2:	80 ec       	ldi	r24, 0xC0	; 192
    35a4:	08 95       	ret

000035a6 <__fp_pscA>:
    35a6:	00 24       	eor	r0, r0
    35a8:	0a 94       	dec	r0
    35aa:	16 16       	cp	r1, r22
    35ac:	17 06       	cpc	r1, r23
    35ae:	18 06       	cpc	r1, r24
    35b0:	09 06       	cpc	r0, r25
    35b2:	08 95       	ret

000035b4 <__fp_pscB>:
    35b4:	00 24       	eor	r0, r0
    35b6:	0a 94       	dec	r0
    35b8:	12 16       	cp	r1, r18
    35ba:	13 06       	cpc	r1, r19
    35bc:	14 06       	cpc	r1, r20
    35be:	05 06       	cpc	r0, r21
    35c0:	08 95       	ret

000035c2 <__fp_round>:
    35c2:	09 2e       	mov	r0, r25
    35c4:	03 94       	inc	r0
    35c6:	00 0c       	add	r0, r0
    35c8:	11 f4       	brne	.+4      	; 0x35ce <__fp_round+0xc>
    35ca:	88 23       	and	r24, r24
    35cc:	52 f0       	brmi	.+20     	; 0x35e2 <__fp_round+0x20>
    35ce:	bb 0f       	add	r27, r27
    35d0:	40 f4       	brcc	.+16     	; 0x35e2 <__fp_round+0x20>
    35d2:	bf 2b       	or	r27, r31
    35d4:	11 f4       	brne	.+4      	; 0x35da <__fp_round+0x18>
    35d6:	60 ff       	sbrs	r22, 0
    35d8:	04 c0       	rjmp	.+8      	; 0x35e2 <__fp_round+0x20>
    35da:	6f 5f       	subi	r22, 0xFF	; 255
    35dc:	7f 4f       	sbci	r23, 0xFF	; 255
    35de:	8f 4f       	sbci	r24, 0xFF	; 255
    35e0:	9f 4f       	sbci	r25, 0xFF	; 255
    35e2:	08 95       	ret

000035e4 <__fp_split3>:
    35e4:	57 fd       	sbrc	r21, 7
    35e6:	90 58       	subi	r25, 0x80	; 128
    35e8:	44 0f       	add	r20, r20
    35ea:	55 1f       	adc	r21, r21
    35ec:	59 f0       	breq	.+22     	; 0x3604 <__fp_splitA+0x10>
    35ee:	5f 3f       	cpi	r21, 0xFF	; 255
    35f0:	71 f0       	breq	.+28     	; 0x360e <__fp_splitA+0x1a>
    35f2:	47 95       	ror	r20

000035f4 <__fp_splitA>:
    35f4:	88 0f       	add	r24, r24
    35f6:	97 fb       	bst	r25, 7
    35f8:	99 1f       	adc	r25, r25
    35fa:	61 f0       	breq	.+24     	; 0x3614 <__fp_splitA+0x20>
    35fc:	9f 3f       	cpi	r25, 0xFF	; 255
    35fe:	79 f0       	breq	.+30     	; 0x361e <__fp_splitA+0x2a>
    3600:	87 95       	ror	r24
    3602:	08 95       	ret
    3604:	12 16       	cp	r1, r18
    3606:	13 06       	cpc	r1, r19
    3608:	14 06       	cpc	r1, r20
    360a:	55 1f       	adc	r21, r21
    360c:	f2 cf       	rjmp	.-28     	; 0x35f2 <__fp_split3+0xe>
    360e:	46 95       	lsr	r20
    3610:	f1 df       	rcall	.-30     	; 0x35f4 <__fp_splitA>
    3612:	08 c0       	rjmp	.+16     	; 0x3624 <__fp_splitA+0x30>
    3614:	16 16       	cp	r1, r22
    3616:	17 06       	cpc	r1, r23
    3618:	18 06       	cpc	r1, r24
    361a:	99 1f       	adc	r25, r25
    361c:	f1 cf       	rjmp	.-30     	; 0x3600 <__fp_splitA+0xc>
    361e:	86 95       	lsr	r24
    3620:	71 05       	cpc	r23, r1
    3622:	61 05       	cpc	r22, r1
    3624:	08 94       	sec
    3626:	08 95       	ret

00003628 <__fp_zero>:
    3628:	e8 94       	clt

0000362a <__fp_szero>:
    362a:	bb 27       	eor	r27, r27
    362c:	66 27       	eor	r22, r22
    362e:	77 27       	eor	r23, r23
    3630:	cb 01       	movw	r24, r22
    3632:	97 f9       	bld	r25, 7
    3634:	08 95       	ret

00003636 <__gesf2>:
    3636:	8a df       	rcall	.-236    	; 0x354c <__fp_cmp>
    3638:	08 f4       	brcc	.+2      	; 0x363c <__gesf2+0x6>
    363a:	8f ef       	ldi	r24, 0xFF	; 255
    363c:	08 95       	ret

0000363e <__mulsf3>:
    363e:	0b d0       	rcall	.+22     	; 0x3656 <__mulsf3x>
    3640:	c0 cf       	rjmp	.-128    	; 0x35c2 <__fp_round>
    3642:	b1 df       	rcall	.-158    	; 0x35a6 <__fp_pscA>
    3644:	28 f0       	brcs	.+10     	; 0x3650 <__mulsf3+0x12>
    3646:	b6 df       	rcall	.-148    	; 0x35b4 <__fp_pscB>
    3648:	18 f0       	brcs	.+6      	; 0x3650 <__mulsf3+0x12>
    364a:	95 23       	and	r25, r21
    364c:	09 f0       	breq	.+2      	; 0x3650 <__mulsf3+0x12>
    364e:	a2 cf       	rjmp	.-188    	; 0x3594 <__fp_inf>
    3650:	a7 cf       	rjmp	.-178    	; 0x35a0 <__fp_nan>
    3652:	11 24       	eor	r1, r1
    3654:	ea cf       	rjmp	.-44     	; 0x362a <__fp_szero>

00003656 <__mulsf3x>:
    3656:	c6 df       	rcall	.-116    	; 0x35e4 <__fp_split3>
    3658:	a0 f3       	brcs	.-24     	; 0x3642 <__mulsf3+0x4>

0000365a <__mulsf3_pse>:
    365a:	95 9f       	mul	r25, r21
    365c:	d1 f3       	breq	.-12     	; 0x3652 <__mulsf3+0x14>
    365e:	95 0f       	add	r25, r21
    3660:	50 e0       	ldi	r21, 0x00	; 0
    3662:	55 1f       	adc	r21, r21
    3664:	62 9f       	mul	r22, r18
    3666:	f0 01       	movw	r30, r0
    3668:	72 9f       	mul	r23, r18
    366a:	bb 27       	eor	r27, r27
    366c:	f0 0d       	add	r31, r0
    366e:	b1 1d       	adc	r27, r1
    3670:	63 9f       	mul	r22, r19
    3672:	aa 27       	eor	r26, r26
    3674:	f0 0d       	add	r31, r0
    3676:	b1 1d       	adc	r27, r1
    3678:	aa 1f       	adc	r26, r26
    367a:	64 9f       	mul	r22, r20
    367c:	66 27       	eor	r22, r22
    367e:	b0 0d       	add	r27, r0
    3680:	a1 1d       	adc	r26, r1
    3682:	66 1f       	adc	r22, r22
    3684:	82 9f       	mul	r24, r18
    3686:	22 27       	eor	r18, r18
    3688:	b0 0d       	add	r27, r0
    368a:	a1 1d       	adc	r26, r1
    368c:	62 1f       	adc	r22, r18
    368e:	73 9f       	mul	r23, r19
    3690:	b0 0d       	add	r27, r0
    3692:	a1 1d       	adc	r26, r1
    3694:	62 1f       	adc	r22, r18
    3696:	83 9f       	mul	r24, r19
    3698:	a0 0d       	add	r26, r0
    369a:	61 1d       	adc	r22, r1
    369c:	22 1f       	adc	r18, r18
    369e:	74 9f       	mul	r23, r20
    36a0:	33 27       	eor	r19, r19
    36a2:	a0 0d       	add	r26, r0
    36a4:	61 1d       	adc	r22, r1
    36a6:	23 1f       	adc	r18, r19
    36a8:	84 9f       	mul	r24, r20
    36aa:	60 0d       	add	r22, r0
    36ac:	21 1d       	adc	r18, r1
    36ae:	82 2f       	mov	r24, r18
    36b0:	76 2f       	mov	r23, r22
    36b2:	6a 2f       	mov	r22, r26
    36b4:	11 24       	eor	r1, r1
    36b6:	9f 57       	subi	r25, 0x7F	; 127
    36b8:	50 40       	sbci	r21, 0x00	; 0
    36ba:	8a f0       	brmi	.+34     	; 0x36de <__mulsf3_pse+0x84>
    36bc:	e1 f0       	breq	.+56     	; 0x36f6 <__mulsf3_pse+0x9c>
    36be:	88 23       	and	r24, r24
    36c0:	4a f0       	brmi	.+18     	; 0x36d4 <__mulsf3_pse+0x7a>
    36c2:	ee 0f       	add	r30, r30
    36c4:	ff 1f       	adc	r31, r31
    36c6:	bb 1f       	adc	r27, r27
    36c8:	66 1f       	adc	r22, r22
    36ca:	77 1f       	adc	r23, r23
    36cc:	88 1f       	adc	r24, r24
    36ce:	91 50       	subi	r25, 0x01	; 1
    36d0:	50 40       	sbci	r21, 0x00	; 0
    36d2:	a9 f7       	brne	.-22     	; 0x36be <__mulsf3_pse+0x64>
    36d4:	9e 3f       	cpi	r25, 0xFE	; 254
    36d6:	51 05       	cpc	r21, r1
    36d8:	70 f0       	brcs	.+28     	; 0x36f6 <__mulsf3_pse+0x9c>
    36da:	5c cf       	rjmp	.-328    	; 0x3594 <__fp_inf>
    36dc:	a6 cf       	rjmp	.-180    	; 0x362a <__fp_szero>
    36de:	5f 3f       	cpi	r21, 0xFF	; 255
    36e0:	ec f3       	brlt	.-6      	; 0x36dc <__mulsf3_pse+0x82>
    36e2:	98 3e       	cpi	r25, 0xE8	; 232
    36e4:	dc f3       	brlt	.-10     	; 0x36dc <__mulsf3_pse+0x82>
    36e6:	86 95       	lsr	r24
    36e8:	77 95       	ror	r23
    36ea:	67 95       	ror	r22
    36ec:	b7 95       	ror	r27
    36ee:	f7 95       	ror	r31
    36f0:	e7 95       	ror	r30
    36f2:	9f 5f       	subi	r25, 0xFF	; 255
    36f4:	c1 f7       	brne	.-16     	; 0x36e6 <__mulsf3_pse+0x8c>
    36f6:	fe 2b       	or	r31, r30
    36f8:	88 0f       	add	r24, r24
    36fa:	91 1d       	adc	r25, r1
    36fc:	96 95       	lsr	r25
    36fe:	87 95       	ror	r24
    3700:	97 f9       	bld	r25, 7
    3702:	08 95       	ret
    3704:	11 f4       	brne	.+4      	; 0x370a <__mulsf3_pse+0xb0>
    3706:	0e f4       	brtc	.+2      	; 0x370a <__mulsf3_pse+0xb0>
    3708:	4b cf       	rjmp	.-362    	; 0x35a0 <__fp_nan>
    370a:	41 c0       	rjmp	.+130    	; 0x378e <__fp_mpack>

0000370c <sqrt>:
    370c:	73 df       	rcall	.-282    	; 0x35f4 <__fp_splitA>
    370e:	d0 f3       	brcs	.-12     	; 0x3704 <__mulsf3_pse+0xaa>
    3710:	99 23       	and	r25, r25
    3712:	d9 f3       	breq	.-10     	; 0x370a <__mulsf3_pse+0xb0>
    3714:	ce f3       	brts	.-14     	; 0x3708 <__mulsf3_pse+0xae>
    3716:	9f 57       	subi	r25, 0x7F	; 127
    3718:	55 0b       	sbc	r21, r21
    371a:	87 ff       	sbrs	r24, 7
    371c:	46 d0       	rcall	.+140    	; 0x37aa <__fp_norm2>
    371e:	00 24       	eor	r0, r0
    3720:	a0 e6       	ldi	r26, 0x60	; 96
    3722:	40 ea       	ldi	r20, 0xA0	; 160
    3724:	90 01       	movw	r18, r0
    3726:	80 58       	subi	r24, 0x80	; 128
    3728:	56 95       	lsr	r21
    372a:	97 95       	ror	r25
    372c:	28 f4       	brcc	.+10     	; 0x3738 <sqrt+0x2c>
    372e:	80 5c       	subi	r24, 0xC0	; 192
    3730:	66 0f       	add	r22, r22
    3732:	77 1f       	adc	r23, r23
    3734:	88 1f       	adc	r24, r24
    3736:	20 f0       	brcs	.+8      	; 0x3740 <sqrt+0x34>
    3738:	26 17       	cp	r18, r22
    373a:	37 07       	cpc	r19, r23
    373c:	48 07       	cpc	r20, r24
    373e:	30 f4       	brcc	.+12     	; 0x374c <sqrt+0x40>
    3740:	62 1b       	sub	r22, r18
    3742:	73 0b       	sbc	r23, r19
    3744:	84 0b       	sbc	r24, r20
    3746:	20 29       	or	r18, r0
    3748:	31 29       	or	r19, r1
    374a:	4a 2b       	or	r20, r26
    374c:	a6 95       	lsr	r26
    374e:	17 94       	ror	r1
    3750:	07 94       	ror	r0
    3752:	20 25       	eor	r18, r0
    3754:	31 25       	eor	r19, r1
    3756:	4a 27       	eor	r20, r26
    3758:	58 f7       	brcc	.-42     	; 0x3730 <sqrt+0x24>
    375a:	66 0f       	add	r22, r22
    375c:	77 1f       	adc	r23, r23
    375e:	88 1f       	adc	r24, r24
    3760:	20 f0       	brcs	.+8      	; 0x376a <sqrt+0x5e>
    3762:	26 17       	cp	r18, r22
    3764:	37 07       	cpc	r19, r23
    3766:	48 07       	cpc	r20, r24
    3768:	30 f4       	brcc	.+12     	; 0x3776 <sqrt+0x6a>
    376a:	62 0b       	sbc	r22, r18
    376c:	73 0b       	sbc	r23, r19
    376e:	84 0b       	sbc	r24, r20
    3770:	20 0d       	add	r18, r0
    3772:	31 1d       	adc	r19, r1
    3774:	41 1d       	adc	r20, r1
    3776:	a0 95       	com	r26
    3778:	81 f7       	brne	.-32     	; 0x375a <sqrt+0x4e>
    377a:	b9 01       	movw	r22, r18
    377c:	84 2f       	mov	r24, r20
    377e:	91 58       	subi	r25, 0x81	; 129
    3780:	88 0f       	add	r24, r24
    3782:	96 95       	lsr	r25
    3784:	87 95       	ror	r24
    3786:	08 95       	ret

00003788 <square>:
    3788:	9b 01       	movw	r18, r22
    378a:	ac 01       	movw	r20, r24
    378c:	58 cf       	rjmp	.-336    	; 0x363e <__mulsf3>

0000378e <__fp_mpack>:
    378e:	9f 3f       	cpi	r25, 0xFF	; 255
    3790:	31 f0       	breq	.+12     	; 0x379e <__fp_mpack_finite+0xc>

00003792 <__fp_mpack_finite>:
    3792:	91 50       	subi	r25, 0x01	; 1
    3794:	20 f4       	brcc	.+8      	; 0x379e <__fp_mpack_finite+0xc>
    3796:	87 95       	ror	r24
    3798:	77 95       	ror	r23
    379a:	67 95       	ror	r22
    379c:	b7 95       	ror	r27
    379e:	88 0f       	add	r24, r24
    37a0:	91 1d       	adc	r25, r1
    37a2:	96 95       	lsr	r25
    37a4:	87 95       	ror	r24
    37a6:	97 f9       	bld	r25, 7
    37a8:	08 95       	ret

000037aa <__fp_norm2>:
    37aa:	91 50       	subi	r25, 0x01	; 1
    37ac:	50 40       	sbci	r21, 0x00	; 0
    37ae:	66 0f       	add	r22, r22
    37b0:	77 1f       	adc	r23, r23
    37b2:	88 1f       	adc	r24, r24
    37b4:	d2 f7       	brpl	.-12     	; 0x37aa <__fp_norm2>
    37b6:	08 95       	ret

000037b8 <__udivmodsi4>:
    37b8:	a1 e2       	ldi	r26, 0x21	; 33
    37ba:	1a 2e       	mov	r1, r26
    37bc:	aa 1b       	sub	r26, r26
    37be:	bb 1b       	sub	r27, r27
    37c0:	fd 01       	movw	r30, r26
    37c2:	0d c0       	rjmp	.+26     	; 0x37de <__udivmodsi4_ep>

000037c4 <__udivmodsi4_loop>:
    37c4:	aa 1f       	adc	r26, r26
    37c6:	bb 1f       	adc	r27, r27
    37c8:	ee 1f       	adc	r30, r30
    37ca:	ff 1f       	adc	r31, r31
    37cc:	a2 17       	cp	r26, r18
    37ce:	b3 07       	cpc	r27, r19
    37d0:	e4 07       	cpc	r30, r20
    37d2:	f5 07       	cpc	r31, r21
    37d4:	20 f0       	brcs	.+8      	; 0x37de <__udivmodsi4_ep>
    37d6:	a2 1b       	sub	r26, r18
    37d8:	b3 0b       	sbc	r27, r19
    37da:	e4 0b       	sbc	r30, r20
    37dc:	f5 0b       	sbc	r31, r21

000037de <__udivmodsi4_ep>:
    37de:	66 1f       	adc	r22, r22
    37e0:	77 1f       	adc	r23, r23
    37e2:	88 1f       	adc	r24, r24
    37e4:	99 1f       	adc	r25, r25
    37e6:	1a 94       	dec	r1
    37e8:	69 f7       	brne	.-38     	; 0x37c4 <__udivmodsi4_loop>
    37ea:	60 95       	com	r22
    37ec:	70 95       	com	r23
    37ee:	80 95       	com	r24
    37f0:	90 95       	com	r25
    37f2:	9b 01       	movw	r18, r22
    37f4:	ac 01       	movw	r20, r24
    37f6:	bd 01       	movw	r22, r26
    37f8:	cf 01       	movw	r24, r30
    37fa:	08 95       	ret

000037fc <__prologue_saves__>:
    37fc:	2f 92       	push	r2
    37fe:	3f 92       	push	r3
    3800:	4f 92       	push	r4
    3802:	5f 92       	push	r5
    3804:	6f 92       	push	r6
    3806:	7f 92       	push	r7
    3808:	8f 92       	push	r8
    380a:	9f 92       	push	r9
    380c:	af 92       	push	r10
    380e:	bf 92       	push	r11
    3810:	cf 92       	push	r12
    3812:	df 92       	push	r13
    3814:	ef 92       	push	r14
    3816:	ff 92       	push	r15
    3818:	0f 93       	push	r16
    381a:	1f 93       	push	r17
    381c:	cf 93       	push	r28
    381e:	df 93       	push	r29
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
    3824:	ca 1b       	sub	r28, r26
    3826:	db 0b       	sbc	r29, r27
    3828:	0f b6       	in	r0, 0x3f	; 63
    382a:	f8 94       	cli
    382c:	de bf       	out	0x3e, r29	; 62
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	cd bf       	out	0x3d, r28	; 61
    3832:	09 94       	ijmp

00003834 <__epilogue_restores__>:
    3834:	2a 88       	ldd	r2, Y+18	; 0x12
    3836:	39 88       	ldd	r3, Y+17	; 0x11
    3838:	48 88       	ldd	r4, Y+16	; 0x10
    383a:	5f 84       	ldd	r5, Y+15	; 0x0f
    383c:	6e 84       	ldd	r6, Y+14	; 0x0e
    383e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3840:	8c 84       	ldd	r8, Y+12	; 0x0c
    3842:	9b 84       	ldd	r9, Y+11	; 0x0b
    3844:	aa 84       	ldd	r10, Y+10	; 0x0a
    3846:	b9 84       	ldd	r11, Y+9	; 0x09
    3848:	c8 84       	ldd	r12, Y+8	; 0x08
    384a:	df 80       	ldd	r13, Y+7	; 0x07
    384c:	ee 80       	ldd	r14, Y+6	; 0x06
    384e:	fd 80       	ldd	r15, Y+5	; 0x05
    3850:	0c 81       	ldd	r16, Y+4	; 0x04
    3852:	1b 81       	ldd	r17, Y+3	; 0x03
    3854:	aa 81       	ldd	r26, Y+2	; 0x02
    3856:	b9 81       	ldd	r27, Y+1	; 0x01
    3858:	ce 0f       	add	r28, r30
    385a:	d1 1d       	adc	r29, r1
    385c:	0f b6       	in	r0, 0x3f	; 63
    385e:	f8 94       	cli
    3860:	de bf       	out	0x3e, r29	; 62
    3862:	0f be       	out	0x3f, r0	; 63
    3864:	cd bf       	out	0x3d, r28	; 61
    3866:	ed 01       	movw	r28, r26
    3868:	08 95       	ret

0000386a <strtod>:
    386a:	a0 e0       	ldi	r26, 0x00	; 0
    386c:	b0 e0       	ldi	r27, 0x00	; 0
    386e:	eb e3       	ldi	r30, 0x3B	; 59
    3870:	fc e1       	ldi	r31, 0x1C	; 28
    3872:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <__prologue_saves__+0xc>
    3876:	ec 01       	movw	r28, r24
    3878:	5b 01       	movw	r10, r22
    387a:	61 15       	cp	r22, r1
    387c:	71 05       	cpc	r23, r1
    387e:	19 f0       	breq	.+6      	; 0x3886 <strtod+0x1c>
    3880:	fb 01       	movw	r30, r22
    3882:	91 83       	std	Z+1, r25	; 0x01
    3884:	80 83       	st	Z, r24
    3886:	f9 90       	ld	r15, Y+
    3888:	8f 2d       	mov	r24, r15
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <isspace>
    3890:	89 2b       	or	r24, r25
    3892:	c9 f7       	brne	.-14     	; 0x3886 <strtod+0x1c>
    3894:	fd e2       	ldi	r31, 0x2D	; 45
    3896:	ff 16       	cp	r15, r31
    3898:	21 f4       	brne	.+8      	; 0x38a2 <strtod+0x38>
    389a:	f9 90       	ld	r15, Y+
    389c:	ee 24       	eor	r14, r14
    389e:	e3 94       	inc	r14
    38a0:	05 c0       	rjmp	.+10     	; 0x38ac <strtod+0x42>
    38a2:	2b e2       	ldi	r18, 0x2B	; 43
    38a4:	f2 16       	cp	r15, r18
    38a6:	09 f4       	brne	.+2      	; 0x38aa <strtod+0x40>
    38a8:	f9 90       	ld	r15, Y+
    38aa:	ee 24       	eor	r14, r14
    38ac:	8e 01       	movw	r16, r28
    38ae:	01 50       	subi	r16, 0x01	; 1
    38b0:	10 40       	sbci	r17, 0x00	; 0
    38b2:	c8 01       	movw	r24, r16
    38b4:	67 e7       	ldi	r22, 0x77	; 119
    38b6:	73 e0       	ldi	r23, 0x03	; 3
    38b8:	43 e0       	ldi	r20, 0x03	; 3
    38ba:	50 e0       	ldi	r21, 0x00	; 0
    38bc:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <strncasecmp_P>
    38c0:	89 2b       	or	r24, r25
    38c2:	01 f5       	brne	.+64     	; 0x3904 <strtod+0x9a>
    38c4:	8e 01       	movw	r16, r28
    38c6:	0e 5f       	subi	r16, 0xFE	; 254
    38c8:	1f 4f       	sbci	r17, 0xFF	; 255
    38ca:	c8 01       	movw	r24, r16
    38cc:	6a e7       	ldi	r22, 0x7A	; 122
    38ce:	73 e0       	ldi	r23, 0x03	; 3
    38d0:	45 e0       	ldi	r20, 0x05	; 5
    38d2:	50 e0       	ldi	r21, 0x00	; 0
    38d4:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <strncasecmp_P>
    38d8:	89 2b       	or	r24, r25
    38da:	19 f4       	brne	.+6      	; 0x38e2 <strtod+0x78>
    38dc:	8e 01       	movw	r16, r28
    38de:	09 5f       	subi	r16, 0xF9	; 249
    38e0:	1f 4f       	sbci	r17, 0xFF	; 255
    38e2:	a1 14       	cp	r10, r1
    38e4:	b1 04       	cpc	r11, r1
    38e6:	19 f0       	breq	.+6      	; 0x38ee <strtod+0x84>
    38e8:	f5 01       	movw	r30, r10
    38ea:	11 83       	std	Z+1, r17	; 0x01
    38ec:	00 83       	st	Z, r16
    38ee:	e0 fc       	sbrc	r14, 0
    38f0:	04 c0       	rjmp	.+8      	; 0x38fa <strtod+0x90>
    38f2:	70 e0       	ldi	r23, 0x00	; 0
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	80 e8       	ldi	r24, 0x80	; 128
    38f8:	14 c0       	rjmp	.+40     	; 0x3922 <strtod+0xb8>
    38fa:	70 e0       	ldi	r23, 0x00	; 0
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	80 e8       	ldi	r24, 0x80	; 128
    3900:	6f ef       	ldi	r22, 0xFF	; 255
    3902:	08 c1       	rjmp	.+528    	; 0x3b14 <strtod+0x2aa>
    3904:	c8 01       	movw	r24, r16
    3906:	6f e7       	ldi	r22, 0x7F	; 127
    3908:	73 e0       	ldi	r23, 0x03	; 3
    390a:	43 e0       	ldi	r20, 0x03	; 3
    390c:	50 e0       	ldi	r21, 0x00	; 0
    390e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <strncasecmp_P>
    3912:	89 2b       	or	r24, r25
    3914:	69 f4       	brne	.+26     	; 0x3930 <strtod+0xc6>
    3916:	a1 14       	cp	r10, r1
    3918:	b1 04       	cpc	r11, r1
    391a:	29 f4       	brne	.+10     	; 0x3926 <strtod+0xbc>
    391c:	70 e0       	ldi	r23, 0x00	; 0
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	80 ec       	ldi	r24, 0xC0	; 192
    3922:	6f e7       	ldi	r22, 0x7F	; 127
    3924:	f7 c0       	rjmp	.+494    	; 0x3b14 <strtod+0x2aa>
    3926:	22 96       	adiw	r28, 0x02	; 2
    3928:	f5 01       	movw	r30, r10
    392a:	d1 83       	std	Z+1, r29	; 0x01
    392c:	c0 83       	st	Z, r28
    392e:	f6 cf       	rjmp	.-20     	; 0x391c <strtod+0xb2>
    3930:	88 24       	eor	r8, r8
    3932:	99 24       	eor	r9, r9
    3934:	40 e0       	ldi	r20, 0x00	; 0
    3936:	50 e0       	ldi	r21, 0x00	; 0
    3938:	60 e0       	ldi	r22, 0x00	; 0
    393a:	70 e0       	ldi	r23, 0x00	; 0
    393c:	ef 2d       	mov	r30, r15
    393e:	e0 53       	subi	r30, 0x30	; 48
    3940:	ea 30       	cpi	r30, 0x0A	; 10
    3942:	a0 f5       	brcc	.+104    	; 0x39ac <strtod+0x142>
    3944:	f2 e0       	ldi	r31, 0x02	; 2
    3946:	ef 2a       	or	r14, r31
    3948:	8e 2d       	mov	r24, r14
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	9c 01       	movw	r18, r24
    394e:	28 70       	andi	r18, 0x08	; 8
    3950:	30 70       	andi	r19, 0x00	; 0
    3952:	e2 fe       	sbrs	r14, 2
    3954:	06 c0       	rjmp	.+12     	; 0x3962 <strtod+0xf8>
    3956:	23 2b       	or	r18, r19
    3958:	79 f5       	brne	.+94     	; 0x39b8 <strtod+0x14e>
    395a:	08 94       	sec
    395c:	81 1c       	adc	r8, r1
    395e:	91 1c       	adc	r9, r1
    3960:	2b c0       	rjmp	.+86     	; 0x39b8 <strtod+0x14e>
    3962:	23 2b       	or	r18, r19
    3964:	19 f0       	breq	.+6      	; 0x396c <strtod+0x102>
    3966:	08 94       	sec
    3968:	81 08       	sbc	r8, r1
    396a:	91 08       	sbc	r9, r1
    396c:	db 01       	movw	r26, r22
    396e:	ca 01       	movw	r24, r20
    3970:	12 e0       	ldi	r17, 0x02	; 2
    3972:	88 0f       	add	r24, r24
    3974:	99 1f       	adc	r25, r25
    3976:	aa 1f       	adc	r26, r26
    3978:	bb 1f       	adc	r27, r27
    397a:	1a 95       	dec	r17
    397c:	d1 f7       	brne	.-12     	; 0x3972 <strtod+0x108>
    397e:	48 0f       	add	r20, r24
    3980:	59 1f       	adc	r21, r25
    3982:	6a 1f       	adc	r22, r26
    3984:	7b 1f       	adc	r23, r27
    3986:	44 0f       	add	r20, r20
    3988:	55 1f       	adc	r21, r21
    398a:	66 1f       	adc	r22, r22
    398c:	77 1f       	adc	r23, r23
    398e:	4e 0f       	add	r20, r30
    3990:	51 1d       	adc	r21, r1
    3992:	61 1d       	adc	r22, r1
    3994:	71 1d       	adc	r23, r1
    3996:	48 39       	cpi	r20, 0x98	; 152
    3998:	29 e9       	ldi	r18, 0x99	; 153
    399a:	52 07       	cpc	r21, r18
    399c:	29 e9       	ldi	r18, 0x99	; 153
    399e:	62 07       	cpc	r22, r18
    39a0:	29 e1       	ldi	r18, 0x19	; 25
    39a2:	72 07       	cpc	r23, r18
    39a4:	48 f0       	brcs	.+18     	; 0x39b8 <strtod+0x14e>
    39a6:	84 e0       	ldi	r24, 0x04	; 4
    39a8:	e8 2a       	or	r14, r24
    39aa:	06 c0       	rjmp	.+12     	; 0x39b8 <strtod+0x14e>
    39ac:	ee 3f       	cpi	r30, 0xFE	; 254
    39ae:	31 f4       	brne	.+12     	; 0x39bc <strtod+0x152>
    39b0:	e3 fc       	sbrc	r14, 3
    39b2:	39 c0       	rjmp	.+114    	; 0x3a26 <strtod+0x1bc>
    39b4:	98 e0       	ldi	r25, 0x08	; 8
    39b6:	e9 2a       	or	r14, r25
    39b8:	f9 90       	ld	r15, Y+
    39ba:	c0 cf       	rjmp	.-128    	; 0x393c <strtod+0xd2>
    39bc:	e5 33       	cpi	r30, 0x35	; 53
    39be:	11 f0       	breq	.+4      	; 0x39c4 <strtod+0x15a>
    39c0:	e5 31       	cpi	r30, 0x15	; 21
    39c2:	89 f5       	brne	.+98     	; 0x3a26 <strtod+0x1bc>
    39c4:	29 91       	ld	r18, Y+
    39c6:	2d 32       	cpi	r18, 0x2D	; 45
    39c8:	19 f4       	brne	.+6      	; 0x39d0 <strtod+0x166>
    39ca:	e0 e1       	ldi	r30, 0x10	; 16
    39cc:	ee 2a       	or	r14, r30
    39ce:	05 c0       	rjmp	.+10     	; 0x39da <strtod+0x170>
    39d0:	2b 32       	cpi	r18, 0x2B	; 43
    39d2:	19 f0       	breq	.+6      	; 0x39da <strtod+0x170>
    39d4:	81 e0       	ldi	r24, 0x01	; 1
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	03 c0       	rjmp	.+6      	; 0x39e0 <strtod+0x176>
    39da:	29 91       	ld	r18, Y+
    39dc:	82 e0       	ldi	r24, 0x02	; 2
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	e2 2f       	mov	r30, r18
    39e2:	e0 53       	subi	r30, 0x30	; 48
    39e4:	ea 30       	cpi	r30, 0x0A	; 10
    39e6:	18 f0       	brcs	.+6      	; 0x39ee <strtod+0x184>
    39e8:	c8 1b       	sub	r28, r24
    39ea:	d9 0b       	sbc	r29, r25
    39ec:	1c c0       	rjmp	.+56     	; 0x3a26 <strtod+0x1bc>
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	30 e0       	ldi	r19, 0x00	; 0
    39f2:	fc e0       	ldi	r31, 0x0C	; 12
    39f4:	20 38       	cpi	r18, 0x80	; 128
    39f6:	3f 07       	cpc	r19, r31
    39f8:	5c f4       	brge	.+22     	; 0x3a10 <strtod+0x1a6>
    39fa:	c9 01       	movw	r24, r18
    39fc:	88 0f       	add	r24, r24
    39fe:	99 1f       	adc	r25, r25
    3a00:	88 0f       	add	r24, r24
    3a02:	99 1f       	adc	r25, r25
    3a04:	28 0f       	add	r18, r24
    3a06:	39 1f       	adc	r19, r25
    3a08:	22 0f       	add	r18, r18
    3a0a:	33 1f       	adc	r19, r19
    3a0c:	2e 0f       	add	r18, r30
    3a0e:	31 1d       	adc	r19, r1
    3a10:	e9 91       	ld	r30, Y+
    3a12:	e0 53       	subi	r30, 0x30	; 48
    3a14:	ea 30       	cpi	r30, 0x0A	; 10
    3a16:	68 f3       	brcs	.-38     	; 0x39f2 <strtod+0x188>
    3a18:	e4 fe       	sbrs	r14, 4
    3a1a:	03 c0       	rjmp	.+6      	; 0x3a22 <strtod+0x1b8>
    3a1c:	30 95       	com	r19
    3a1e:	21 95       	neg	r18
    3a20:	3f 4f       	sbci	r19, 0xFF	; 255
    3a22:	82 0e       	add	r8, r18
    3a24:	93 1e       	adc	r9, r19
    3a26:	ce 2c       	mov	r12, r14
    3a28:	dd 24       	eor	r13, r13
    3a2a:	e1 fe       	sbrs	r14, 1
    3a2c:	07 c0       	rjmp	.+14     	; 0x3a3c <strtod+0x1d2>
    3a2e:	a1 14       	cp	r10, r1
    3a30:	b1 04       	cpc	r11, r1
    3a32:	21 f0       	breq	.+8      	; 0x3a3c <strtod+0x1d2>
    3a34:	21 97       	sbiw	r28, 0x01	; 1
    3a36:	f5 01       	movw	r30, r10
    3a38:	d1 83       	std	Z+1, r29	; 0x01
    3a3a:	c0 83       	st	Z, r28
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	ba 01       	movw	r22, r20
    3a40:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__floatunsisf>
    3a44:	7b 01       	movw	r14, r22
    3a46:	8c 01       	movw	r16, r24
    3a48:	f3 e0       	ldi	r31, 0x03	; 3
    3a4a:	cf 22       	and	r12, r31
    3a4c:	dd 24       	eor	r13, r13
    3a4e:	23 e0       	ldi	r18, 0x03	; 3
    3a50:	c2 16       	cp	r12, r18
    3a52:	d1 04       	cpc	r13, r1
    3a54:	21 f4       	brne	.+8      	; 0x3a5e <strtod+0x1f4>
    3a56:	17 fb       	bst	r17, 7
    3a58:	10 95       	com	r17
    3a5a:	17 f9       	bld	r17, 7
    3a5c:	10 95       	com	r17
    3a5e:	57 01       	movw	r10, r14
    3a60:	68 01       	movw	r12, r16
    3a62:	c8 01       	movw	r24, r16
    3a64:	b7 01       	movw	r22, r14
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	40 e0       	ldi	r20, 0x00	; 0
    3a6c:	50 e0       	ldi	r21, 0x00	; 0
    3a6e:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__cmpsf2>
    3a72:	88 23       	and	r24, r24
    3a74:	09 f4       	brne	.+2      	; 0x3a78 <strtod+0x20e>
    3a76:	4a c0       	rjmp	.+148    	; 0x3b0c <strtod+0x2a2>
    3a78:	97 fe       	sbrs	r9, 7
    3a7a:	0d c0       	rjmp	.+26     	; 0x3a96 <strtod+0x22c>
    3a7c:	26 e9       	ldi	r18, 0x96	; 150
    3a7e:	e2 2e       	mov	r14, r18
    3a80:	23 e0       	ldi	r18, 0x03	; 3
    3a82:	f2 2e       	mov	r15, r18
    3a84:	90 94       	com	r9
    3a86:	81 94       	neg	r8
    3a88:	91 08       	sbc	r9, r1
    3a8a:	93 94       	inc	r9
    3a8c:	c0 e2       	ldi	r28, 0x20	; 32
    3a8e:	d0 e0       	ldi	r29, 0x00	; 0
    3a90:	00 e0       	ldi	r16, 0x00	; 0
    3a92:	10 e0       	ldi	r17, 0x00	; 0
    3a94:	12 c0       	rjmp	.+36     	; 0x3aba <strtod+0x250>
    3a96:	9e ea       	ldi	r25, 0xAE	; 174
    3a98:	e9 2e       	mov	r14, r25
    3a9a:	93 e0       	ldi	r25, 0x03	; 3
    3a9c:	f9 2e       	mov	r15, r25
    3a9e:	f6 cf       	rjmp	.-20     	; 0x3a8c <strtod+0x222>
    3aa0:	f7 01       	movw	r30, r14
    3aa2:	25 91       	lpm	r18, Z+
    3aa4:	35 91       	lpm	r19, Z+
    3aa6:	45 91       	lpm	r20, Z+
    3aa8:	54 91       	lpm	r21, Z+
    3aaa:	c6 01       	movw	r24, r12
    3aac:	b5 01       	movw	r22, r10
    3aae:	0e 94 1f 1b 	call	0x363e	; 0x363e <__mulsf3>
    3ab2:	5b 01       	movw	r10, r22
    3ab4:	6c 01       	movw	r12, r24
    3ab6:	8c 1a       	sub	r8, r28
    3ab8:	9d 0a       	sbc	r9, r29
    3aba:	8c 16       	cp	r8, r28
    3abc:	9d 06       	cpc	r9, r29
    3abe:	84 f7       	brge	.-32     	; 0x3aa0 <strtod+0x236>
    3ac0:	d5 95       	asr	r29
    3ac2:	c7 95       	ror	r28
    3ac4:	0f 5f       	subi	r16, 0xFF	; 255
    3ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac8:	06 30       	cpi	r16, 0x06	; 6
    3aca:	11 05       	cpc	r17, r1
    3acc:	29 f0       	breq	.+10     	; 0x3ad8 <strtod+0x26e>
    3ace:	8c ef       	ldi	r24, 0xFC	; 252
    3ad0:	9f ef       	ldi	r25, 0xFF	; 255
    3ad2:	e8 0e       	add	r14, r24
    3ad4:	f9 1e       	adc	r15, r25
    3ad6:	f1 cf       	rjmp	.-30     	; 0x3aba <strtod+0x250>
    3ad8:	c5 01       	movw	r24, r10
    3ada:	d6 01       	movw	r26, r12
    3adc:	7c 01       	movw	r14, r24
    3ade:	8d 01       	movw	r16, r26
    3ae0:	8c 2d       	mov	r24, r12
    3ae2:	88 0f       	add	r24, r24
    3ae4:	8d 2d       	mov	r24, r13
    3ae6:	88 1f       	adc	r24, r24
    3ae8:	8f 3f       	cpi	r24, 0xFF	; 255
    3aea:	51 f0       	breq	.+20     	; 0x3b00 <strtod+0x296>
    3aec:	c6 01       	movw	r24, r12
    3aee:	b5 01       	movw	r22, r10
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	40 e0       	ldi	r20, 0x00	; 0
    3af6:	50 e0       	ldi	r21, 0x00	; 0
    3af8:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__cmpsf2>
    3afc:	88 23       	and	r24, r24
    3afe:	31 f4       	brne	.+12     	; 0x3b0c <strtod+0x2a2>
    3b00:	82 e2       	ldi	r24, 0x22	; 34
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	90 93 81 06 	sts	0x0681, r25
    3b08:	80 93 80 06 	sts	0x0680, r24
    3b0c:	7e 2d       	mov	r23, r14
    3b0e:	9f 2d       	mov	r25, r15
    3b10:	80 2f       	mov	r24, r16
    3b12:	61 2f       	mov	r22, r17
    3b14:	27 2f       	mov	r18, r23
    3b16:	39 2f       	mov	r19, r25
    3b18:	48 2f       	mov	r20, r24
    3b1a:	56 2f       	mov	r21, r22
    3b1c:	b9 01       	movw	r22, r18
    3b1e:	ca 01       	movw	r24, r20
    3b20:	cd b7       	in	r28, 0x3d	; 61
    3b22:	de b7       	in	r29, 0x3e	; 62
    3b24:	ec e0       	ldi	r30, 0x0C	; 12
    3b26:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__epilogue_restores__+0xc>

00003b2a <__ftoa_engine>:
    3b2a:	28 30       	cpi	r18, 0x08	; 8
    3b2c:	08 f0       	brcs	.+2      	; 0x3b30 <__ftoa_engine+0x6>
    3b2e:	27 e0       	ldi	r18, 0x07	; 7
    3b30:	33 27       	eor	r19, r19
    3b32:	da 01       	movw	r26, r20
    3b34:	99 0f       	add	r25, r25
    3b36:	31 1d       	adc	r19, r1
    3b38:	87 fd       	sbrc	r24, 7
    3b3a:	91 60       	ori	r25, 0x01	; 1
    3b3c:	00 96       	adiw	r24, 0x00	; 0
    3b3e:	61 05       	cpc	r22, r1
    3b40:	71 05       	cpc	r23, r1
    3b42:	39 f4       	brne	.+14     	; 0x3b52 <__ftoa_engine+0x28>
    3b44:	32 60       	ori	r19, 0x02	; 2
    3b46:	2e 5f       	subi	r18, 0xFE	; 254
    3b48:	3d 93       	st	X+, r19
    3b4a:	30 e3       	ldi	r19, 0x30	; 48
    3b4c:	2a 95       	dec	r18
    3b4e:	e1 f7       	brne	.-8      	; 0x3b48 <__ftoa_engine+0x1e>
    3b50:	08 95       	ret
    3b52:	9f 3f       	cpi	r25, 0xFF	; 255
    3b54:	30 f0       	brcs	.+12     	; 0x3b62 <__ftoa_engine+0x38>
    3b56:	80 38       	cpi	r24, 0x80	; 128
    3b58:	71 05       	cpc	r23, r1
    3b5a:	61 05       	cpc	r22, r1
    3b5c:	09 f0       	breq	.+2      	; 0x3b60 <__ftoa_engine+0x36>
    3b5e:	3c 5f       	subi	r19, 0xFC	; 252
    3b60:	3c 5f       	subi	r19, 0xFC	; 252
    3b62:	3d 93       	st	X+, r19
    3b64:	91 30       	cpi	r25, 0x01	; 1
    3b66:	08 f0       	brcs	.+2      	; 0x3b6a <__ftoa_engine+0x40>
    3b68:	80 68       	ori	r24, 0x80	; 128
    3b6a:	91 1d       	adc	r25, r1
    3b6c:	df 93       	push	r29
    3b6e:	cf 93       	push	r28
    3b70:	1f 93       	push	r17
    3b72:	0f 93       	push	r16
    3b74:	ff 92       	push	r15
    3b76:	ef 92       	push	r14
    3b78:	19 2f       	mov	r17, r25
    3b7a:	98 7f       	andi	r25, 0xF8	; 248
    3b7c:	96 95       	lsr	r25
    3b7e:	e9 2f       	mov	r30, r25
    3b80:	96 95       	lsr	r25
    3b82:	96 95       	lsr	r25
    3b84:	e9 0f       	add	r30, r25
    3b86:	ff 27       	eor	r31, r31
    3b88:	e4 5f       	subi	r30, 0xF4	; 244
    3b8a:	fb 4f       	sbci	r31, 0xFB	; 251
    3b8c:	99 27       	eor	r25, r25
    3b8e:	33 27       	eor	r19, r19
    3b90:	ee 24       	eor	r14, r14
    3b92:	ff 24       	eor	r15, r15
    3b94:	a7 01       	movw	r20, r14
    3b96:	e7 01       	movw	r28, r14
    3b98:	05 90       	lpm	r0, Z+
    3b9a:	08 94       	sec
    3b9c:	07 94       	ror	r0
    3b9e:	28 f4       	brcc	.+10     	; 0x3baa <__ftoa_engine+0x80>
    3ba0:	36 0f       	add	r19, r22
    3ba2:	e7 1e       	adc	r14, r23
    3ba4:	f8 1e       	adc	r15, r24
    3ba6:	49 1f       	adc	r20, r25
    3ba8:	51 1d       	adc	r21, r1
    3baa:	66 0f       	add	r22, r22
    3bac:	77 1f       	adc	r23, r23
    3bae:	88 1f       	adc	r24, r24
    3bb0:	99 1f       	adc	r25, r25
    3bb2:	06 94       	lsr	r0
    3bb4:	a1 f7       	brne	.-24     	; 0x3b9e <__ftoa_engine+0x74>
    3bb6:	05 90       	lpm	r0, Z+
    3bb8:	07 94       	ror	r0
    3bba:	28 f4       	brcc	.+10     	; 0x3bc6 <__ftoa_engine+0x9c>
    3bbc:	e7 0e       	add	r14, r23
    3bbe:	f8 1e       	adc	r15, r24
    3bc0:	49 1f       	adc	r20, r25
    3bc2:	56 1f       	adc	r21, r22
    3bc4:	c1 1d       	adc	r28, r1
    3bc6:	77 0f       	add	r23, r23
    3bc8:	88 1f       	adc	r24, r24
    3bca:	99 1f       	adc	r25, r25
    3bcc:	66 1f       	adc	r22, r22
    3bce:	06 94       	lsr	r0
    3bd0:	a1 f7       	brne	.-24     	; 0x3bba <__ftoa_engine+0x90>
    3bd2:	05 90       	lpm	r0, Z+
    3bd4:	07 94       	ror	r0
    3bd6:	28 f4       	brcc	.+10     	; 0x3be2 <__ftoa_engine+0xb8>
    3bd8:	f8 0e       	add	r15, r24
    3bda:	49 1f       	adc	r20, r25
    3bdc:	56 1f       	adc	r21, r22
    3bde:	c7 1f       	adc	r28, r23
    3be0:	d1 1d       	adc	r29, r1
    3be2:	88 0f       	add	r24, r24
    3be4:	99 1f       	adc	r25, r25
    3be6:	66 1f       	adc	r22, r22
    3be8:	77 1f       	adc	r23, r23
    3bea:	06 94       	lsr	r0
    3bec:	a1 f7       	brne	.-24     	; 0x3bd6 <__ftoa_engine+0xac>
    3bee:	05 90       	lpm	r0, Z+
    3bf0:	07 94       	ror	r0
    3bf2:	20 f4       	brcc	.+8      	; 0x3bfc <__ftoa_engine+0xd2>
    3bf4:	49 0f       	add	r20, r25
    3bf6:	56 1f       	adc	r21, r22
    3bf8:	c7 1f       	adc	r28, r23
    3bfa:	d8 1f       	adc	r29, r24
    3bfc:	99 0f       	add	r25, r25
    3bfe:	66 1f       	adc	r22, r22
    3c00:	77 1f       	adc	r23, r23
    3c02:	88 1f       	adc	r24, r24
    3c04:	06 94       	lsr	r0
    3c06:	a9 f7       	brne	.-22     	; 0x3bf2 <__ftoa_engine+0xc8>
    3c08:	84 91       	lpm	r24, Z+
    3c0a:	10 95       	com	r17
    3c0c:	17 70       	andi	r17, 0x07	; 7
    3c0e:	41 f0       	breq	.+16     	; 0x3c20 <__ftoa_engine+0xf6>
    3c10:	d6 95       	lsr	r29
    3c12:	c7 95       	ror	r28
    3c14:	57 95       	ror	r21
    3c16:	47 95       	ror	r20
    3c18:	f7 94       	ror	r15
    3c1a:	e7 94       	ror	r14
    3c1c:	1a 95       	dec	r17
    3c1e:	c1 f7       	brne	.-16     	; 0x3c10 <__ftoa_engine+0xe6>
    3c20:	e2 eb       	ldi	r30, 0xB2	; 178
    3c22:	f3 e0       	ldi	r31, 0x03	; 3
    3c24:	68 94       	set
    3c26:	15 90       	lpm	r1, Z+
    3c28:	15 91       	lpm	r17, Z+
    3c2a:	35 91       	lpm	r19, Z+
    3c2c:	65 91       	lpm	r22, Z+
    3c2e:	95 91       	lpm	r25, Z+
    3c30:	05 90       	lpm	r0, Z+
    3c32:	7f e2       	ldi	r23, 0x2F	; 47
    3c34:	73 95       	inc	r23
    3c36:	e1 18       	sub	r14, r1
    3c38:	f1 0a       	sbc	r15, r17
    3c3a:	43 0b       	sbc	r20, r19
    3c3c:	56 0b       	sbc	r21, r22
    3c3e:	c9 0b       	sbc	r28, r25
    3c40:	d0 09       	sbc	r29, r0
    3c42:	c0 f7       	brcc	.-16     	; 0x3c34 <__ftoa_engine+0x10a>
    3c44:	e1 0c       	add	r14, r1
    3c46:	f1 1e       	adc	r15, r17
    3c48:	43 1f       	adc	r20, r19
    3c4a:	56 1f       	adc	r21, r22
    3c4c:	c9 1f       	adc	r28, r25
    3c4e:	d0 1d       	adc	r29, r0
    3c50:	7e f4       	brtc	.+30     	; 0x3c70 <__ftoa_engine+0x146>
    3c52:	70 33       	cpi	r23, 0x30	; 48
    3c54:	11 f4       	brne	.+4      	; 0x3c5a <__ftoa_engine+0x130>
    3c56:	8a 95       	dec	r24
    3c58:	e6 cf       	rjmp	.-52     	; 0x3c26 <__ftoa_engine+0xfc>
    3c5a:	e8 94       	clt
    3c5c:	01 50       	subi	r16, 0x01	; 1
    3c5e:	30 f0       	brcs	.+12     	; 0x3c6c <__ftoa_engine+0x142>
    3c60:	08 0f       	add	r16, r24
    3c62:	0a f4       	brpl	.+2      	; 0x3c66 <__ftoa_engine+0x13c>
    3c64:	00 27       	eor	r16, r16
    3c66:	02 17       	cp	r16, r18
    3c68:	08 f4       	brcc	.+2      	; 0x3c6c <__ftoa_engine+0x142>
    3c6a:	20 2f       	mov	r18, r16
    3c6c:	23 95       	inc	r18
    3c6e:	02 2f       	mov	r16, r18
    3c70:	7a 33       	cpi	r23, 0x3A	; 58
    3c72:	28 f0       	brcs	.+10     	; 0x3c7e <__ftoa_engine+0x154>
    3c74:	79 e3       	ldi	r23, 0x39	; 57
    3c76:	7d 93       	st	X+, r23
    3c78:	2a 95       	dec	r18
    3c7a:	e9 f7       	brne	.-6      	; 0x3c76 <__ftoa_engine+0x14c>
    3c7c:	10 c0       	rjmp	.+32     	; 0x3c9e <__ftoa_engine+0x174>
    3c7e:	7d 93       	st	X+, r23
    3c80:	2a 95       	dec	r18
    3c82:	89 f6       	brne	.-94     	; 0x3c26 <__ftoa_engine+0xfc>
    3c84:	06 94       	lsr	r0
    3c86:	97 95       	ror	r25
    3c88:	67 95       	ror	r22
    3c8a:	37 95       	ror	r19
    3c8c:	17 95       	ror	r17
    3c8e:	17 94       	ror	r1
    3c90:	e1 18       	sub	r14, r1
    3c92:	f1 0a       	sbc	r15, r17
    3c94:	43 0b       	sbc	r20, r19
    3c96:	56 0b       	sbc	r21, r22
    3c98:	c9 0b       	sbc	r28, r25
    3c9a:	d0 09       	sbc	r29, r0
    3c9c:	98 f0       	brcs	.+38     	; 0x3cc4 <__ftoa_engine+0x19a>
    3c9e:	23 95       	inc	r18
    3ca0:	7e 91       	ld	r23, -X
    3ca2:	73 95       	inc	r23
    3ca4:	7a 33       	cpi	r23, 0x3A	; 58
    3ca6:	08 f0       	brcs	.+2      	; 0x3caa <__ftoa_engine+0x180>
    3ca8:	70 e3       	ldi	r23, 0x30	; 48
    3caa:	7c 93       	st	X, r23
    3cac:	20 13       	cpse	r18, r16
    3cae:	b8 f7       	brcc	.-18     	; 0x3c9e <__ftoa_engine+0x174>
    3cb0:	7e 91       	ld	r23, -X
    3cb2:	70 61       	ori	r23, 0x10	; 16
    3cb4:	7d 93       	st	X+, r23
    3cb6:	30 f0       	brcs	.+12     	; 0x3cc4 <__ftoa_engine+0x19a>
    3cb8:	83 95       	inc	r24
    3cba:	71 e3       	ldi	r23, 0x31	; 49
    3cbc:	7d 93       	st	X+, r23
    3cbe:	70 e3       	ldi	r23, 0x30	; 48
    3cc0:	2a 95       	dec	r18
    3cc2:	e1 f7       	brne	.-8      	; 0x3cbc <__ftoa_engine+0x192>
    3cc4:	11 24       	eor	r1, r1
    3cc6:	ef 90       	pop	r14
    3cc8:	ff 90       	pop	r15
    3cca:	0f 91       	pop	r16
    3ccc:	1f 91       	pop	r17
    3cce:	cf 91       	pop	r28
    3cd0:	df 91       	pop	r29
    3cd2:	99 27       	eor	r25, r25
    3cd4:	87 fd       	sbrc	r24, 7
    3cd6:	90 95       	com	r25
    3cd8:	08 95       	ret

00003cda <isspace>:
    3cda:	91 11       	cpse	r25, r1
    3cdc:	17 c2       	rjmp	.+1070   	; 0x410c <__ctype_isfalse>
    3cde:	80 32       	cpi	r24, 0x20	; 32
    3ce0:	19 f0       	breq	.+6      	; 0x3ce8 <isspace+0xe>
    3ce2:	89 50       	subi	r24, 0x09	; 9
    3ce4:	85 50       	subi	r24, 0x05	; 5
    3ce6:	d0 f7       	brcc	.-12     	; 0x3cdc <isspace+0x2>
    3ce8:	08 95       	ret

00003cea <tolower>:
    3cea:	91 11       	cpse	r25, r1
    3cec:	08 95       	ret
    3cee:	81 54       	subi	r24, 0x41	; 65
    3cf0:	8a 51       	subi	r24, 0x1A	; 26
    3cf2:	08 f4       	brcc	.+2      	; 0x3cf6 <tolower+0xc>
    3cf4:	80 5e       	subi	r24, 0xE0	; 224
    3cf6:	85 5a       	subi	r24, 0xA5	; 165
    3cf8:	08 95       	ret

00003cfa <strcpy_P>:
    3cfa:	fb 01       	movw	r30, r22
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	05 90       	lpm	r0, Z+
    3d00:	0d 92       	st	X+, r0
    3d02:	00 20       	and	r0, r0
    3d04:	e1 f7       	brne	.-8      	; 0x3cfe <strcpy_P+0x4>
    3d06:	08 95       	ret

00003d08 <strncasecmp_P>:
    3d08:	fb 01       	movw	r30, r22
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	41 50       	subi	r20, 0x01	; 1
    3d0e:	50 40       	sbci	r21, 0x00	; 0
    3d10:	88 f0       	brcs	.+34     	; 0x3d34 <strncasecmp_P+0x2c>
    3d12:	8d 91       	ld	r24, X+
    3d14:	81 34       	cpi	r24, 0x41	; 65
    3d16:	1c f0       	brlt	.+6      	; 0x3d1e <strncasecmp_P+0x16>
    3d18:	8b 35       	cpi	r24, 0x5B	; 91
    3d1a:	0c f4       	brge	.+2      	; 0x3d1e <strncasecmp_P+0x16>
    3d1c:	80 5e       	subi	r24, 0xE0	; 224
    3d1e:	65 91       	lpm	r22, Z+
    3d20:	61 34       	cpi	r22, 0x41	; 65
    3d22:	1c f0       	brlt	.+6      	; 0x3d2a <strncasecmp_P+0x22>
    3d24:	6b 35       	cpi	r22, 0x5B	; 91
    3d26:	0c f4       	brge	.+2      	; 0x3d2a <strncasecmp_P+0x22>
    3d28:	60 5e       	subi	r22, 0xE0	; 224
    3d2a:	86 1b       	sub	r24, r22
    3d2c:	61 11       	cpse	r22, r1
    3d2e:	71 f3       	breq	.-36     	; 0x3d0c <strncasecmp_P+0x4>
    3d30:	99 0b       	sbc	r25, r25
    3d32:	08 95       	ret
    3d34:	88 1b       	sub	r24, r24
    3d36:	fc cf       	rjmp	.-8      	; 0x3d30 <strncasecmp_P+0x28>

00003d38 <strncpy_P>:
    3d38:	fb 01       	movw	r30, r22
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	41 50       	subi	r20, 0x01	; 1
    3d3e:	50 40       	sbci	r21, 0x00	; 0
    3d40:	48 f0       	brcs	.+18     	; 0x3d54 <strncpy_P+0x1c>
    3d42:	05 90       	lpm	r0, Z+
    3d44:	0d 92       	st	X+, r0
    3d46:	00 20       	and	r0, r0
    3d48:	c9 f7       	brne	.-14     	; 0x3d3c <strncpy_P+0x4>
    3d4a:	01 c0       	rjmp	.+2      	; 0x3d4e <strncpy_P+0x16>
    3d4c:	1d 92       	st	X+, r1
    3d4e:	41 50       	subi	r20, 0x01	; 1
    3d50:	50 40       	sbci	r21, 0x00	; 0
    3d52:	e0 f7       	brcc	.-8      	; 0x3d4c <strncpy_P+0x14>
    3d54:	08 95       	ret

00003d56 <strnlen_P>:
    3d56:	fc 01       	movw	r30, r24
    3d58:	05 90       	lpm	r0, Z+
    3d5a:	61 50       	subi	r22, 0x01	; 1
    3d5c:	70 40       	sbci	r23, 0x00	; 0
    3d5e:	01 10       	cpse	r0, r1
    3d60:	d8 f7       	brcc	.-10     	; 0x3d58 <strnlen_P+0x2>
    3d62:	80 95       	com	r24
    3d64:	90 95       	com	r25
    3d66:	8e 0f       	add	r24, r30
    3d68:	9f 1f       	adc	r25, r31
    3d6a:	08 95       	ret

00003d6c <strcat>:
    3d6c:	fb 01       	movw	r30, r22
    3d6e:	dc 01       	movw	r26, r24
    3d70:	0d 90       	ld	r0, X+
    3d72:	00 20       	and	r0, r0
    3d74:	e9 f7       	brne	.-6      	; 0x3d70 <strcat+0x4>
    3d76:	11 97       	sbiw	r26, 0x01	; 1
    3d78:	01 90       	ld	r0, Z+
    3d7a:	0d 92       	st	X+, r0
    3d7c:	00 20       	and	r0, r0
    3d7e:	e1 f7       	brne	.-8      	; 0x3d78 <strcat+0xc>
    3d80:	08 95       	ret

00003d82 <strchr>:
    3d82:	fc 01       	movw	r30, r24
    3d84:	81 91       	ld	r24, Z+
    3d86:	86 17       	cp	r24, r22
    3d88:	21 f0       	breq	.+8      	; 0x3d92 <strchr+0x10>
    3d8a:	88 23       	and	r24, r24
    3d8c:	d9 f7       	brne	.-10     	; 0x3d84 <strchr+0x2>
    3d8e:	99 27       	eor	r25, r25
    3d90:	08 95       	ret
    3d92:	31 97       	sbiw	r30, 0x01	; 1
    3d94:	cf 01       	movw	r24, r30
    3d96:	08 95       	ret

00003d98 <strcmp>:
    3d98:	fb 01       	movw	r30, r22
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	8d 91       	ld	r24, X+
    3d9e:	01 90       	ld	r0, Z+
    3da0:	80 19       	sub	r24, r0
    3da2:	01 10       	cpse	r0, r1
    3da4:	d9 f3       	breq	.-10     	; 0x3d9c <strcmp+0x4>
    3da6:	99 0b       	sbc	r25, r25
    3da8:	08 95       	ret

00003daa <strcpy>:
    3daa:	fb 01       	movw	r30, r22
    3dac:	dc 01       	movw	r26, r24
    3dae:	01 90       	ld	r0, Z+
    3db0:	0d 92       	st	X+, r0
    3db2:	00 20       	and	r0, r0
    3db4:	e1 f7       	brne	.-8      	; 0x3dae <strcpy+0x4>
    3db6:	08 95       	ret

00003db8 <strncpy>:
    3db8:	fb 01       	movw	r30, r22
    3dba:	dc 01       	movw	r26, r24
    3dbc:	41 50       	subi	r20, 0x01	; 1
    3dbe:	50 40       	sbci	r21, 0x00	; 0
    3dc0:	48 f0       	brcs	.+18     	; 0x3dd4 <strncpy+0x1c>
    3dc2:	01 90       	ld	r0, Z+
    3dc4:	0d 92       	st	X+, r0
    3dc6:	00 20       	and	r0, r0
    3dc8:	c9 f7       	brne	.-14     	; 0x3dbc <strncpy+0x4>
    3dca:	01 c0       	rjmp	.+2      	; 0x3dce <strncpy+0x16>
    3dcc:	1d 92       	st	X+, r1
    3dce:	41 50       	subi	r20, 0x01	; 1
    3dd0:	50 40       	sbci	r21, 0x00	; 0
    3dd2:	e0 f7       	brcc	.-8      	; 0x3dcc <strncpy+0x14>
    3dd4:	08 95       	ret

00003dd6 <strnlen>:
    3dd6:	fc 01       	movw	r30, r24
    3dd8:	61 50       	subi	r22, 0x01	; 1
    3dda:	70 40       	sbci	r23, 0x00	; 0
    3ddc:	01 90       	ld	r0, Z+
    3dde:	01 10       	cpse	r0, r1
    3de0:	d8 f7       	brcc	.-10     	; 0x3dd8 <strnlen+0x2>
    3de2:	80 95       	com	r24
    3de4:	90 95       	com	r25
    3de6:	8e 0f       	add	r24, r30
    3de8:	9f 1f       	adc	r25, r31
    3dea:	08 95       	ret

00003dec <strpbrk>:
    3dec:	dc 01       	movw	r26, r24
    3dee:	99 27       	eor	r25, r25
    3df0:	8d 91       	ld	r24, X+
    3df2:	88 23       	and	r24, r24
    3df4:	41 f0       	breq	.+16     	; 0x3e06 <strpbrk+0x1a>
    3df6:	fb 01       	movw	r30, r22
    3df8:	01 90       	ld	r0, Z+
    3dfa:	08 16       	cp	r0, r24
    3dfc:	01 10       	cpse	r0, r1
    3dfe:	e1 f7       	brne	.-8      	; 0x3df8 <strpbrk+0xc>
    3e00:	b9 f7       	brne	.-18     	; 0x3df0 <strpbrk+0x4>
    3e02:	11 97       	sbiw	r26, 0x01	; 1
    3e04:	cd 01       	movw	r24, r26
    3e06:	08 95       	ret

00003e08 <strstr>:
    3e08:	fb 01       	movw	r30, r22
    3e0a:	51 91       	ld	r21, Z+
    3e0c:	55 23       	and	r21, r21
    3e0e:	a9 f0       	breq	.+42     	; 0x3e3a <strstr+0x32>
    3e10:	bf 01       	movw	r22, r30
    3e12:	dc 01       	movw	r26, r24
    3e14:	4d 91       	ld	r20, X+
    3e16:	45 17       	cp	r20, r21
    3e18:	41 11       	cpse	r20, r1
    3e1a:	e1 f7       	brne	.-8      	; 0x3e14 <strstr+0xc>
    3e1c:	59 f4       	brne	.+22     	; 0x3e34 <strstr+0x2c>
    3e1e:	cd 01       	movw	r24, r26
    3e20:	01 90       	ld	r0, Z+
    3e22:	00 20       	and	r0, r0
    3e24:	49 f0       	breq	.+18     	; 0x3e38 <strstr+0x30>
    3e26:	4d 91       	ld	r20, X+
    3e28:	40 15       	cp	r20, r0
    3e2a:	41 11       	cpse	r20, r1
    3e2c:	c9 f3       	breq	.-14     	; 0x3e20 <strstr+0x18>
    3e2e:	fb 01       	movw	r30, r22
    3e30:	41 11       	cpse	r20, r1
    3e32:	ef cf       	rjmp	.-34     	; 0x3e12 <strstr+0xa>
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	01 97       	sbiw	r24, 0x01	; 1
    3e3a:	08 95       	ret

00003e3c <clearerr>:
    3e3c:	fc 01       	movw	r30, r24
    3e3e:	83 81       	ldd	r24, Z+3	; 0x03
    3e40:	8f 7c       	andi	r24, 0xCF	; 207
    3e42:	83 83       	std	Z+3, r24	; 0x03
    3e44:	08 95       	ret

00003e46 <fgets>:
    3e46:	a0 e0       	ldi	r26, 0x00	; 0
    3e48:	b0 e0       	ldi	r27, 0x00	; 0
    3e4a:	e9 e2       	ldi	r30, 0x29	; 41
    3e4c:	ff e1       	ldi	r31, 0x1F	; 31
    3e4e:	0c 94 08 1c 	jmp	0x3810	; 0x3810 <__prologue_saves__+0x14>
    3e52:	7c 01       	movw	r14, r24
    3e54:	6a 01       	movw	r12, r20
    3e56:	fa 01       	movw	r30, r20
    3e58:	83 81       	ldd	r24, Z+3	; 0x03
    3e5a:	80 ff       	sbrs	r24, 0
    3e5c:	19 c0       	rjmp	.+50     	; 0x3e90 <fgets+0x4a>
    3e5e:	16 16       	cp	r1, r22
    3e60:	17 06       	cpc	r1, r23
    3e62:	b4 f4       	brge	.+44     	; 0x3e90 <fgets+0x4a>
    3e64:	eb 01       	movw	r28, r22
    3e66:	21 97       	sbiw	r28, 0x01	; 1
    3e68:	87 01       	movw	r16, r14
    3e6a:	0d c0       	rjmp	.+26     	; 0x3e86 <fgets+0x40>
    3e6c:	c6 01       	movw	r24, r12
    3e6e:	0e 94 89 20 	call	0x4112	; 0x4112 <fgetc>
    3e72:	ff ef       	ldi	r31, 0xFF	; 255
    3e74:	8f 3f       	cpi	r24, 0xFF	; 255
    3e76:	9f 07       	cpc	r25, r31
    3e78:	59 f0       	breq	.+22     	; 0x3e90 <fgets+0x4a>
    3e7a:	f8 01       	movw	r30, r16
    3e7c:	81 93       	st	Z+, r24
    3e7e:	8f 01       	movw	r16, r30
    3e80:	0a 97       	sbiw	r24, 0x0a	; 10
    3e82:	19 f0       	breq	.+6      	; 0x3e8a <fgets+0x44>
    3e84:	21 97       	sbiw	r28, 0x01	; 1
    3e86:	20 97       	sbiw	r28, 0x00	; 0
    3e88:	89 f7       	brne	.-30     	; 0x3e6c <fgets+0x26>
    3e8a:	f8 01       	movw	r30, r16
    3e8c:	10 82       	st	Z, r1
    3e8e:	02 c0       	rjmp	.+4      	; 0x3e94 <fgets+0x4e>
    3e90:	ee 24       	eor	r14, r14
    3e92:	ff 24       	eor	r15, r15
    3e94:	c7 01       	movw	r24, r14
    3e96:	cd b7       	in	r28, 0x3d	; 61
    3e98:	de b7       	in	r29, 0x3e	; 62
    3e9a:	e8 e0       	ldi	r30, 0x08	; 8
    3e9c:	0c 94 24 1c 	jmp	0x3848	; 0x3848 <__epilogue_restores__+0x14>

00003ea0 <fputc>:
    3ea0:	0f 93       	push	r16
    3ea2:	1f 93       	push	r17
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
    3ea8:	8c 01       	movw	r16, r24
    3eaa:	eb 01       	movw	r28, r22
    3eac:	8b 81       	ldd	r24, Y+3	; 0x03
    3eae:	81 ff       	sbrs	r24, 1
    3eb0:	1b c0       	rjmp	.+54     	; 0x3ee8 <fputc+0x48>
    3eb2:	82 ff       	sbrs	r24, 2
    3eb4:	0d c0       	rjmp	.+26     	; 0x3ed0 <fputc+0x30>
    3eb6:	2e 81       	ldd	r18, Y+6	; 0x06
    3eb8:	3f 81       	ldd	r19, Y+7	; 0x07
    3eba:	8c 81       	ldd	r24, Y+4	; 0x04
    3ebc:	9d 81       	ldd	r25, Y+5	; 0x05
    3ebe:	28 17       	cp	r18, r24
    3ec0:	39 07       	cpc	r19, r25
    3ec2:	64 f4       	brge	.+24     	; 0x3edc <fputc+0x3c>
    3ec4:	e8 81       	ld	r30, Y
    3ec6:	f9 81       	ldd	r31, Y+1	; 0x01
    3ec8:	01 93       	st	Z+, r16
    3eca:	f9 83       	std	Y+1, r31	; 0x01
    3ecc:	e8 83       	st	Y, r30
    3ece:	06 c0       	rjmp	.+12     	; 0x3edc <fputc+0x3c>
    3ed0:	e8 85       	ldd	r30, Y+8	; 0x08
    3ed2:	f9 85       	ldd	r31, Y+9	; 0x09
    3ed4:	80 2f       	mov	r24, r16
    3ed6:	09 95       	icall
    3ed8:	89 2b       	or	r24, r25
    3eda:	31 f4       	brne	.+12     	; 0x3ee8 <fputc+0x48>
    3edc:	8e 81       	ldd	r24, Y+6	; 0x06
    3ede:	9f 81       	ldd	r25, Y+7	; 0x07
    3ee0:	01 96       	adiw	r24, 0x01	; 1
    3ee2:	9f 83       	std	Y+7, r25	; 0x07
    3ee4:	8e 83       	std	Y+6, r24	; 0x06
    3ee6:	02 c0       	rjmp	.+4      	; 0x3eec <fputc+0x4c>
    3ee8:	0f ef       	ldi	r16, 0xFF	; 255
    3eea:	1f ef       	ldi	r17, 0xFF	; 255
    3eec:	c8 01       	movw	r24, r16
    3eee:	df 91       	pop	r29
    3ef0:	cf 91       	pop	r28
    3ef2:	1f 91       	pop	r17
    3ef4:	0f 91       	pop	r16
    3ef6:	08 95       	ret

00003ef8 <fputs>:
    3ef8:	ef 92       	push	r14
    3efa:	ff 92       	push	r15
    3efc:	0f 93       	push	r16
    3efe:	1f 93       	push	r17
    3f00:	cf 93       	push	r28
    3f02:	df 93       	push	r29
    3f04:	7c 01       	movw	r14, r24
    3f06:	8b 01       	movw	r16, r22
    3f08:	db 01       	movw	r26, r22
    3f0a:	13 96       	adiw	r26, 0x03	; 3
    3f0c:	8c 91       	ld	r24, X
    3f0e:	81 fd       	sbrc	r24, 1
    3f10:	03 c0       	rjmp	.+6      	; 0x3f18 <fputs+0x20>
    3f12:	cf ef       	ldi	r28, 0xFF	; 255
    3f14:	df ef       	ldi	r29, 0xFF	; 255
    3f16:	13 c0       	rjmp	.+38     	; 0x3f3e <fputs+0x46>
    3f18:	c0 e0       	ldi	r28, 0x00	; 0
    3f1a:	d0 e0       	ldi	r29, 0x00	; 0
    3f1c:	0b c0       	rjmp	.+22     	; 0x3f34 <fputs+0x3c>
    3f1e:	d8 01       	movw	r26, r16
    3f20:	18 96       	adiw	r26, 0x08	; 8
    3f22:	ed 91       	ld	r30, X+
    3f24:	fc 91       	ld	r31, X
    3f26:	19 97       	sbiw	r26, 0x09	; 9
    3f28:	b8 01       	movw	r22, r16
    3f2a:	09 95       	icall
    3f2c:	89 2b       	or	r24, r25
    3f2e:	11 f0       	breq	.+4      	; 0x3f34 <fputs+0x3c>
    3f30:	cf ef       	ldi	r28, 0xFF	; 255
    3f32:	df ef       	ldi	r29, 0xFF	; 255
    3f34:	f7 01       	movw	r30, r14
    3f36:	81 91       	ld	r24, Z+
    3f38:	7f 01       	movw	r14, r30
    3f3a:	88 23       	and	r24, r24
    3f3c:	81 f7       	brne	.-32     	; 0x3f1e <fputs+0x26>
    3f3e:	ce 01       	movw	r24, r28
    3f40:	cd b7       	in	r28, 0x3d	; 61
    3f42:	de b7       	in	r29, 0x3e	; 62
    3f44:	e6 e0       	ldi	r30, 0x06	; 6
    3f46:	0c 94 26 1c 	jmp	0x384c	; 0x384c <__epilogue_restores__+0x18>

00003f4a <printf>:
    3f4a:	a0 e0       	ldi	r26, 0x00	; 0
    3f4c:	b0 e0       	ldi	r27, 0x00	; 0
    3f4e:	eb ea       	ldi	r30, 0xAB	; 171
    3f50:	ff e1       	ldi	r31, 0x1F	; 31
    3f52:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__prologue_saves__+0x20>
    3f56:	fe 01       	movw	r30, r28
    3f58:	35 96       	adiw	r30, 0x05	; 5
    3f5a:	61 91       	ld	r22, Z+
    3f5c:	71 91       	ld	r23, Z+
    3f5e:	80 91 7c 06 	lds	r24, 0x067C
    3f62:	90 91 7d 06 	lds	r25, 0x067D
    3f66:	af 01       	movw	r20, r30
    3f68:	0e 94 e5 15 	call	0x2bca	; 0x2bca <vfprintf>
    3f6c:	20 96       	adiw	r28, 0x00	; 0
    3f6e:	e2 e0       	ldi	r30, 0x02	; 2
    3f70:	0c 94 2a 1c 	jmp	0x3854	; 0x3854 <__epilogue_restores__+0x20>

00003f74 <printf_P>:
    3f74:	a0 e0       	ldi	r26, 0x00	; 0
    3f76:	b0 e0       	ldi	r27, 0x00	; 0
    3f78:	e0 ec       	ldi	r30, 0xC0	; 192
    3f7a:	ff e1       	ldi	r31, 0x1F	; 31
    3f7c:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__prologue_saves__+0x20>
    3f80:	fe 01       	movw	r30, r28
    3f82:	35 96       	adiw	r30, 0x05	; 5
    3f84:	61 91       	ld	r22, Z+
    3f86:	71 91       	ld	r23, Z+
    3f88:	a0 91 7c 06 	lds	r26, 0x067C
    3f8c:	b0 91 7d 06 	lds	r27, 0x067D
    3f90:	13 96       	adiw	r26, 0x03	; 3
    3f92:	8c 91       	ld	r24, X
    3f94:	13 97       	sbiw	r26, 0x03	; 3
    3f96:	88 60       	ori	r24, 0x08	; 8
    3f98:	13 96       	adiw	r26, 0x03	; 3
    3f9a:	8c 93       	st	X, r24
    3f9c:	80 91 7c 06 	lds	r24, 0x067C
    3fa0:	90 91 7d 06 	lds	r25, 0x067D
    3fa4:	af 01       	movw	r20, r30
    3fa6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <vfprintf>
    3faa:	e0 91 7c 06 	lds	r30, 0x067C
    3fae:	f0 91 7d 06 	lds	r31, 0x067D
    3fb2:	23 81       	ldd	r18, Z+3	; 0x03
    3fb4:	27 7f       	andi	r18, 0xF7	; 247
    3fb6:	23 83       	std	Z+3, r18	; 0x03
    3fb8:	20 96       	adiw	r28, 0x00	; 0
    3fba:	e2 e0       	ldi	r30, 0x02	; 2
    3fbc:	0c 94 2a 1c 	jmp	0x3854	; 0x3854 <__epilogue_restores__+0x20>

00003fc0 <sprintf>:
    3fc0:	ae e0       	ldi	r26, 0x0E	; 14
    3fc2:	b0 e0       	ldi	r27, 0x00	; 0
    3fc4:	e6 ee       	ldi	r30, 0xE6	; 230
    3fc6:	ff e1       	ldi	r31, 0x1F	; 31
    3fc8:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <__prologue_saves__+0x1c>
    3fcc:	0d 89       	ldd	r16, Y+21	; 0x15
    3fce:	1e 89       	ldd	r17, Y+22	; 0x16
    3fd0:	86 e0       	ldi	r24, 0x06	; 6
    3fd2:	8c 83       	std	Y+4, r24	; 0x04
    3fd4:	1a 83       	std	Y+2, r17	; 0x02
    3fd6:	09 83       	std	Y+1, r16	; 0x01
    3fd8:	8f ef       	ldi	r24, 0xFF	; 255
    3fda:	9f e7       	ldi	r25, 0x7F	; 127
    3fdc:	9e 83       	std	Y+6, r25	; 0x06
    3fde:	8d 83       	std	Y+5, r24	; 0x05
    3fe0:	9e 01       	movw	r18, r28
    3fe2:	27 5e       	subi	r18, 0xE7	; 231
    3fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fe6:	ce 01       	movw	r24, r28
    3fe8:	01 96       	adiw	r24, 0x01	; 1
    3fea:	6f 89       	ldd	r22, Y+23	; 0x17
    3fec:	78 8d       	ldd	r23, Y+24	; 0x18
    3fee:	a9 01       	movw	r20, r18
    3ff0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <vfprintf>
    3ff4:	2f 81       	ldd	r18, Y+7	; 0x07
    3ff6:	38 85       	ldd	r19, Y+8	; 0x08
    3ff8:	02 0f       	add	r16, r18
    3ffa:	13 1f       	adc	r17, r19
    3ffc:	f8 01       	movw	r30, r16
    3ffe:	10 82       	st	Z, r1
    4000:	2e 96       	adiw	r28, 0x0e	; 14
    4002:	e4 e0       	ldi	r30, 0x04	; 4
    4004:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__epilogue_restores__+0x1c>

00004008 <sprintf_P>:
    4008:	ae e0       	ldi	r26, 0x0E	; 14
    400a:	b0 e0       	ldi	r27, 0x00	; 0
    400c:	ea e0       	ldi	r30, 0x0A	; 10
    400e:	f0 e2       	ldi	r31, 0x20	; 32
    4010:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <__prologue_saves__+0x1c>
    4014:	0d 89       	ldd	r16, Y+21	; 0x15
    4016:	1e 89       	ldd	r17, Y+22	; 0x16
    4018:	8e e0       	ldi	r24, 0x0E	; 14
    401a:	8c 83       	std	Y+4, r24	; 0x04
    401c:	1a 83       	std	Y+2, r17	; 0x02
    401e:	09 83       	std	Y+1, r16	; 0x01
    4020:	8f ef       	ldi	r24, 0xFF	; 255
    4022:	9f e7       	ldi	r25, 0x7F	; 127
    4024:	9e 83       	std	Y+6, r25	; 0x06
    4026:	8d 83       	std	Y+5, r24	; 0x05
    4028:	9e 01       	movw	r18, r28
    402a:	27 5e       	subi	r18, 0xE7	; 231
    402c:	3f 4f       	sbci	r19, 0xFF	; 255
    402e:	ce 01       	movw	r24, r28
    4030:	01 96       	adiw	r24, 0x01	; 1
    4032:	6f 89       	ldd	r22, Y+23	; 0x17
    4034:	78 8d       	ldd	r23, Y+24	; 0x18
    4036:	a9 01       	movw	r20, r18
    4038:	0e 94 e5 15 	call	0x2bca	; 0x2bca <vfprintf>
    403c:	2f 81       	ldd	r18, Y+7	; 0x07
    403e:	38 85       	ldd	r19, Y+8	; 0x08
    4040:	02 0f       	add	r16, r18
    4042:	13 1f       	adc	r17, r19
    4044:	f8 01       	movw	r30, r16
    4046:	10 82       	st	Z, r1
    4048:	2e 96       	adiw	r28, 0x0e	; 14
    404a:	e4 e0       	ldi	r30, 0x04	; 4
    404c:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__epilogue_restores__+0x1c>

00004050 <__ultoa_invert>:
    4050:	fa 01       	movw	r30, r20
    4052:	aa 27       	eor	r26, r26
    4054:	28 30       	cpi	r18, 0x08	; 8
    4056:	51 f1       	breq	.+84     	; 0x40ac <__ultoa_invert+0x5c>
    4058:	20 31       	cpi	r18, 0x10	; 16
    405a:	81 f1       	breq	.+96     	; 0x40bc <__ultoa_invert+0x6c>
    405c:	e8 94       	clt
    405e:	6f 93       	push	r22
    4060:	6e 7f       	andi	r22, 0xFE	; 254
    4062:	6e 5f       	subi	r22, 0xFE	; 254
    4064:	7f 4f       	sbci	r23, 0xFF	; 255
    4066:	8f 4f       	sbci	r24, 0xFF	; 255
    4068:	9f 4f       	sbci	r25, 0xFF	; 255
    406a:	af 4f       	sbci	r26, 0xFF	; 255
    406c:	b1 e0       	ldi	r27, 0x01	; 1
    406e:	3e d0       	rcall	.+124    	; 0x40ec <__ultoa_invert+0x9c>
    4070:	b4 e0       	ldi	r27, 0x04	; 4
    4072:	3c d0       	rcall	.+120    	; 0x40ec <__ultoa_invert+0x9c>
    4074:	67 0f       	add	r22, r23
    4076:	78 1f       	adc	r23, r24
    4078:	89 1f       	adc	r24, r25
    407a:	9a 1f       	adc	r25, r26
    407c:	a1 1d       	adc	r26, r1
    407e:	68 0f       	add	r22, r24
    4080:	79 1f       	adc	r23, r25
    4082:	8a 1f       	adc	r24, r26
    4084:	91 1d       	adc	r25, r1
    4086:	a1 1d       	adc	r26, r1
    4088:	6a 0f       	add	r22, r26
    408a:	71 1d       	adc	r23, r1
    408c:	81 1d       	adc	r24, r1
    408e:	91 1d       	adc	r25, r1
    4090:	a1 1d       	adc	r26, r1
    4092:	20 d0       	rcall	.+64     	; 0x40d4 <__ultoa_invert+0x84>
    4094:	09 f4       	brne	.+2      	; 0x4098 <__ultoa_invert+0x48>
    4096:	68 94       	set
    4098:	3f 91       	pop	r19
    409a:	2a e0       	ldi	r18, 0x0A	; 10
    409c:	26 9f       	mul	r18, r22
    409e:	11 24       	eor	r1, r1
    40a0:	30 19       	sub	r19, r0
    40a2:	30 5d       	subi	r19, 0xD0	; 208
    40a4:	31 93       	st	Z+, r19
    40a6:	de f6       	brtc	.-74     	; 0x405e <__ultoa_invert+0xe>
    40a8:	cf 01       	movw	r24, r30
    40aa:	08 95       	ret
    40ac:	46 2f       	mov	r20, r22
    40ae:	47 70       	andi	r20, 0x07	; 7
    40b0:	40 5d       	subi	r20, 0xD0	; 208
    40b2:	41 93       	st	Z+, r20
    40b4:	b3 e0       	ldi	r27, 0x03	; 3
    40b6:	0f d0       	rcall	.+30     	; 0x40d6 <__ultoa_invert+0x86>
    40b8:	c9 f7       	brne	.-14     	; 0x40ac <__ultoa_invert+0x5c>
    40ba:	f6 cf       	rjmp	.-20     	; 0x40a8 <__ultoa_invert+0x58>
    40bc:	46 2f       	mov	r20, r22
    40be:	4f 70       	andi	r20, 0x0F	; 15
    40c0:	40 5d       	subi	r20, 0xD0	; 208
    40c2:	4a 33       	cpi	r20, 0x3A	; 58
    40c4:	18 f0       	brcs	.+6      	; 0x40cc <__ultoa_invert+0x7c>
    40c6:	49 5d       	subi	r20, 0xD9	; 217
    40c8:	31 fd       	sbrc	r19, 1
    40ca:	40 52       	subi	r20, 0x20	; 32
    40cc:	41 93       	st	Z+, r20
    40ce:	02 d0       	rcall	.+4      	; 0x40d4 <__ultoa_invert+0x84>
    40d0:	a9 f7       	brne	.-22     	; 0x40bc <__ultoa_invert+0x6c>
    40d2:	ea cf       	rjmp	.-44     	; 0x40a8 <__ultoa_invert+0x58>
    40d4:	b4 e0       	ldi	r27, 0x04	; 4
    40d6:	a6 95       	lsr	r26
    40d8:	97 95       	ror	r25
    40da:	87 95       	ror	r24
    40dc:	77 95       	ror	r23
    40de:	67 95       	ror	r22
    40e0:	ba 95       	dec	r27
    40e2:	c9 f7       	brne	.-14     	; 0x40d6 <__ultoa_invert+0x86>
    40e4:	00 97       	sbiw	r24, 0x00	; 0
    40e6:	61 05       	cpc	r22, r1
    40e8:	71 05       	cpc	r23, r1
    40ea:	08 95       	ret
    40ec:	9b 01       	movw	r18, r22
    40ee:	ac 01       	movw	r20, r24
    40f0:	0a 2e       	mov	r0, r26
    40f2:	06 94       	lsr	r0
    40f4:	57 95       	ror	r21
    40f6:	47 95       	ror	r20
    40f8:	37 95       	ror	r19
    40fa:	27 95       	ror	r18
    40fc:	ba 95       	dec	r27
    40fe:	c9 f7       	brne	.-14     	; 0x40f2 <__ultoa_invert+0xa2>
    4100:	62 0f       	add	r22, r18
    4102:	73 1f       	adc	r23, r19
    4104:	84 1f       	adc	r24, r20
    4106:	95 1f       	adc	r25, r21
    4108:	a0 1d       	adc	r26, r0
    410a:	08 95       	ret

0000410c <__ctype_isfalse>:
    410c:	99 27       	eor	r25, r25
    410e:	88 27       	eor	r24, r24

00004110 <__ctype_istrue>:
    4110:	08 95       	ret

00004112 <fgetc>:
    4112:	cf 93       	push	r28
    4114:	df 93       	push	r29
    4116:	ec 01       	movw	r28, r24
    4118:	4b 81       	ldd	r20, Y+3	; 0x03
    411a:	40 ff       	sbrs	r20, 0
    411c:	1a c0       	rjmp	.+52     	; 0x4152 <fgetc+0x40>
    411e:	46 ff       	sbrs	r20, 6
    4120:	0a c0       	rjmp	.+20     	; 0x4136 <fgetc+0x24>
    4122:	4f 7b       	andi	r20, 0xBF	; 191
    4124:	4b 83       	std	Y+3, r20	; 0x03
    4126:	8e 81       	ldd	r24, Y+6	; 0x06
    4128:	9f 81       	ldd	r25, Y+7	; 0x07
    412a:	01 96       	adiw	r24, 0x01	; 1
    412c:	9f 83       	std	Y+7, r25	; 0x07
    412e:	8e 83       	std	Y+6, r24	; 0x06
    4130:	8a 81       	ldd	r24, Y+2	; 0x02
    4132:	28 2f       	mov	r18, r24
    4134:	2b c0       	rjmp	.+86     	; 0x418c <fgetc+0x7a>
    4136:	42 ff       	sbrs	r20, 2
    4138:	13 c0       	rjmp	.+38     	; 0x4160 <fgetc+0x4e>
    413a:	e8 81       	ld	r30, Y
    413c:	f9 81       	ldd	r31, Y+1	; 0x01
    413e:	80 81       	ld	r24, Z
    4140:	28 2f       	mov	r18, r24
    4142:	33 27       	eor	r19, r19
    4144:	27 fd       	sbrc	r18, 7
    4146:	30 95       	com	r19
    4148:	21 15       	cp	r18, r1
    414a:	31 05       	cpc	r19, r1
    414c:	29 f4       	brne	.+10     	; 0x4158 <fgetc+0x46>
    414e:	40 62       	ori	r20, 0x20	; 32
    4150:	4b 83       	std	Y+3, r20	; 0x03
    4152:	2f ef       	ldi	r18, 0xFF	; 255
    4154:	3f ef       	ldi	r19, 0xFF	; 255
    4156:	1b c0       	rjmp	.+54     	; 0x418e <fgetc+0x7c>
    4158:	31 96       	adiw	r30, 0x01	; 1
    415a:	f9 83       	std	Y+1, r31	; 0x01
    415c:	e8 83       	st	Y, r30
    415e:	11 c0       	rjmp	.+34     	; 0x4182 <fgetc+0x70>
    4160:	ea 85       	ldd	r30, Y+10	; 0x0a
    4162:	fb 85       	ldd	r31, Y+11	; 0x0b
    4164:	ce 01       	movw	r24, r28
    4166:	09 95       	icall
    4168:	9c 01       	movw	r18, r24
    416a:	97 ff       	sbrs	r25, 7
    416c:	0a c0       	rjmp	.+20     	; 0x4182 <fgetc+0x70>
    416e:	9b 81       	ldd	r25, Y+3	; 0x03
    4170:	2f 5f       	subi	r18, 0xFF	; 255
    4172:	3f 4f       	sbci	r19, 0xFF	; 255
    4174:	11 f0       	breq	.+4      	; 0x417a <fgetc+0x68>
    4176:	80 e2       	ldi	r24, 0x20	; 32
    4178:	01 c0       	rjmp	.+2      	; 0x417c <fgetc+0x6a>
    417a:	80 e1       	ldi	r24, 0x10	; 16
    417c:	89 2b       	or	r24, r25
    417e:	8b 83       	std	Y+3, r24	; 0x03
    4180:	e8 cf       	rjmp	.-48     	; 0x4152 <fgetc+0x40>
    4182:	8e 81       	ldd	r24, Y+6	; 0x06
    4184:	9f 81       	ldd	r25, Y+7	; 0x07
    4186:	01 96       	adiw	r24, 0x01	; 1
    4188:	9f 83       	std	Y+7, r25	; 0x07
    418a:	8e 83       	std	Y+6, r24	; 0x06
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	c9 01       	movw	r24, r18
    4190:	df 91       	pop	r29
    4192:	cf 91       	pop	r28
    4194:	08 95       	ret

00004196 <_exit>:
    4196:	f8 94       	cli

00004198 <__stop_program>:
    4198:	ff cf       	rjmp	.-2      	; 0x4198 <__stop_program>
